{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted, onBeforeUnmount } from \"vue\";\nimport Chart from \"chart.js/auto\"; // Import Chart.js (automatically includes necessary components like line, bar, etc.)\nimport axios from \"axios\";\nimport Navbar from \"/src/components/Admin/Navbar.vue\";\nexport default {\n  components: {\n    Navbar\n  },\n  setup() {\n    const chartCanvas = ref(null); // Reference to the canvas element\n    let chartInstance = null; // Variable to hold the Chart.js instance\n    const salesData = ref([]);\n\n    // Fetch the sales data\n    onMounted(async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/get_sales\");\n        if (response.data.success) {\n          salesData.value = response.data.salesDatas;\n          console.log(\"Sales data fetched:\", salesData.value);\n          renderChart(); // Render the chart once the data is fetched\n        } else {\n          console.error(\"Failed to fetch sales data\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching sales data:\", error);\n      }\n    });\n\n    // Function to render the chart after data is fetched\n    const renderChart = () => {\n      if (salesData.value.length > 0 && chartCanvas.value) {\n        const labels = salesData.value.map(data => data._id); // Assuming '_id' as labels\n        const totalSales = salesData.value.map(data => data.totalSales);\n        const totalProfit = salesData.value.map(data => data.totalProfit);\n        const ctx = chartCanvas.value.getContext(\"2d\"); // Get the context for the canvas element\n\n        // Initialize the chart with the provided data\n        chartInstance = new Chart(ctx, {\n          type: \"bar\",\n          // Bar chart type (vertical by default)\n          data: {\n            labels: labels,\n            // X-axis labels (dates)\n            datasets: [{\n              label: \"Total Sales\",\n              data: totalSales,\n              backgroundColor: \"rgba(75, 192, 192, 0.6)\",\n              // Bar color for total sales\n              borderColor: \"rgb(75, 192, 192)\",\n              // Bar border color\n              borderWidth: 1\n            }, {\n              label: \"Total Profit\",\n              data: totalProfit,\n              backgroundColor: \"rgba(255, 99, 132, 0.6)\",\n              // Bar color for total profit\n              borderColor: \"rgb(255, 99, 132)\",\n              // Bar border color\n              borderWidth: 1\n            }]\n          },\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: \"top\"\n              },\n              tooltip: {\n                enabled: true\n              }\n            },\n            scales: {\n              x: {\n                title: {\n                  display: true,\n                  text: \"Dates\"\n                }\n              },\n              y: {\n                title: {\n                  display: true,\n                  text: \"Values\"\n                },\n                beginAtZero: true\n              }\n            }\n          }\n        });\n      }\n    };\n\n    // Clean up the chart instance when the component is unmounted\n    onBeforeUnmount(() => {\n      if (chartInstance) {\n        chartInstance.destroy();\n      }\n    });\n    return {\n      chartCanvas // Reference to the canvas element\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onBeforeUnmount","Chart","axios","Navbar","components","setup","chartCanvas","chartInstance","salesData","response","get","data","success","value","salesDatas","console","log","renderChart","error","length","labels","map","_id","totalSales","totalProfit","ctx","getContext","type","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","plugins","legend","position","tooltip","enabled","scales","x","title","display","text","y","beginAtZero","destroy"],"sources":["C:\\Users\\Administrator\\OneDrive\\Desktop\\POSExpress\\frontend\\src\\components\\Admin\\Main\\Dashboard.vue"],"sourcesContent":["<template>\r\n  <Navbar />\r\n  <div class=\"page-wrapper\">\r\n    <div class=\"content\">\r\n      <div class=\"row\">\r\n        <div class=\"card-body\">\r\n          <!-- Canvas element for Chart.js -->\r\n          <canvas ref=\"chartCanvas\"></canvas>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, onBeforeUnmount } from \"vue\";\r\nimport Chart from \"chart.js/auto\"; // Import Chart.js (automatically includes necessary components like line, bar, etc.)\r\nimport axios from \"axios\";\r\nimport Navbar from \"/src/components/Admin/Navbar.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    Navbar,\r\n  },\r\n  setup() {\r\n    const chartCanvas = ref(null); // Reference to the canvas element\r\n    let chartInstance = null; // Variable to hold the Chart.js instance\r\n    const salesData = ref([]);\r\n\r\n    // Fetch the sales data\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/get_sales\");\r\n        if (response.data.success) {\r\n          salesData.value = response.data.salesDatas;\r\n          console.log(\"Sales data fetched:\", salesData.value);\r\n          renderChart(); // Render the chart once the data is fetched\r\n        } else {\r\n          console.error(\"Failed to fetch sales data\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching sales data:\", error);\r\n      }\r\n    });\r\n\r\n    // Function to render the chart after data is fetched\r\n    const renderChart = () => {\r\n      if (salesData.value.length > 0 && chartCanvas.value) {\r\n        const labels = salesData.value.map((data) => data._id); // Assuming '_id' as labels\r\n        const totalSales = salesData.value.map((data) => data.totalSales);\r\n        const totalProfit = salesData.value.map((data) => data.totalProfit);\r\n\r\n        const ctx = chartCanvas.value.getContext(\"2d\"); // Get the context for the canvas element\r\n\r\n        // Initialize the chart with the provided data\r\n        chartInstance = new Chart(ctx, {\r\n          type: \"bar\", // Bar chart type (vertical by default)\r\n          data: {\r\n            labels: labels, // X-axis labels (dates)\r\n            datasets: [\r\n              {\r\n                label: \"Total Sales\",\r\n                data: totalSales,\r\n                backgroundColor: \"rgba(75, 192, 192, 0.6)\", // Bar color for total sales\r\n                borderColor: \"rgb(75, 192, 192)\", // Bar border color\r\n                borderWidth: 1,\r\n              },\r\n              {\r\n                label: \"Total Profit\",\r\n                data: totalProfit,\r\n                backgroundColor: \"rgba(255, 99, 132, 0.6)\", // Bar color for total profit\r\n                borderColor: \"rgb(255, 99, 132)\", // Bar border color\r\n                borderWidth: 1,\r\n              },\r\n            ],\r\n          },\r\n          options: {\r\n            responsive: true,\r\n            plugins: {\r\n              legend: {\r\n                position: \"top\",\r\n              },\r\n              tooltip: {\r\n                enabled: true,\r\n              },\r\n            },\r\n            scales: {\r\n              x: {\r\n                title: {\r\n                  display: true,\r\n                  text: \"Dates\",\r\n                },\r\n              },\r\n              y: {\r\n                title: {\r\n                  display: true,\r\n                  text: \"Values\",\r\n                },\r\n                beginAtZero: true,\r\n              },\r\n            },\r\n          },\r\n        });\r\n      }\r\n    };\r\n\r\n    // Clean up the chart instance when the component is unmounted\r\n    onBeforeUnmount(() => {\r\n      if (chartInstance) {\r\n        chartInstance.destroy();\r\n      }\r\n    });\r\n\r\n    return {\r\n      chartCanvas, // Reference to the canvas element\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Optional styling for your page or components */\r\ncanvas {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  height: 400px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}