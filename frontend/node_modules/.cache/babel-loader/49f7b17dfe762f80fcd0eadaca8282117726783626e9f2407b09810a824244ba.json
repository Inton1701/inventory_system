{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"error-message\"\n};\nconst _hoisted_2 = {\n  ref: \"svgRef\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [$setup.errorMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, _toDisplayString($setup.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), (_openBlock(), _createElementBlock(\"svg\", _hoisted_2, null, 512 /* NEED_PATCH */)), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.downloadBarcode && $setup.downloadBarcode(...args))\n  }, \"Download Barcode as PNG\")]);\n}","map":{"version":3,"names":["key","class","ref","_createElementBlock","$setup","errorMessage","_hoisted_1","_toDisplayString","_createCommentVNode","_hoisted_2","_createElementVNode","onClick","_cache","args","downloadBarcode"],"sources":["C:\\Users\\Administrator\\OneDrive\\Desktop\\POSExpress\\frontend\\src\\components\\Admin\\Inventory\\Barcode.vue"],"sourcesContent":["<script>\r\nimport JsBarcode from 'jsbarcode';\r\nimport { ref, onMounted, watch, nextTick } from 'vue';\r\n\r\nexport default {\r\n  props: {\r\n    sku: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    productName: {\r\n      type: String,\r\n      default: 'Product Name'\r\n    }\r\n  },\r\n  setup(props) {\r\n    const svgRef = ref(null);\r\n    const errorMessage = ref('');\r\n\r\n    const generateBarcode = async (sku) => {\r\n      try {\r\n        if (sku.length !== 13) {\r\n          throw new Error('SKU must be exactly 13 digits.');\r\n        }\r\n\r\n        // Wait until the SVG is rendered before applying JsBarcode\r\n        await nextTick();\r\n\r\n        if (svgRef.value) {\r\n          JsBarcode(svgRef.value, sku, {\r\n            format: 'EAN13',\r\n            lineColor: '#000',\r\n            width: 2,\r\n            height: 50,\r\n            displayValue: true\r\n          });\r\n        } else {\r\n          throw new Error('SVG element not found');\r\n        }\r\n\r\n        // Clear error message if barcode generation succeeds\r\n        errorMessage.value = '';\r\n      } catch (error) {\r\n        console.error(error.message);\r\n        errorMessage.value = error.message;\r\n      }\r\n    };\r\n\r\n    const downloadBarcode = async () => {\r\n      try {\r\n        const svg = svgRef.value;\r\n        if (!svg) throw new Error('SVG element not found for download');\r\n\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        const svgData = new XMLSerializer().serializeToString(svg);\r\n        const img = new Image();\r\n        const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\r\n        const url = URL.createObjectURL(svgBlob);\r\n\r\n        img.onload = () => {\r\n          canvas.width = img.width;\r\n          canvas.height = img.height + 20; // extra space for product name\r\n          ctx.fillStyle = 'white';\r\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n          ctx.drawImage(img, 0, 0);\r\n          ctx.font = '16px Arial';\r\n          ctx.fillStyle = 'black';\r\n          ctx.textAlign = 'center';\r\n          ctx.fillText(props.productName, canvas.width / 2, img.height + 20);\r\n\r\n          const pngUrl = canvas.toDataURL('image/png');\r\n          const link = document.createElement('a');\r\n          link.href = pngUrl;\r\n          link.download = `${props.sku}_barcode.png`;\r\n          document.body.appendChild(link);\r\n          link.click();\r\n          document.body.removeChild(link);\r\n          URL.revokeObjectURL(url);\r\n        };\r\n        img.src = url;\r\n\r\n        // Clear error message if download succeeds\r\n        errorMessage.value = '';\r\n      } catch (error) {\r\n        console.error(error.message);\r\n        errorMessage.value = error.message;\r\n      }\r\n    };\r\n\r\n    onMounted(() => generateBarcode(props.sku));\r\n    watch(() => props.sku, (newSku) => generateBarcode(newSku));\r\n\r\n    return {\r\n      svgRef,\r\n      errorMessage,\r\n      downloadBarcode\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div>\r\n\r\n    <svg ref=\"svgRef\"></svg>\r\n    <button @click=\"downloadBarcode\">Download Barcode as PNG</button>\r\n  </div>\r\n</template>\r\n"],"mappings":";;EAAAA,GAAA;EAwG6BC,KAAK,EAAC;;;EAE1BC,GAAG,EAAC;AAAQ;;uBAHnBC,mBAAA,CAKM,cAJOC,MAAA,CAAAC,YAAY,I,cAAvBF,mBAAA,CAAuE,OAAvEG,UAAuE,EAAAC,gBAAA,CAArBH,MAAA,CAAAC,YAAY,oBAxGlEG,mBAAA,iB,cA0GIL,mBAAA,CAAwB,OAAxBM,UAAwB,gCACxBC,mBAAA,CAAiE;IAAxDC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAET,MAAA,CAAAU,eAAA,IAAAV,MAAA,CAAAU,eAAA,IAAAD,IAAA,CAAe;KAAE,yBAAuB,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}