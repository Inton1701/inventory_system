{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport { ref, computed, onMounted, onBeforeUnmount } from 'vue';\nimport axios from 'axios';\nimport 'sweetalert2';\nexport default {\n  setup() {\n    // Reactive Variables\n    const apiURL = process.env.VUE_APP_URL;\n    const imgURL = process.env.VUE_APP_IMAGE_URL;\n    const selectedCategory = ref('all');\n    const barcode = ref('');\n    const barcodeInput = ref(null);\n    const cart = ref([]);\n    const categories = ref([]);\n    const subtotal = ref(0);\n    const VAT = ref(12); // Example tax rate\n    const discount = ref(0);\n    const barcodeError = ref({\n      message: null\n    });\n    const paymentError = ref({\n      message: null\n    });\n    const lastAddedProduct = ref(null);\n    const stockQuantity = ref(null); // Store the stock quantity of the last fetched product\n    const newQuantity = ref(1); // New quantity input for the modal\n    const quantityError = ref(null);\n    const change = ref(null);\n    const clientPayment = ref(null);\n    const products = ref([]);\n    const transactionId = ref('');\n    const transactionError = ref(null);\n    const returnItems = ref([]);\n    let isPaymentOpen = false;\n    let isQunatityOpen = false;\n    let isReturnOpen = false;\n    let isVoidOpen = false;\n    let isReturnQuantity = false;\n    // Computed Variables\n    const total = computed(() => subtotal.value + subtotal.value * VAT.value / 100 - discount.value);\n\n    // Methods\n    const getCategories = async () => {\n      try {\n        const response = await axios.get(`${apiURL}/get_category_list`);\n        categories.value = response.data.categories;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const getProductsByCategory = async categoryName => {\n      try {\n        const response = await axios.get(`${apiURL}/get_products_by_category/${categoryName}`);\n        products.value = response.data.products;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const selectCategory = categoryName => {\n      selectedCategory.value = categoryName; // Update selected category\n      getProductsByCategory(categoryName); // Fetch products for the selected category\n    };\n    const filteredCategories = computed(() => {\n      // Filter products based on the selected category\n      if (selectedCategory.value === 'all') {\n        return categories.value;\n      }\n      return categories.value.filter(category => category.name === selectedCategory.value);\n    });\n    const addProduct = async (product = null) => {\n      try {\n        change.value = null;\n        if (!product) {\n          if (!barcode.value.trim()) {\n            return;\n          }\n          const response = await axios.get(`${apiURL}/get_product_info/${barcode.value.trim()}`);\n          if (response.data.success) {\n            product = response.data.product; // Assign the fetched product\n            barcodeError.value.message = null;\n          } else {\n            barcodeError.value.message = response.data.message || \"Product not found.\";\n            return;\n          }\n        }\n\n        // Store the last added product and its stock quantity\n        lastAddedProduct.value = product;\n        stockQuantity.value = product.quantity;\n\n        // Check if the product is already in the cart\n        const existingItem = cart.value.find(item => item._id === product._id);\n        if (existingItem) {\n          // Increment quantity if product is already in the cart\n          const newTotalQuantity = existingItem.quantity + 1;\n          if (newTotalQuantity <= stockQuantity.value) {\n            existingItem.quantity = newTotalQuantity;\n          } else {\n            barcodeError.value.message = `Maximum stock reached for ${product.name}.`;\n          }\n        } else {\n          // Add product to cart if not already present\n          if (stockQuantity.value > 0) {\n            cart.value.push({\n              ...product,\n              quantity: 1\n            });\n          } else {\n            barcodeError.value.message = `No stock available for ${product.name}.`;\n          }\n        }\n        updateSubtotal(); // Update the subtotal after adding the product\n      } catch (error) {\n        console.error(\"Error adding product:\", error);\n        barcodeError.value.message = \"An error occurred while fetching the product.\";\n      } finally {\n        barcode.value = \"\"; // Clear the barcode input\n      }\n    };\n    const updateSubtotal = () => {\n      subtotal.value = cart.value.reduce((sum, item) => sum + item.quantity * item.price, 0);\n    };\n    const handleKeydown = event => {\n      switch (event.key) {\n        case 'F1':\n          event.preventDefault();\n          if (total.value > 0) {\n            openPaymentModal();\n          }\n          break;\n        case 'F2':\n          event.preventDefault();\n          openVoidModal(); // open return modal\n          break;\n        case 'F3':\n          event.preventDefault();\n          openReturnModal(); // open return modal\n          break;\n        case 'q':\n          event.preventDefault();\n          openUpdateQuantityModal(); // Open quantity modal\n          break;\n        case 'Escape':\n          // Refocus on the barcode input\n          if (barcodeInput.value) {\n            barcodeInput.value.focus();\n            transactionId.value = ''; // Clear transaction ID\n            returnItems.value = []; // Clear previously selected items\n            transactionError.value = null; // Clear any previous errors\n          }\n          break;\n        default:\n          break;\n      }\n    };\n    const openPaymentModal = () => {\n      const modalElement = document.getElementById('payment-modal');\n\n      // Check if modalElement exists to prevent errors\n      if (modalElement) {\n        const modal = new bootstrap.Modal(modalElement, {\n          backdrop: 'static' // You can also use true or false\n        });\n\n        // Show the modal\n        modal.show();\n\n        // Close any other modal states\n        isPaymentOpen = true;\n        isQunatityOpen = false;\n        isReturnOpen = false;\n        isVoidOpen = false;\n\n        // Focus the input field after the modal is shown\n        modalElement.addEventListener('shown.bs.modal', () => {\n          const inputField = modalElement.querySelector('input');\n          if (inputField) {\n            inputField.focus();\n          }\n        });\n      } else {\n        console.error('Modal element not found!');\n      }\n    };\n    const openReturnModal = () => {\n      transactionId.value = ''; // Clear transaction ID\n      returnItems.value = []; // Clear previously selected items\n      transactionError.value = null; // Clear any previous errors\n\n      const modalElement = document.getElementById('return-modal');\n      const modal = new bootstrap.Modal(modalElement);\n      if (modal) {\n        isPaymentOpen = false;\n        isQunatityOpen = false;\n        isReturnOpen = true;\n        isVoidOpen = false;\n        modal.show();\n      }\n      modalElement.addEventListener('shown.bs.modal', () => {\n        const transactionIdInput = modalElement.querySelector('#return-transaction');\n        if (transactionIdInput) {\n          transactionIdInput.focus(); // Focus transaction ID input\n        }\n      });\n    };\n    const openVoidModal = () => {\n      transactionId.value = ''; // Clear transaction ID\n\n      transactionError.value = null; // Clear any previous errors\n\n      const modalElement = document.getElementById('return-modal');\n      const modal = new bootstrap.Modal(modalElement);\n      if (modal) {\n        isPaymentOpen = false;\n        isQunatityOpen = false;\n        isReturnOpen = false;\n        isVoidOpen = true;\n        modal.show();\n      }\n      modalElement.addEventListener('shown.bs.modal', () => {\n        const transactionIdInput = modalElement.querySelector('#return-transaction');\n        if (transactionIdInput) {\n          transactionIdInput.focus(); // Focus transaction ID input\n        }\n      });\n    };\n    const handleModalKeydown = event => {\n      const modalElement = document.getElementById('update-quantity-modal');\n      if (modalElement) {\n        // Check for Enter key\n        if (event.key === 'Enter') {\n          event.preventDefault(); // Prevent default form submission\n          updateProductQuantity(); // Trigger the update function\n        }\n\n        // Check for Escape key\n        if (event.key === 'Escape') {\n          event.preventDefault(); // Prevent default behavior\n          const modal = bootstrap.Modal.getInstance(modalElement);\n          if (modal) {\n            modal.hide(); // Close the modal\n          }\n        }\n      }\n    };\n    const handlePaymentKeydown = event => {\n      if (event.key === 'Enter') {\n        event.preventDefault(); // Prevent default form submission\n        if (isPaymentOpen) processPayment();\n        if (isReturnOpen) processReturn();\n        if (isVoidOpen) processVoid();\n        isPaymentOpen = false;\n        isQunatityOpen = false;\n        isReturnOpen = false;\n        isVoidOpen = true;\n      }\n    };\n    const openUpdateQuantityModal = () => {\n      if (lastAddedProduct.value) {\n        // Open modal to update quantity\n        const modalElement = document.getElementById('update-quantity-modal');\n        const modal = new bootstrap.Modal(modalElement);\n        if (modal) {\n          modal.show();\n\n          // Focus on the input field when modal is shown\n          modalElement.addEventListener('shown.bs.modal', () => {\n            const inputField = modalElement.querySelector('input');\n            if (inputField) {\n              inputField.focus();\n            }\n          });\n        }\n      } else {\n        barcodeError.value.message = \"No product in cart yet.\";\n      }\n    };\n    const processPayment = async () => {\n      // Validate payment\n      if (clientPayment.value === null || clientPayment.value < total.value) {\n        paymentError.value.message = `Payment must be at least $${total.value}.`;\n        return;\n      }\n      try {\n        // Prepare transaction data\n        const transactionData = {\n          cart: cart.value.map(item => ({\n            _id: item._id,\n            // Product ID\n            sku: item.sku,\n            name: item.name,\n            price: item.price,\n            total: item.total,\n            quantity: item.quantity\n          })),\n          paymentMethod: \"Cash\",\n          // You can dynamically set this\n          discounts: discount.value,\n          netAmount: subtotal.value,\n          VAT: subtotal.value * VAT.value / 100,\n          totalAmount: total.value,\n          status: \"Completed\",\n          // Transaction status\n          employee: \"JohnDoe\" // Example employee, replace with actual\n        };\n\n        // Send transaction data to the backend\n        const response = await axios.post(`${apiURL}/commit_transaction`, transactionData);\n        if (response.data.success) {\n          // Backend transaction was successful\n          console.log(\"Transaction saved:\", response.data.transaction);\n\n          // Calculate change\n          change.value = (clientPayment.value - total.value).toFixed(2);\n          clientPayment.value = null;\n          paymentError.value.message = null;\n\n          // Notify the user of successful payment (optional)\n          Swal.fire({\n            title: 'Success!',\n            text: 'Transaction successful.',\n            icon: 'success',\n            timer: 1500,\n            // \n            showConfirmButton: false // Optional: Hide the confirm button\n          });\n\n          // Close the payment modal\n          const modalElement = document.getElementById(\"payment-modal\");\n          const modal = bootstrap.Modal.getInstance(modalElement);\n          if (modal) {\n            modal.hide();\n          }\n          cart.value = [];\n          subtotal.value = 0;\n          discount.value = 0;\n        } else {\n          // Backend returned an error\n          paymentError.value.message = response.data.message || \"Failed to process transaction.\";\n          console.error(\"Transaction failed:\", response.data.message);\n        }\n      } catch (error) {\n        // Handle network or server errors\n        console.error(\"Error processing payment:\", error);\n        paymentError.value.message = \"An error occurred while processing the payment. Please try again.\";\n      }\n    };\n    const updateProductQuantity = () => {\n      if (lastAddedProduct.value) {\n        if (newQuantity.value > stockQuantity.value) {\n          quantityError.value = `Stock quantity is only ${stockQuantity.value}. Please enter a valid quantity.`;\n          return;\n        }\n\n        // Update quantity in cart\n        const cartItem = cart.value.find(item => item._id === lastAddedProduct.value._id);\n        if (cartItem) {\n          cartItem.quantity = newQuantity.value;\n        }\n        updateSubtotal();\n\n        // Close the modal\n        const modalElement = document.getElementById('update-quantity-modal');\n        const modal = bootstrap.Modal.getInstance(modalElement);\n        if (modal) {\n          modal.hide();\n        }\n\n        // Reset modal input\n        newQuantity.value = 1;\n        quantityError.value = null;\n\n        // Focus back on the barcode input\n        if (barcodeInput.value) {\n          barcodeInput.value.focus();\n        }\n      }\n    };\n    const fetchTransactionItems = async () => {\n      try {\n        const response = await axios.get(`${apiURL}/get_transaction_items/${transactionId.value}`);\n        const {\n          success,\n          cart,\n          totalAmount\n        } = response.data;\n        if (success && cart && Array.isArray(cart)) {\n          // Process the cart items\n          console.log('Transaction cart items:', cart);\n\n          // Populate the returnItems array with the fetched items\n          returnItems.value = cart.map(item => ({\n            _id: item._id,\n            name: item.name,\n            price: item.price,\n            quantity: item.quantity,\n            selected: false,\n            // Add a 'selected' property to track if the item is selected for return\n            returnQuantity: 0 // Initialize return quantity to 0\n          }));\n\n          // Show the modal after fetching the return items\n          const modalElement = document.getElementById('select-return-items-modal');\n          const modal = new bootstrap.Modal(modalElement);\n          if (modal) {\n            modal.show();\n          }\n        } else {\n          console.error('Cart is empty or response structure is incorrect');\n        }\n      } catch (error) {\n        console.error('Error fetching transaction items:', error);\n      }\n    };\n    const processVoid = async () => {\n      try {\n        const response = await axios.post(`${apiURL}/void_transaction`);\n        if (response.data.status) {\n          Swal.fire({\n            title: 'Voided!',\n            text: 'Transaction successful.',\n            icon: 'success',\n            timer: 1500,\n            // \n            showConfirmButton: false // Optional: Hide the confirm button\n          });\n        } else {\n          Swal.fire({\n            title: 'Voided!',\n            text: 'Transaction successful.',\n            icon: 'success',\n            timer: 1500,\n            // \n            showConfirmButton: false\n          });\n        }\n      } catch (error) {\n        if (response.data.status) {\n          Swal.fire({\n            title: 'Error!',\n            text: `Error: ${error.message}`,\n            icon: 'success',\n            timer: 1500,\n            // \n            showConfirmButton: false // Optional: Hide the confirm button\n          });\n        }\n      }\n    };\n    const processReturn = async () => {\n      try {\n        const itemsToReturn = returnItems.value.filter(item => item.selected && item.returnQuantity > 0);\n        if (itemsToReturn.length === 0) {\n          transactionError.value = 'Please select at least one item to return.';\n          return;\n        }\n\n        // Await the axios call to get the response properly\n        const response = await axios.post(`${apiURL}/return_transaction/${transactionId.value}`, {\n          returnedItems: itemsToReturn,\n          employee: 'JhonDoe'\n        });\n        console.log(response.data); // This will now log the actual response data\n\n        if (response.data.success) {\n          // Update stock and cart\n          itemsToReturn.forEach(item => {\n            const cartItem = cart.value.find(cartItem => cartItem._id === item._id);\n            if (cartItem) {\n              cartItem.quantity -= item.returnQuantity;\n              if (cartItem.quantity <= 0) {\n                const index = cart.value.indexOf(cartItem);\n                cart.value.splice(index, 1); // Remove the item if quantity becomes 0\n              }\n            }\n          });\n\n          // Notify the user of successful payment (optional)\n          Swal.fire({\n            title: 'Returned!',\n            text: 'Transaction successful.',\n            icon: 'success',\n            timer: 1500,\n            // \n            showConfirmButton: false // Optional: Hide the confirm button\n          });\n\n          // Close the return modal\n          const modalElement = document.getElementById('select-return-items-modal');\n          const modal = bootstrap.Modal.getInstance(modalElement);\n          if (modal) modal.hide();\n\n          // Clear transaction ID input\n          transactionId.value = '';\n          returnItems.value = []; // Clear return items after successful return\n        } else {\n          Swal.fire({\n            title: 'Error',\n            text: response.data.message || 'Failed to process the return.',\n            icon: 'error'\n          });\n        }\n      } catch (error) {\n        console.error('Error processing return:', error);\n        Swal.fire({\n          title: 'Error',\n          text: 'An error occurred while processing the return. Please try again.',\n          icon: 'error'\n        });\n      }\n    };\n\n    // Lifecycle Hooks\n    onMounted(() => {\n      getCategories();\n      if (barcodeInput.value) {\n        barcodeInput.value.focus();\n      }\n      window.addEventListener('keydown', handleKeydown); // Listen to keydown events\n    });\n    onBeforeUnmount(() => {\n      window.removeEventListener('keydown', handleKeydown);\n    });\n\n    // Return Variables and Methods\n    return {\n      categories,\n      selectedCategory,\n      barcode,\n      barcodeInput,\n      cart,\n      subtotal,\n      VAT,\n      discount,\n      total,\n      barcodeError,\n      lastAddedProduct,\n      stockQuantity,\n      newQuantity,\n      quantityError,\n      addProduct,\n      updateProductQuantity,\n      handleModalKeydown,\n      handlePaymentKeydown,\n      change,\n      clientPayment,\n      paymentError,\n      selectCategory,\n      products,\n      imgURL,\n      transactionId,\n      transactionError,\n      returnItems,\n      fetchTransactionItems,\n      processReturn\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","onBeforeUnmount","axios","setup","apiURL","process","env","VUE_APP_URL","imgURL","VUE_APP_IMAGE_URL","selectedCategory","barcode","barcodeInput","cart","categories","subtotal","VAT","discount","barcodeError","message","paymentError","lastAddedProduct","stockQuantity","newQuantity","quantityError","change","clientPayment","products","transactionId","transactionError","returnItems","isPaymentOpen","isQunatityOpen","isReturnOpen","isVoidOpen","isReturnQuantity","total","value","getCategories","response","get","data","error","console","getProductsByCategory","categoryName","selectCategory","filteredCategories","filter","category","name","addProduct","product","trim","success","quantity","existingItem","find","item","_id","newTotalQuantity","push","updateSubtotal","reduce","sum","price","handleKeydown","event","key","preventDefault","openPaymentModal","openVoidModal","openReturnModal","openUpdateQuantityModal","focus","modalElement","document","getElementById","modal","bootstrap","Modal","backdrop","show","addEventListener","inputField","querySelector","transactionIdInput","handleModalKeydown","updateProductQuantity","getInstance","hide","handlePaymentKeydown","processPayment","processReturn","processVoid","transactionData","map","sku","paymentMethod","discounts","netAmount","totalAmount","status","employee","post","log","transaction","toFixed","Swal","fire","title","text","icon","timer","showConfirmButton","cartItem","fetchTransactionItems","Array","isArray","selected","returnQuantity","itemsToReturn","length","returnedItems","forEach","index","indexOf","splice","window","removeEventListener"],"sources":["C:\\Users\\Administrator\\OneDrive\\Desktop\\POSExpress\\frontend\\src\\components\\Apps\\POS.vue"],"sourcesContent":["<template>\r\n  <div class=\"main-wrapper\">\r\n    <div class=\"header\">\r\n      <!-- Header Content -->\r\n    </div>\r\n\r\n    <div class=\"page-wrapper pos-pg-wrapper ms-0\">\r\n      <div class=\"content pos-design p-0\">\r\n        <div class=\"row align-items-start pos-wrapper\">\r\n          <!-- Category Sidebar -->\r\n          <div class=\"col-md-3 col-lg-2 ps-0\">\r\n            <div class=\"category-list\">\r\n              <h5>Categories</h5>\r\n              <ul class=\"list-group text-center\">\r\n                <li v-for=\"category in categories\" :key=\"category.name\" class=\"list-group-item\"\r\n                  :class=\"{ 'active': selectedCategory === category.name }\" @click=\"selectCategory(category.name)\">\r\n                  <a href=\"javascript:void(0);\">{{ category.name }}</a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <!-- Product Display -->\r\n          <div class=\"col-md-12 col-lg-6\">\r\n            <div class=\"row bg-white px-4 pb-5 mx-3 mt-2\">\r\n              <h4>Enter Barcode:</h4>\r\n              <input v-model=\"barcode\" ref=\"barcodeInput\"\r\n                class=\"form-control bg-light border border-dark fs-1 mb-2 mt-3\" type=\"text\" @keyup.enter=\"addProduct()\"\r\n                placeholder=\"Scan Barcode\" />\r\n              <p v-if=\"barcodeError.message\" class=\"text-danger\">ERROR: {{ barcodeError.message }}</p>\r\n\r\n            </div>\r\n            <div class=\"pos-wrapper\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12 col-lg-12\">\r\n                  <div class=\"pos-products\">\r\n                    <div class=\"tabs_container\">\r\n                      <!-- Display products based on selected category -->\r\n                      <div v-if=\"products.length\" class=\"tab_content active\">\r\n                        <div class=\"row\">\r\n                          <div v-for=\"product in products\" :key=\"product.id\"\r\n                            class=\"col-sm-2 col-md-12 col-lg-5 col-xl-5 product-item\">\r\n                            <div class=\"product-info default-cover card\" @click=\"addProduct(product)\">\r\n                              <a href=\"javascript:void(0);\" class=\"img-bg\">\r\n                                <img v-if=\"product.image\" :src=\"`${imgURL}${product.image}`\" alt=\"Product\" />\r\n                                <img v-else :src=\"`/img/icons/no-image-icon.png`\" />\r\n                                <span><i data-feather=\"check\"></i></span>\r\n                              </a>\r\n                              <h6 class=\"product-name\">\r\n                                <a href=\"javascript:void(0);\">{{ product.name }}</a>\r\n                              </h6>\r\n                              <div class=\"d-flex align-items-center justify-content-between price\">\r\n                                <span>Stock: {{ product.quantity }}</span>\r\n                                <p>${{ product.price }}</p>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n\r\n                        </div>\r\n                      </div>\r\n\r\n                      <!-- If no products, show a message -->\r\n                      <div v-else class=\"no-products-message\">\r\n                        <p>No products available in this category.</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Order List and Summary -->\r\n          <div class=\"col-md-12 col-lg-4 ps-0\">\r\n            <aside class=\"product-order-list\">\r\n              <div class=\"head d-flex align-items-center justify-content-between w-100\">\r\n                <h5>Order List</h5>\r\n                <a class=\"confirm-text\" href=\"javascript:void(0);\"><i data-feather=\"trash-2\"\r\n                    class=\"feather-16 text-danger\"></i></a>\r\n              </div>\r\n\r\n              <div class=\"product-added block-section\">\r\n                <div class=\"product-wrap\">\r\n                  <table class=\"table table-responsive\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Product</th>\r\n                        <th>Price</th>\r\n                        <th>Quantity</th>\r\n                        <th>Total</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr v-for=\"item in cart\" :key=\"item.id\">\r\n                        <td>{{ item.name }}</td>\r\n                        <td>{{ item.price }}</td>\r\n                        <td>{{ item.quantity }}</td>\r\n                        <td>{{ item.quantity * item.price }}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"block-section\">\r\n                <h6>Order Summary</h6>\r\n                <table class=\"table table-responsive table-borderless\">\r\n                  <tr>\r\n                    <td>Sub Total</td>\r\n                    <td class=\"text-end\">${{ subtotal }}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>VAT</td>\r\n                    <td class=\"text-end\">{{ VAT }}%</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td class=\"danger\">Discount</td>\r\n                    <td class=\"danger text-end\">${{ discount }}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Total</td>\r\n                    <td class=\"text-end\">${{ total.toFixed(2) }}</td>\r\n                  </tr>\r\n                  <tr v-if=\"change\">\r\n                    <td>Change</td>\r\n                    <td class=\"text-end\">${{ change }}</td>\r\n                  </tr>\r\n                </table>\r\n              </div>\r\n            </aside>\r\n            <div class=\"btn-row d-sm-flex align-items-center justify-content-between\">\r\n              <a href=\"javascript:void(0);\" class=\"btn btn-success btn-icon flex-fill position-relative p-4 fs-6\"\r\n                data-bs-toggle=\"modal\" data-bs-target=\"#payment-completed\">\r\n                <span class=\"keyboard-key\">F1</span>\r\n                <span class=\"me-1 d-flex align-items-center\">\r\n                  <i data-feather=\"credit-card\" class=\"feather-16\"></i>\r\n                </span>Pay\r\n              </a>\r\n              <a href=\"javascript:void(0);\" class=\"btn btn-danger btn-icon flex-fill position-relative p-4 fs-6\">\r\n                <span class=\"keyboard-key\">F2</span>\r\n                <span class=\"me-1 d-flex align-items-center\">\r\n                  <i data-feather=\"trash-2\" class=\"feather-16\"></i>\r\n                </span>Void\r\n              </a>\r\n\r\n              <a href=\"javascript:void(0);\" class=\"btn btn-info btn-icon flex-fill position-relative p-4 fs-6\"\r\n                data-bs-toggle=\"modal\" data-bs-target=\"#hold-order\" @click=\"openReturnModal\">\r\n                <span class=\"keyboard-key\">F3</span>\r\n                <span class=\"me-1 d-flex align-items-center\">\r\n                  <i data-feather=\"corner-up-right\" class=\"feather-16\"></i>\r\n                </span>Return\r\n              </a>\r\n\r\n            </div>\r\n\r\n          </div>\r\n          <!-- Action Buttons -->\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!-- Modal for Updating Quantity -->\r\n  <div class=\"modal fade\" id=\"update-quantity-modal\" tabindex=\"-1\" aria-labelledby=\"update-quantity-modalLabel\"\r\n    aria-hidden=\"true\">\r\n    <div class=\"modal-dialog\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\" id=\"update-quantity-modalLabel\">Update Quantity</h5>\r\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div class=\"form-group\">\r\n            <label for=\"new-quantity\">Quantity</label>\r\n            <input type=\"number\" id=\"new-quantity\" class=\"form-control\" v-model=\"newQuantity\" min=\"1\"\r\n              @keydown=\"handleModalKeydown\" />\r\n          </div>\r\n          <p v-if=\"quantityError\" class=\"text-danger\">{{ quantityError }}</p>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n          <button type=\"button\" class=\"btn btn-primary\" @click=\"updateProductQuantity\">Update</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Modal for Payment -->\r\n  <div class=\"modal fade\" id=\"payment-modal\" tabindex=\"-1\" aria-labelledby=\"payment-modalLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\" id=\"payment-modalLabel\">Payment</h5>\r\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div class=\"form-group\">\r\n            <label for=\"payment\">Amount to Pay: ${{ total }}</label>\r\n            <input type=\"number\" id=\"payment\" class=\"form-control\" v-model=\"clientPayment\" min=\"1\"\r\n              @keydown=\"handlePaymentKeydown\" placeholder=\"Enter payment amount\" />\r\n          </div>\r\n          <p v-if=\"paymentError.message\" class=\"text-danger\">{{ paymentError.message }}</p>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n          <button type=\"button\" class=\"btn btn-primary\" @click=\"processPayment\">Process Payment</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"modal fade\" id=\"return-modal\" tabindex=\"-1\" aria-labelledby=\"return-modalLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\" id=\"return-modalLabel\">Enter Transaction ID for Return</h5>\r\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <input v-model=\"transactionId\" class=\"form-control\" type=\"text\" id=\"return-transaction\"\r\n            placeholder=\"Transaction ID\" />\r\n          <p v-if=\"transactionError\" class=\"text-danger\">{{ transactionError }}</p>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n          <button type=\"button\" class=\"btn btn-primary\" @click=\"fetchTransactionItems\">Fetch Items</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Modal for Return Item Selection -->\r\n  <div class=\"modal fade\" id=\"select-return-items-modal\" tabindex=\"-1\" aria-labelledby=\"select-return-items-modalLabel\"\r\n    aria-hidden=\"true\">\r\n    <div class=\"modal-dialog\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\" id=\"select-return-items-modalLabel\">Select Items for Return</h5>\r\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <table class=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Select</th>\r\n                <th>Product</th>\r\n                <th>Quantity</th>\r\n                <th>Return Quantity</th>\r\n                <th>Price</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"item in returnItems\" :key=\"item._id\">\r\n                <td>\r\n                  <input type=\"checkbox\" v-model=\"item.selected\" />\r\n                </td>\r\n                <td>{{ item.name }}</td>\r\n                <td>{{ item.quantity }}</td>\r\n                <td>\r\n                  <input type=\"number\" v-model=\"item.returnQuantity\" :max=\"item.quantity\" min=\"1\" />\r\n                </td>\r\n                <td>${{ item.price }}</td>\r\n              </tr>\r\n\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n          <button type=\"button\" class=\"btn btn-primary\" @click=\"processReturn\">Process Return</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { ref, computed, onMounted, onBeforeUnmount } from 'vue';\r\nimport axios from 'axios';\r\nimport 'sweetalert2'\r\n\r\nexport default {\r\n  setup() {\r\n    // Reactive Variables\r\n    const apiURL = process.env.VUE_APP_URL;\r\n    const imgURL = process.env.VUE_APP_IMAGE_URL;\r\n    const selectedCategory = ref('all');\r\n    const barcode = ref('');\r\n    const barcodeInput = ref(null);\r\n    const cart = ref([]);\r\n    const categories = ref([]);\r\n    const subtotal = ref(0);\r\n    const VAT = ref(12); // Example tax rate\r\n    const discount = ref(0);\r\n    const barcodeError = ref({ message: null });\r\n    const paymentError = ref({ message: null });\r\n    const lastAddedProduct = ref(null);\r\n    const stockQuantity = ref(null); // Store the stock quantity of the last fetched product\r\n    const newQuantity = ref(1); // New quantity input for the modal\r\n    const quantityError = ref(null);\r\n    const change = ref(null);\r\n    const clientPayment = ref(null);\r\n    const products = ref([]);\r\n\r\n    const transactionId = ref('');\r\n    const transactionError = ref(null);\r\n    const returnItems = ref([]);\r\n\r\n    let isPaymentOpen = false;\r\n    let isQunatityOpen = false;\r\n    let isReturnOpen = false;\r\n    let isVoidOpen = false;\r\n    let isReturnQuantity  = false;\r\n    // Computed Variables\r\n    const total = computed(() =>\r\n      subtotal.value + (subtotal.value * VAT.value) / 100 - discount.value\r\n    );\r\n\r\n    // Methods\r\n    const getCategories = async () => {\r\n      try {\r\n        const response = await axios.get(`${apiURL}/get_category_list`);\r\n        categories.value = response.data.categories;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    const getProductsByCategory = async (categoryName) => {\r\n      try {\r\n        const response = await axios.get(`${apiURL}/get_products_by_category/${categoryName}`);\r\n        products.value = response.data.products;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    const selectCategory = (categoryName) => {\r\n      selectedCategory.value = categoryName; // Update selected category\r\n      getProductsByCategory(categoryName); // Fetch products for the selected category\r\n    };\r\n\r\n\r\n    const filteredCategories = computed(() => {\r\n      // Filter products based on the selected category\r\n      if (selectedCategory.value === 'all') {\r\n        return categories.value;\r\n      }\r\n      return categories.value.filter(category => category.name === selectedCategory.value);\r\n    });\r\n\r\n\r\n    const addProduct = async (product = null) => {\r\n      try {\r\n        change.value = null;\r\n\r\n\r\n        if (!product) {\r\n          if (!barcode.value.trim()) {\r\n            return;\r\n          }\r\n\r\n          const response = await axios.get(`${apiURL}/get_product_info/${barcode.value.trim()}`);\r\n          if (response.data.success) {\r\n            product = response.data.product; // Assign the fetched product\r\n            barcodeError.value.message = null;\r\n          } else {\r\n            barcodeError.value.message = response.data.message || \"Product not found.\";\r\n            return;\r\n          }\r\n        }\r\n\r\n        // Store the last added product and its stock quantity\r\n        lastAddedProduct.value = product;\r\n        stockQuantity.value = product.quantity;\r\n\r\n        // Check if the product is already in the cart\r\n        const existingItem = cart.value.find((item) => item._id === product._id);\r\n\r\n        if (existingItem) {\r\n          // Increment quantity if product is already in the cart\r\n          const newTotalQuantity = existingItem.quantity + 1;\r\n          if (newTotalQuantity <= stockQuantity.value) {\r\n            existingItem.quantity = newTotalQuantity;\r\n          } else {\r\n            barcodeError.value.message = `Maximum stock reached for ${product.name}.`;\r\n          }\r\n        } else {\r\n          // Add product to cart if not already present\r\n          if (stockQuantity.value > 0) {\r\n            cart.value.push({ ...product, quantity: 1 });\r\n          } else {\r\n            barcodeError.value.message = `No stock available for ${product.name}.`;\r\n          }\r\n        }\r\n\r\n        updateSubtotal(); // Update the subtotal after adding the product\r\n      } catch (error) {\r\n        console.error(\"Error adding product:\", error);\r\n        barcodeError.value.message = \"An error occurred while fetching the product.\";\r\n      } finally {\r\n        barcode.value = \"\"; // Clear the barcode input\r\n      }\r\n    };\r\n\r\n\r\n    const updateSubtotal = () => {\r\n      subtotal.value = cart.value.reduce((sum, item) => sum + item.quantity * item.price, 0);\r\n    };\r\n\r\n    const handleKeydown = (event) => {\r\n      switch (event.key) {\r\n        case 'F1':\r\n          event.preventDefault();\r\n          if(total.value > 0) {\r\n            openPaymentModal(); \r\n          }\r\n          break;\r\n          case 'F2':\r\n          event.preventDefault();\r\n          openVoidModal(); // open return modal\r\n          break;\r\n        case 'F3':\r\n          event.preventDefault();\r\n          openReturnModal(); // open return modal\r\n          break;\r\n        case 'q':\r\n          event.preventDefault();\r\n          openUpdateQuantityModal(); // Open quantity modal\r\n          break;\r\n        case 'Escape':\r\n          // Refocus on the barcode input\r\n          if (barcodeInput.value) {\r\n            barcodeInput.value.focus();\r\n            transactionId.value = ''; // Clear transaction ID\r\n            returnItems.value = []; // Clear previously selected items\r\n            transactionError.value = null; // Clear any previous errors\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n    const openPaymentModal = () => {\r\n  const modalElement = document.getElementById('payment-modal');\r\n  \r\n  // Check if modalElement exists to prevent errors\r\n  if (modalElement) {\r\n    const modal = new bootstrap.Modal(modalElement, {\r\n      backdrop: 'static' // You can also use true or false\r\n    });\r\n\r\n    // Show the modal\r\n    modal.show();\r\n\r\n    // Close any other modal states\r\n    isPaymentOpen = true;\r\n    isQunatityOpen = false;\r\n    isReturnOpen = false;\r\n    isVoidOpen = false;\r\n\r\n    // Focus the input field after the modal is shown\r\n    modalElement.addEventListener('shown.bs.modal', () => {\r\n      const inputField = modalElement.querySelector('input');\r\n      if (inputField) {\r\n        inputField.focus();\r\n      }\r\n    });\r\n  } else {\r\n    console.error('Modal element not found!');\r\n  }\r\n};\r\n\r\n\r\n    const openReturnModal = () => {\r\n      transactionId.value = ''; // Clear transaction ID\r\n      returnItems.value = []; // Clear previously selected items\r\n      transactionError.value = null; // Clear any previous errors\r\n\r\n      const modalElement = document.getElementById('return-modal');\r\n      const modal = new bootstrap.Modal(modalElement);\r\n      if (modal) {\r\n        isPaymentOpen = false;\r\n        isQunatityOpen = false;\r\n        isReturnOpen = true;\r\n        isVoidOpen = false;\r\n        modal.show();\r\n      }\r\n\r\n      modalElement.addEventListener('shown.bs.modal', () => {\r\n        const transactionIdInput = modalElement.querySelector('#return-transaction');\r\n        if (transactionIdInput) {\r\n          transactionIdInput.focus(); // Focus transaction ID input\r\n        }\r\n      });\r\n    };\r\n\r\n    const openVoidModal = () => {\r\n      transactionId.value = ''; // Clear transaction ID\r\n  \r\n      transactionError.value = null; // Clear any previous errors\r\n\r\n      const modalElement = document.getElementById('return-modal');\r\n      const modal = new bootstrap.Modal(modalElement);\r\n      if (modal) {\r\n        isPaymentOpen = false;\r\n        isQunatityOpen = false;\r\n        isReturnOpen = false;\r\n        isVoidOpen = true;\r\n        modal.show();\r\n      }\r\n\r\n      modalElement.addEventListener('shown.bs.modal', () => {\r\n        const transactionIdInput = modalElement.querySelector('#return-transaction');\r\n        if (transactionIdInput) {\r\n          transactionIdInput.focus(); // Focus transaction ID input\r\n        }\r\n      });\r\n    };\r\n\r\n\r\n\r\n\r\n    const handleModalKeydown = (event) => {\r\n      const modalElement = document.getElementById('update-quantity-modal');\r\n\r\n      if (modalElement) {\r\n        // Check for Enter key\r\n        if (event.key === 'Enter') {\r\n          event.preventDefault(); // Prevent default form submission\r\n          updateProductQuantity(); // Trigger the update function\r\n        }\r\n\r\n        // Check for Escape key\r\n        if (event.key === 'Escape') {\r\n          event.preventDefault(); // Prevent default behavior\r\n          const modal = bootstrap.Modal.getInstance(modalElement);\r\n          if (modal) {\r\n            modal.hide(); // Close the modal\r\n          }\r\n\r\n        }\r\n      }\r\n    };\r\n\r\n    const handlePaymentKeydown = (event) => {\r\n      if (event.key === 'Enter') {\r\n        event.preventDefault(); // Prevent default form submission\r\n        if(isPaymentOpen) processPayment();\r\n        if(isReturnOpen) processReturn();\r\n        if(isVoidOpen) processVoid();\r\n        isPaymentOpen = false;\r\n        isQunatityOpen = false;\r\n        isReturnOpen = false;\r\n        isVoidOpen = true;\r\n\r\n      }\r\n    };\r\n\r\n    const openUpdateQuantityModal = () => {\r\n      if (lastAddedProduct.value) {\r\n        // Open modal to update quantity\r\n        const modalElement = document.getElementById('update-quantity-modal');\r\n        const modal = new bootstrap.Modal(modalElement);\r\n\r\n        if (modal) {\r\n          modal.show();\r\n\r\n          // Focus on the input field when modal is shown\r\n          modalElement.addEventListener('shown.bs.modal', () => {\r\n            const inputField = modalElement.querySelector('input');\r\n            if (inputField) {\r\n              inputField.focus();\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        barcodeError.value.message = \"No product in cart yet.\";\r\n      }\r\n    };\r\n    const processPayment = async () => {\r\n      // Validate payment\r\n      if (clientPayment.value === null || clientPayment.value < total.value) {\r\n        paymentError.value.message = `Payment must be at least $${total.value}.`;\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // Prepare transaction data\r\n        const transactionData = {\r\n          cart: cart.value.map((item) => ({\r\n            _id: item._id, // Product ID\r\n            sku: item.sku,\r\n            name: item.name,\r\n            price: item.price,\r\n            total: item.total,\r\n            quantity: item.quantity,\r\n          })),\r\n          paymentMethod: \"Cash\", // You can dynamically set this\r\n          discounts: discount.value,\r\n          netAmount: subtotal.value,\r\n          VAT: (subtotal.value * VAT.value) / 100,\r\n          totalAmount: total.value,\r\n          status: \"Completed\", // Transaction status\r\n          employee: \"JohnDoe\", // Example employee, replace with actual\r\n        };\r\n\r\n        // Send transaction data to the backend\r\n        const response = await axios.post(`${apiURL}/commit_transaction`, transactionData);\r\n\r\n        if (response.data.success) {\r\n          // Backend transaction was successful\r\n          console.log(\"Transaction saved:\", response.data.transaction);\r\n\r\n          // Calculate change\r\n          change.value = (clientPayment.value - total.value).toFixed(2);\r\n\r\n\r\n          clientPayment.value = null;\r\n          paymentError.value.message = null;\r\n\r\n          // Notify the user of successful payment (optional)\r\n          Swal.fire({\r\n            title: 'Success!',\r\n            text: 'Transaction successful.',\r\n            icon: 'success',\r\n            timer: 1500, // \r\n            showConfirmButton: false // Optional: Hide the confirm button\r\n          });\r\n\r\n          // Close the payment modal\r\n          const modalElement = document.getElementById(\"payment-modal\");\r\n          const modal = bootstrap.Modal.getInstance(modalElement);\r\n          if (modal) {\r\n            modal.hide();\r\n          }\r\n\r\n          cart.value = [];\r\n          subtotal.value = 0;\r\n          discount.value = 0;\r\n\r\n        } else {\r\n          // Backend returned an error\r\n          paymentError.value.message = response.data.message || \"Failed to process transaction.\";\r\n          console.error(\"Transaction failed:\", response.data.message);\r\n        }\r\n      } catch (error) {\r\n        // Handle network or server errors\r\n        console.error(\"Error processing payment:\", error);\r\n        paymentError.value.message = \"An error occurred while processing the payment. Please try again.\";\r\n      }\r\n    };\r\n\r\n\r\n\r\n\r\n    const updateProductQuantity = () => {\r\n      if (lastAddedProduct.value) {\r\n        if (newQuantity.value > stockQuantity.value) {\r\n          quantityError.value = `Stock quantity is only ${stockQuantity.value}. Please enter a valid quantity.`;\r\n          return;\r\n        }\r\n\r\n        // Update quantity in cart\r\n        const cartItem = cart.value.find((item) => item._id === lastAddedProduct.value._id);\r\n        if (cartItem) {\r\n          cartItem.quantity = newQuantity.value;\r\n        }\r\n\r\n        updateSubtotal();\r\n\r\n        // Close the modal\r\n        const modalElement = document.getElementById('update-quantity-modal');\r\n        const modal = bootstrap.Modal.getInstance(modalElement);\r\n        if (modal) {\r\n          modal.hide();\r\n        }\r\n\r\n        // Reset modal input\r\n        newQuantity.value = 1;\r\n        quantityError.value = null;\r\n\r\n        // Focus back on the barcode input\r\n        if (barcodeInput.value) {\r\n          barcodeInput.value.focus();\r\n        }\r\n      }\r\n    };\r\n    const fetchTransactionItems = async () => {\r\n      try {\r\n        const response = await axios.get(`${apiURL}/get_transaction_items/${transactionId.value}`);\r\n        const { success, cart, totalAmount } = response.data;\r\n\r\n        if (success && cart && Array.isArray(cart)) {\r\n          // Process the cart items\r\n          console.log('Transaction cart items:', cart);\r\n\r\n          // Populate the returnItems array with the fetched items\r\n          returnItems.value = cart.map(item => ({\r\n            _id: item._id,\r\n            name: item.name,\r\n            price: item.price,\r\n            quantity: item.quantity,\r\n            selected: false, // Add a 'selected' property to track if the item is selected for return\r\n            returnQuantity: 0, // Initialize return quantity to 0\r\n          }));\r\n\r\n          // Show the modal after fetching the return items\r\n          const modalElement = document.getElementById('select-return-items-modal');\r\n          const modal = new bootstrap.Modal(modalElement);\r\n          if (modal) {\r\n            modal.show();\r\n          }\r\n\r\n        } else {\r\n          console.error('Cart is empty or response structure is incorrect');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching transaction items:', error);\r\n      }\r\n    };\r\n\r\n    const processVoid = async () => {\r\n      try {\r\n        const response = await axios.post(`${apiURL}/void_transaction`);\r\n\r\n        if (response.data.status) {\r\n          Swal.fire({\r\n            title: 'Voided!',\r\n            text: 'Transaction successful.',\r\n            icon: 'success',\r\n            timer: 1500, // \r\n            showConfirmButton: false // Optional: Hide the confirm button\r\n          });\r\n        } else {\r\n          Swal.fire({\r\n            title: 'Voided!',\r\n            text: 'Transaction successful.',\r\n            icon: 'success',\r\n            timer: 1500, // \r\n            showConfirmButton: false\r\n          });\r\n        }\r\n\r\n      } catch (error) {\r\n        if (response.data.status) {\r\n          Swal.fire({\r\n            title: 'Error!',\r\n            text: `Error: ${error.message}`,\r\n            icon: 'success',\r\n            timer: 1500, // \r\n            showConfirmButton: false // Optional: Hide the confirm button\r\n          });\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    const processReturn = async () => {\r\n      try {\r\n        const itemsToReturn = returnItems.value.filter(item => item.selected && item.returnQuantity > 0);\r\n\r\n        if (itemsToReturn.length === 0) {\r\n          transactionError.value = 'Please select at least one item to return.';\r\n          return;\r\n        }\r\n\r\n        // Await the axios call to get the response properly\r\n        const response = await axios.post(`${apiURL}/return_transaction/${transactionId.value}`, {\r\n          returnedItems: itemsToReturn,\r\n          employee: 'JhonDoe'\r\n        });\r\n\r\n        console.log(response.data); // This will now log the actual response data\r\n\r\n        if (response.data.success) {\r\n          // Update stock and cart\r\n          itemsToReturn.forEach(item => {\r\n            const cartItem = cart.value.find(cartItem => cartItem._id === item._id);\r\n            if (cartItem) {\r\n              cartItem.quantity -= item.returnQuantity;\r\n              if (cartItem.quantity <= 0) {\r\n                const index = cart.value.indexOf(cartItem);\r\n                cart.value.splice(index, 1); // Remove the item if quantity becomes 0\r\n              }\r\n            }\r\n          });\r\n\r\n          // Notify the user of successful payment (optional)\r\n          Swal.fire({\r\n            title: 'Returned!',\r\n            text: 'Transaction successful.',\r\n            icon: 'success',\r\n            timer: 1500, // \r\n            showConfirmButton: false // Optional: Hide the confirm button\r\n          });\r\n\r\n          // Close the return modal\r\n          const modalElement = document.getElementById('select-return-items-modal');\r\n          const modal = bootstrap.Modal.getInstance(modalElement);\r\n          if (modal) modal.hide();\r\n\r\n          // Clear transaction ID input\r\n          transactionId.value = '';\r\n          returnItems.value = []; // Clear return items after successful return\r\n        } else {\r\n          Swal.fire({\r\n            title: 'Error',\r\n            text: response.data.message || 'Failed to process the return.',\r\n            icon: 'error'\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error processing return:', error);\r\n        Swal.fire({\r\n          title: 'Error',\r\n          text: 'An error occurred while processing the return. Please try again.',\r\n          icon: 'error'\r\n        });\r\n      }\r\n    };\r\n\r\n    // Lifecycle Hooks\r\n    onMounted(() => {\r\n      getCategories();\r\n      if (barcodeInput.value) {\r\n        barcodeInput.value.focus();\r\n      }\r\n\r\n      window.addEventListener('keydown', handleKeydown); // Listen to keydown events\r\n    });\r\n\r\n    onBeforeUnmount(() => {\r\n      window.removeEventListener('keydown', handleKeydown);\r\n    });\r\n\r\n    // Return Variables and Methods\r\n    return {\r\n      categories,\r\n      selectedCategory,\r\n      barcode,\r\n      barcodeInput,\r\n      cart,\r\n      subtotal,\r\n      VAT,\r\n      discount,\r\n      total,\r\n      barcodeError,\r\n      lastAddedProduct,\r\n      stockQuantity,\r\n      newQuantity,\r\n      quantityError,\r\n      addProduct,\r\n      updateProductQuantity,\r\n      handleModalKeydown,\r\n      handlePaymentKeydown,\r\n      change,\r\n      clientPayment,\r\n      paymentError,\r\n      selectCategory,\r\n      products,\r\n      imgURL,\r\n      transactionId,\r\n      transactionError,\r\n      returnItems,\r\n      fetchTransactionItems,\r\n      processReturn,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n/* Container for the product display */\r\n.tabs_container {\r\n  min-height: 620px;\r\n  max-height: 620px;\r\n  overflow-y: auto;\r\n  background: #fff;\r\n  padding: 20px;\r\n\r\n}\r\n\r\n/* Flex container for product display */\r\n.tab_content {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n  /* Space between items */\r\n  justify-content: space-between;\r\n}\r\n\r\n/* Ensure product-info fits within columns properly */\r\n.product-info {\r\n  position: relative;\r\n  padding: 15px;\r\n  background: #f9f9f9;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  transition: transform 0.2s ease-in-out;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  /* Optional shadow */\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  /* Flex to ensure each card takes equal width */\r\n  flex: 1 1 calc(33.33% - 1rem);\r\n  /* Default to 3 items per row */\r\n  height: 100%;\r\n\r\n}\r\n\r\n.product-info img {\r\n  width: 100%;\r\n  height: 150px;\r\n  /* Fixed height for images */\r\n  object-fit: cover;\r\n  /* Ensure images cover the area proportionally */\r\n}\r\n\r\n.product-info:hover {\r\n  transform: scale(1.05);\r\n  /* Slight zoom effect on hover */\r\n}\r\n\r\n/* Mobile and tablet adjustments for card layout */\r\n@media (max-width: 1200px) {\r\n  .product-info {\r\n    flex: 1 1 calc(25% - 1rem);\r\n    /* 4 items per row for large screens */\r\n    height: 300px;\r\n    /* Set height for large screens */\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .product-info {\r\n    flex: 1 1 calc(33.33% - 1rem);\r\n    /* 3 items per row for medium screens */\r\n    height: 250px;\r\n    /* Adjust height for medium screens */\r\n  }\r\n}\r\n\r\n@media (max-width: 576px) {\r\n  .product-info {\r\n    flex: 1 1 calc(50% - 1rem);\r\n    /* 2 items per row for small screens */\r\n    height: 200px;\r\n    /* Adjust height for small screens */\r\n  }\r\n}\r\n\r\n/* Category List Styling */\r\n.category-list {\r\n  padding: 15px;\r\n  background-color: #f9f9f9;\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n.category-list ul {\r\n  list-style-type: none;\r\n  padding-left: 0;\r\n}\r\n\r\n.category-list li {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.category-list a {\r\n  text-decoration: none;\r\n  color: #333;\r\n  font-size: 16px;\r\n  padding: 8px 10px;\r\n  border-radius: 4px;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.category-list a:active {\r\n  color: #fff;\r\n}\r\n\r\n.category-list a:hover {\r\n  color: #fff;\r\n\r\n}\r\n\r\n.list-group-item.active {\r\n  background-color: #22A95E;\r\n  /* Green background for active list item */\r\n  border-color: #22A95E;\r\n  /* Optional: Match border with the active color */\r\n}\r\n\r\n.list-group-item.active a {\r\n  color: #fff;\r\n  /* Make the text white inside the active list item */\r\n}\r\n\r\n/* Keyboard Key Styling for the UI */\r\n.keyboard-key {\r\n  position: absolute;\r\n  top: 5px;\r\n  left: 5px;\r\n  font-size: 12px;\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n  color: white;\r\n  padding: 5px 8px;\r\n  border-radius: 4px;\r\n  font-family: 'Courier New', monospace;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.product-wrap {\r\n  max-height: 100%;\r\n\r\n  overflow: hidden;\r\n\r\n}\r\n\r\n.table {\r\n  width: 100%;\r\n  table-layout: auto;\r\n  word-wrap: break-word;\r\n\r\n}\r\n\r\n.table th,\r\n.table td {\r\n  white-space: normal;\r\n\r\n  word-break: break-word;\r\n\r\n  text-align: left;\r\n\r\n}\r\n\r\n.product-name-cell {\r\n  max-width: 200px;\r\n  /* Adjust as needed for column width */\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  /* Optional: adds \"...\" for long text */\r\n  white-space: normal;\r\n}\r\n\r\n.quantity-input {\r\n  width: 50px;\r\n  /* Ensures quantity input field doesn't take too much space */\r\n  text-align: center;\r\n}\r\n\r\n.no-products-message {\r\n  display: flex;\r\n  justify-content: center;\r\n  /* Center horizontally */\r\n  align-items: center;\r\n  /* Center vertically */\r\n  height: 200px;\r\n  /* Adjust the height as needed */\r\n  text-align: center;\r\n  /* Center the text */\r\n  font-size: 18px;\r\n  /* Optional: Adjust the font size */\r\n  color: #777;\r\n  /* Optional: Set a color for the text */\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}