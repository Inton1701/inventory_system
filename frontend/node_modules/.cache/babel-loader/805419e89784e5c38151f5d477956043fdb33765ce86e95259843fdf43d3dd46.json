{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"page-wrapper\"\n};\nconst _hoisted_2 = {\n  class: \"content\"\n};\nconst _hoisted_3 = {\n  class: \"row\"\n};\nconst _hoisted_4 = {\n  class: \"card-body\"\n};\nconst _hoisted_5 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Navbar = _resolveComponent(\"Navbar\");\n  const _component_apexchart = _resolveComponent(\"apexchart\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_Navbar), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" Ensure data is available before rendering the chart \"), _ctx.chartOptions && _ctx.chartOptions.series.length > 0 ? (_openBlock(), _createBlock(_component_apexchart, {\n    key: 0,\n    type: \"line\",\n    options: _ctx.chartOptions,\n    series: _ctx.chartOptions.series,\n    height: \"400\"\n  }, null, 8 /* PROPS */, [\"options\", \"series\"])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_5, \"Loading chart data...\"))])])])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_Fragment","_createVNode","_component_Navbar","_createElementVNode","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_createCommentVNode","_ctx","chartOptions","series","length","_createBlock","_component_apexchart","type","options","height","_hoisted_5"],"sources":["C:\\Users\\Administrator\\OneDrive\\Desktop\\POSExpress\\frontend\\src\\components\\Admin\\Main\\Dashboard.vue"],"sourcesContent":["<template>\r\n  <Navbar />\r\n  <div class=\"page-wrapper\">\r\n    <div class=\"content\">\r\n      <div class=\"row\">\r\n        <div class=\"card-body\">\r\n          <!-- Ensure data is available before rendering the chart -->\r\n          <apexchart\r\n            v-if=\"chartOptions && chartOptions.series.length > 0\"\r\n            type=\"line\"\r\n            :options=\"chartOptions\"\r\n            :series=\"chartOptions.series\"\r\n            height=\"400\"\r\n          />\r\n          <p v-else>Loading chart data...</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed, defineComponent } from \"vue\";\r\nimport ApexCharts from \"vue3-apexcharts\"; // Import the vue3-apexcharts component\r\nimport axios from \"axios\";\r\nimport Navbar from \"/src/components/Admin/Navbar.vue\";\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    Navbar,\r\n    apexchart: ApexCharts, // Register ApexCharts component\r\n  },\r\n  setup() {\r\n    const salesData = ref([]);\r\n\r\n    // Chart options computed based on salesData\r\n    const chartOptions = computed(() => {\r\n      if (salesData.value.length === 0) {\r\n        return {}; // Return empty object to prevent rendering before data is fetched\r\n      }\r\n\r\n      const labels = salesData.value.map((data) => data._id); // Assuming '_id' as labels\r\n      const totalSales = salesData.value.map((data) => data.totalSales);\r\n      const totalProfit = salesData.value.map((data) => data.totalProfit);\r\n\r\n      return {\r\n        chart: {\r\n          id: \"sales-chart\",\r\n          toolbar: {\r\n            show: true, // Optionally enable/disable toolbar (zoom, download, etc.)\r\n          },\r\n        },\r\n        title: {\r\n          text: \"Sales and Profit Over Time\",\r\n          align: \"center\",\r\n        },\r\n        xaxis: {\r\n          categories: labels, // Set x-axis categories to the dates\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: \"Values\",\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            name: \"Total Sales\",\r\n            data: totalSales, // Data for the 'Total Sales' line\r\n          },\r\n          {\r\n            name: \"Total Profit\",\r\n            data: totalProfit, // Data for the 'Total Profit' line\r\n          },\r\n        ],\r\n        stroke: {\r\n          curve: \"smooth\", // Smooth the lines\r\n        },\r\n        fill: {\r\n          opacity: 0.3, // Set the opacity of the area under the curve\r\n        },\r\n        tooltip: {\r\n          shared: true,\r\n          intersect: false,\r\n        },\r\n      };\r\n    });\r\n\r\n    // Fetch the sales data\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/get_sales\");\r\n        if (response.data.success) {\r\n          salesData.value = response.data.salesDatas;\r\n          console.log(\"Sales data fetched:\", salesData.value);\r\n        } else {\r\n          console.error(\"Failed to fetch sales data\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching sales data:\", error);\r\n      }\r\n    });\r\n\r\n    return {\r\n      salesData,\r\n      chartOptions, // Chart options (computed property)\r\n    };\r\n  },\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n/* Optional styling for your page or components */\r\n#salesChart {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  height: 400px;\r\n}\r\n</style>\r\n"],"mappings":";;EAEOA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAS;;EACbA,KAAK,EAAC;AAAK;;EACTA,KAAK,EAAC;AAAW;;EAL9BC,GAAA;AAAA;;;;uBAAAC,mBAAA,CAAAC,SAAA,SACEC,YAAA,CAAUC,iBAAA,GACVC,mBAAA,CAgBM,OAhBNC,UAgBM,GAfJD,mBAAA,CAcM,OAdNE,UAcM,GAbJF,mBAAA,CAYM,OAZNG,UAYM,GAXJH,mBAAA,CAUM,OAVNI,UAUM,GATJC,mBAAA,yDAA4D,EAEpDC,IAAA,CAAAC,YAAY,IAAID,IAAA,CAAAC,YAAY,CAACC,MAAM,CAACC,MAAM,Q,cADlDC,YAAA,CAMEC,oBAAA;IAbZhB,GAAA;IASYiB,IAAI,EAAC,MAAM;IACVC,OAAO,EAAEP,IAAA,CAAAC,YAAY;IACrBC,MAAM,EAAEF,IAAA,CAAAC,YAAY,CAACC,MAAM;IAC5BM,MAAM,EAAC;mEAETlB,mBAAA,CAAmC,KAd7CmB,UAAA,EAcoB,uBAAqB,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}