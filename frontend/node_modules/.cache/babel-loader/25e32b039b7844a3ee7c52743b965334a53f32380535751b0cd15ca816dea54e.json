{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted, computed, defineComponent } from \"vue\";\nimport { VChart } from \"vue-echarts\"; // Import VueECharts\nimport axios from \"axios\";\nimport Navbar from \"/src/components/Admin/Navbar.vue\";\n\n// Import ECharts core modules and specific chart types\nimport * as echarts from \"echarts\";\nimport \"echarts/lib/chart/line\";\nimport \"echarts/lib/component/tooltip\";\nimport \"echarts/lib/component/title\";\nimport \"echarts/lib/component/legend\";\n\n// Registering the chart types globally (optional)\necharts.registerTheme('my-theme', {\n  color: ['#0f4b5e', '#ff7f00', '#ff00ff']\n});\nexport default defineComponent({\n  components: {\n    Navbar,\n    VChart\n  },\n  setup() {\n    const select = ref(\".select\");\n    const salesData = ref([]);\n\n    // Chart options computed based on salesData\n    const chartOptions = computed(() => {\n      if (salesData.value.length === 0) {\n        return {}; // Return empty object to prevent rendering before data is fetched\n      }\n      const labels = salesData.value.map(data => data._id); // Assuming '_id' as labels\n      const totalSales = salesData.value.map(data => data.totalSales);\n      const totalProfit = salesData.value.map(data => data.totalProfit);\n      return {\n        title: {\n          text: 'Sales and Profit Over Time'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        legend: {\n          data: ['Total Sales', 'Total Profit']\n        },\n        xAxis: {\n          type: 'category',\n          data: labels\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          name: 'Total Sales',\n          type: 'line',\n          data: totalSales,\n          smooth: true,\n          lineStyle: {\n            color: \"#4bc0c0\" // Custom color for Total Sales\n          },\n          areaStyle: {\n            color: \"rgba(75, 192, 192, 0.2)\"\n          }\n        }, {\n          name: 'Total Profit',\n          type: 'line',\n          data: totalProfit,\n          smooth: true,\n          lineStyle: {\n            color: \"#ff6384\" // Custom color for Total Profit\n          },\n          areaStyle: {\n            color: \"rgba(255, 99, 132, 0.2)\"\n          }\n        }]\n      };\n    });\n\n    // Fetch the sales data\n    onMounted(async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/get_sales\");\n        if (response.data.success) {\n          salesData.value = response.data.salesDatas;\n          console.log(\"Sales data fetched:\", salesData.value);\n        } else {\n          console.error(\"Failed to fetch sales data\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching sales data:\", error);\n      }\n    });\n    return {\n      select,\n      salesData,\n      chartOptions // Chart options (computed property)\n    };\n  }\n});","map":{"version":3,"names":["ref","onMounted","computed","defineComponent","VChart","axios","Navbar","echarts","registerTheme","color","components","setup","select","salesData","chartOptions","value","length","labels","map","data","_id","totalSales","totalProfit","title","text","tooltip","trigger","legend","xAxis","type","yAxis","series","name","smooth","lineStyle","areaStyle","response","get","success","salesDatas","console","log","error"],"sources":["C:\\Users\\Administrator\\OneDrive\\Desktop\\POSExpress\\frontend\\src\\components\\Admin\\Main\\Dashboard.vue"],"sourcesContent":["<template>\r\n  <Navbar />\r\n  <div class=\"page-wrapper\">\r\n\r\n          <!-- Ensure chartOptions is defined and contains series before rendering the chart -->\r\n          <v-chart\r\n            v-if=\"chartOptions && chartOptions.series && chartOptions.series.length > 0\"\r\n            :options=\"chartOptions\"\r\n            style=\"height: 400px; width: 100%;\"\r\n          />\r\n          <p v-else>Loading chart data...</p>\r\n        </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed, defineComponent } from \"vue\";\r\nimport { VChart } from \"vue-echarts\"; // Import VueECharts\r\nimport axios from \"axios\";\r\nimport Navbar from \"/src/components/Admin/Navbar.vue\";\r\n\r\n// Import ECharts core modules and specific chart types\r\nimport * as echarts from \"echarts\";\r\nimport \"echarts/lib/chart/line\";\r\nimport \"echarts/lib/component/tooltip\";\r\nimport \"echarts/lib/component/title\";\r\nimport \"echarts/lib/component/legend\";\r\n\r\n// Registering the chart types globally (optional)\r\necharts.registerTheme('my-theme', {\r\n  color: ['#0f4b5e', '#ff7f00', '#ff00ff'],\r\n});\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    Navbar,\r\n    VChart,\r\n  },\r\n  setup() {\r\n    const select = ref(\".select\");\r\n    const salesData = ref([]);\r\n\r\n    // Chart options computed based on salesData\r\n    const chartOptions = computed(() => {\r\n      if (salesData.value.length === 0) {\r\n        return {}; // Return empty object to prevent rendering before data is fetched\r\n      }\r\n\r\n      const labels = salesData.value.map((data) => data._id); // Assuming '_id' as labels\r\n      const totalSales = salesData.value.map((data) => data.totalSales);\r\n      const totalProfit = salesData.value.map((data) => data.totalProfit);\r\n\r\n      return {\r\n        title: {\r\n          text: 'Sales and Profit Over Time',\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n        },\r\n        legend: {\r\n          data: ['Total Sales', 'Total Profit'],\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          data: labels,\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n        },\r\n        series: [\r\n          {\r\n            name: 'Total Sales',\r\n            type: 'line',\r\n            data: totalSales,\r\n            smooth: true,\r\n            lineStyle: {\r\n              color: \"#4bc0c0\", // Custom color for Total Sales\r\n            },\r\n            areaStyle: {\r\n              color: \"rgba(75, 192, 192, 0.2)\",\r\n            },\r\n          },\r\n          {\r\n            name: 'Total Profit',\r\n            type: 'line',\r\n            data: totalProfit,\r\n            smooth: true,\r\n            lineStyle: {\r\n              color: \"#ff6384\", // Custom color for Total Profit\r\n            },\r\n            areaStyle: {\r\n              color: \"rgba(255, 99, 132, 0.2)\",\r\n            },\r\n          },\r\n        ],\r\n      };\r\n    });\r\n\r\n    // Fetch the sales data\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/get_sales\");\r\n        if (response.data.success) {\r\n          salesData.value = response.data.salesDatas;\r\n          console.log(\"Sales data fetched:\", salesData.value);\r\n        } else {\r\n          console.error(\"Failed to fetch sales data\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching sales data:\", error);\r\n      }\r\n    });\r\n\r\n    return {\r\n      select,\r\n      salesData,\r\n      chartOptions, // Chart options (computed property)\r\n    };\r\n  },\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n/* Optional styling for your page or components */\r\n#salesChart {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  height: 400px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}