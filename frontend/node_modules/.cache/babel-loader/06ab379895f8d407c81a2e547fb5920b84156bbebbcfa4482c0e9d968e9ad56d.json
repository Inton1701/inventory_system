{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport { ref, computed, onMounted, onBeforeUnmount } from 'vue';\nimport axios from 'axios';\nexport default {\n  setup() {\n    // Reactive Variables\n    const apiURL = process.env.VUE_APP_URL;\n    const selectedCategory = ref('all');\n    const barcode = ref('');\n    const barcodeInput = ref(null);\n    const cart = ref([]);\n    const categories = ref([]);\n    const subtotal = ref(0);\n    const VAT = ref(12); // Example tax rate\n    const discount = ref(0);\n    const barcodeError = ref({\n      message: null\n    });\n    const paymentError = ref({\n      message: null\n    });\n    const lastAddedProduct = ref(null);\n    const stockQuantity = ref(null); // Store the stock quantity of the last fetched product\n    const newQuantity = ref(1); // New quantity input for the modal\n    const quantityError = ref(null);\n    const change = ref(null);\n    const clientPayment = ref(null);\n\n    // Computed Variables\n    const total = computed(() => subtotal.value + subtotal.value * tax.value / 100 - discount.value);\n\n    // Methods\n    const getCategories = async () => {\n      try {\n        const response = await axios.get(`${apiURL}/get_category_list`);\n        categories.value = response.data.categories;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const addProduct = async () => {\n      try {\n        // Ensure barcode input is not empty\n        // Clear the cart and reset inputs\n        cart.value = [];\n        subtotal.value = 0;\n        discount.value = 0;\n        change.value = null;\n        if (!barcode.value.trim()) {\n          barcodeError.value.message = \"Please enter a valid barcode.\";\n          return;\n        }\n\n        // Fetch product by barcode using API\n        const response = await axios.get(`${apiURL}/get_product_info/${barcode.value.trim()}`);\n        if (response.data.success) {\n          const product = response.data.product;\n          barcodeError.value.message = null;\n\n          // Store the last added product and its stock quantity\n          lastAddedProduct.value = product;\n          stockQuantity.value = product.quantity;\n\n          // Check if the product is already in the cart\n          const existingItem = cart.value.find(item => item._id === product._id);\n          if (existingItem) {\n            // If product already in the cart, increment the quantity (or update via modal)\n            const newTotalQuantity = existingItem.quantity + 1;\n            if (newTotalQuantity <= stockQuantity.value) {\n              existingItem.quantity = newTotalQuantity; // Update quantity\n            } else {\n              barcodeError.value.message = `Maximum stock reached for ${product.name}.`;\n            }\n          } else {\n            // Add product to cart with quantity 1 if not found\n            if (stockQuantity.value > 0) {\n              cart.value.push({\n                ...product,\n                quantity: 1\n              });\n            } else {\n              barcodeError.value.message = `No stock available for ${product.name}.`;\n            }\n          }\n          updateSubtotal(); // Update subtotal after adding the product\n        } else {\n          barcodeError.value.message = response.data.message || \"Product not found.\";\n        }\n      } catch (error) {\n        console.error(\"Error adding product:\", error);\n        barcodeError.value.message = \"An error occurred while fetching the product.\";\n      } finally {\n        barcode.value = \"\"; // Clear barcode input\n      }\n    };\n    const updateSubtotal = () => {\n      subtotal.value = cart.value.reduce((sum, item) => sum + item.quantity * item.price, 0);\n    };\n    const handleKeydown = event => {\n      switch (event.key) {\n        case 'F1':\n          event.preventDefault();\n          openPaymentModal(); // Open payment modal\n          break;\n        case 'q':\n          event.preventDefault();\n          openUpdateQuantityModal(); // Open quantity modal\n          break;\n        default:\n          break;\n      }\n    };\n    const openPaymentModal = () => {\n      const modalElement = document.getElementById('payment-modal');\n      const modal = new bootstrap.Modal(modalElement);\n      if (modal) {\n        modal.show();\n\n        // Focus on the payment input field when the modal opens\n        modalElement.addEventListener('shown.bs.modal', () => {\n          const inputField = modalElement.querySelector('input');\n          if (inputField) {\n            inputField.focus();\n          }\n        });\n      }\n    };\n    const handleModalKeydown = event => {\n      const modalElement = document.getElementById('update-quantity-modal');\n      if (modalElement) {\n        // Check for Enter key\n        if (event.key === 'Enter') {\n          event.preventDefault(); // Prevent default form submission\n          updateProductQuantity(); // Trigger the update function\n        }\n\n        // Check for Escape key\n        if (event.key === 'Escape') {\n          event.preventDefault(); // Prevent default behavior\n          const modal = bootstrap.Modal.getInstance(modalElement);\n          if (modal) {\n            modal.hide(); // Close the modal\n          }\n\n          // Refocus barcode input after closing the modal\n          const barcodeInput = document.getElementById('barcode-input');\n          if (barcodeInput) {\n            barcodeInput.focus();\n          }\n        }\n      }\n    };\n    const handlePaymentKeydown = event => {\n      if (event.key === 'Enter') {\n        event.preventDefault(); // Prevent default form submission\n        processPayment(); // Trigger payment processing\n      }\n    };\n    const openUpdateQuantityModal = () => {\n      if (lastAddedProduct.value) {\n        // Open modal to update quantity\n        const modalElement = document.getElementById('update-quantity-modal');\n        const modal = new bootstrap.Modal(modalElement);\n        if (modal) {\n          modal.show();\n\n          // Focus on the input field when modal is shown\n          modalElement.addEventListener('shown.bs.modal', () => {\n            const inputField = modalElement.querySelector('input');\n            if (inputField) {\n              inputField.focus();\n            }\n          });\n        }\n      } else {\n        barcodeError.value.message = \"No product in cart yet.\";\n      }\n    };\n    const processPayment = async () => {\n      // Validate payment\n      if (clientPayment.value === null || clientPayment.value < total.value) {\n        paymentError.value.message = `Payment must be at least $${total.value}.`;\n        return;\n      }\n      try {\n        // Prepare transaction data\n        const transactionData = {\n          cart: cart.value.map(item => ({\n            _id: item._id,\n            // Product ID\n            quantity: item.quantity\n          })),\n          paymentMethod: \"cash\",\n          // You can dynamically set this\n          discounts: discount.value,\n          netAmount: subtotal.value,\n          VAT: subtotal.value * VAT.value / 100,\n          totalAmount: total.value,\n          status: \"completed\",\n          // Transaction status\n          employee: \"JohnDoe\" // Example employee, replace with actual\n        };\n\n        // Send transaction data to the backend\n        const response = await axios.post(`${apiURL}/commit_tan`, transactionData);\n        if (response.data.success) {\n          // Backend transaction was successful\n          console.log(\"Transaction saved:\", response.data.transaction);\n\n          // Calculate change\n          change.value = (clientPayment.value - total.value).toFixed(2);\n          clientPayment.value = null;\n          paymentError.value.message = null;\n\n          // Notify the user of successful payment (optional)\n          alert(\"Payment processed successfully!\");\n\n          // Close the payment modal\n          const modalElement = document.getElementById(\"payment-modal\");\n          const modal = bootstrap.Modal.getInstance(modalElement);\n          if (modal) {\n            modal.hide();\n          }\n        } else {\n          // Backend returned an error\n          paymentError.value.message = response.data.message || \"Failed to process transaction.\";\n          console.error(\"Transaction failed:\", response.data.message);\n        }\n      } catch (error) {\n        // Handle network or server errors\n        console.error(\"Error processing payment:\", error);\n        paymentError.value.message = \"An error occurred while processing the payment. Please try again.\";\n      }\n    };\n    const updateProductQuantity = () => {\n      if (lastAddedProduct.value) {\n        if (newQuantity.value > stockQuantity.value) {\n          quantityError.value = `Stock quantity is only ${stockQuantity.value}. Please enter a valid quantity.`;\n          return;\n        }\n\n        // Update quantity in cart\n        const cartItem = cart.value.find(item => item._id === lastAddedProduct.value._id);\n        if (cartItem) {\n          cartItem.quantity = newQuantity.value;\n        }\n        updateSubtotal();\n\n        // Close the modal\n        const modalElement = document.getElementById('update-quantity-modal');\n        const modal = bootstrap.Modal.getInstance(modalElement);\n        if (modal) {\n          modal.hide();\n        }\n\n        // Reset modal input\n        newQuantity.value = 1;\n        quantityError.value = null;\n\n        // Focus back on the barcode input\n        if (barcodeInput.value) {\n          barcodeInput.value.focus();\n        }\n      }\n    };\n\n    // Lifecycle Hooks\n    onMounted(() => {\n      getCategories();\n      window.addEventListener('keydown', handleKeydown); // Listen to keydown events\n    });\n    onBeforeUnmount(() => {\n      window.removeEventListener('keydown', handleKeydown);\n    });\n\n    // Return Variables and Methods\n    return {\n      categories,\n      selectedCategory,\n      barcode,\n      barcodeInput,\n      cart,\n      subtotal,\n      tax,\n      discount,\n      total,\n      barcodeError,\n      lastAddedProduct,\n      stockQuantity,\n      newQuantity,\n      quantityError,\n      addProduct,\n      updateProductQuantity,\n      handleModalKeydown,\n      handlePaymentKeydown,\n      change,\n      clientPayment,\n      paymentError\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","onBeforeUnmount","axios","setup","apiURL","process","env","VUE_APP_URL","selectedCategory","barcode","barcodeInput","cart","categories","subtotal","VAT","discount","barcodeError","message","paymentError","lastAddedProduct","stockQuantity","newQuantity","quantityError","change","clientPayment","total","value","tax","getCategories","response","get","data","error","console","addProduct","trim","success","product","quantity","existingItem","find","item","_id","newTotalQuantity","name","push","updateSubtotal","reduce","sum","price","handleKeydown","event","key","preventDefault","openPaymentModal","openUpdateQuantityModal","modalElement","document","getElementById","modal","bootstrap","Modal","show","addEventListener","inputField","querySelector","focus","handleModalKeydown","updateProductQuantity","getInstance","hide","handlePaymentKeydown","processPayment","transactionData","map","paymentMethod","discounts","netAmount","totalAmount","status","employee","post","log","transaction","toFixed","alert","cartItem","window","removeEventListener"],"sources":["C:\\Users\\Administrator\\OneDrive\\Desktop\\POSExpress\\frontend\\src\\components\\Apps\\POS.vue"],"sourcesContent":["<template>\r\n  <div class=\"main-wrapper\">\r\n    <div class=\"header\">\r\n      <!-- Header Content -->\r\n    </div>\r\n\r\n    <div class=\"page-wrapper pos-pg-wrapper ms-0\">\r\n      <div class=\"content pos-design p-0\">\r\n        <div class=\"row align-items-start pos-wrapper\">\r\n          <!-- Category Sidebar -->\r\n          <div class=\"col-md-3 col-lg-2 ps-0\">\r\n            <div class=\"category-list\">\r\n              <h5>Categories</h5>\r\n              <ul class=\"list-group text-center\">\r\n                <li v-for=\"category in categories\" :key=\"category.name\" class=\"list-group-item\"\r\n                  :class=\"{ 'active': selectedCategory === category.name }\" @click=\"selectCategory(category.name)\">\r\n                  <a href=\"javascript:void(0);\">{{ category.name }}</a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Product Display -->\r\n          <div class=\"col-md-12 col-lg-6\">\r\n            <div class=\"row bg-white px-4 pb-5 mx-3 mt-2\">\r\n              <h4>Enter Barcode:</h4>\r\n              <input v-model=\"barcode\" ref=\"barcodeInput\"\r\n                class=\"form-control bg-light border border-dark fs-1 mb-2 mt-3\" type=\"text\" @keyup.enter=\"addProduct\"\r\n                placeholder=\"Scan Barcode\" />\r\n              <p v-if=\"barcodeError.message\" class=\"text-danger\">ERROR: {{ barcodeError.message }}</p>\r\n\r\n            </div>\r\n\r\n            <div class=\"pos-wrapper\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12 col-lg-12\">\r\n                  <div class=\"pos-products\">\r\n                    <div class=\"tabs_container\">\r\n                      <div class=\"tab_content active\" v-for=\"category in filteredCategories\" :key=\"category.name\">\r\n                        <div class=\"row\">\r\n                          <div class=\"col-sm-4 col-md-4 col-lg-5 col-xl-3 product-item\"\r\n                            v-for=\"product in category.products\" :key=\"product.id\">\r\n                            <div class=\"product-info default-cover card\">\r\n                              <a href=\"javascript:void(0);\" class=\"img-bg\">\r\n                                <img :src=\"product.image\" alt=\"Product\" />\r\n                                <span><i data-feather=\"check\"></i></span>\r\n                              </a>\r\n                              <h6 class=\"product-name\">\r\n                                <a href=\"javascript:void(0);\">{{ product.name }}</a>\r\n                              </h6>\r\n                              <div class=\"d-flex align-items-center justify-content-between price\">\r\n                                <span>{{ product.stock }} Pcs</span>\r\n                                <p>${{ product.price }}</p>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Order List and Summary -->\r\n          <div class=\"col-md-12 col-lg-4 ps-0\">\r\n            <aside class=\"product-order-list\">\r\n              <div class=\"head d-flex align-items-center justify-content-between w-100\">\r\n                <h5>Order List</h5>\r\n                <a class=\"confirm-text\" href=\"javascript:void(0);\"><i data-feather=\"trash-2\"\r\n                    class=\"feather-16 text-danger\"></i></a>\r\n              </div>\r\n\r\n              <div class=\"product-added block-section\">\r\n                <div class=\"product-wrap\">\r\n                  <table class=\"table table-responsive\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Product</th>\r\n                        <th>Price</th>\r\n                        <th>Quantity</th>\r\n                        <th>Total</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr v-for=\"item in cart\" :key=\"item.id\">\r\n                        <td>{{ item.name }}</td>\r\n                        <td>{{ item.price }}</td>\r\n                        <td>{{ item.quantity }}</td>\r\n                        <td>{{ item.quantity * item.price }}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"block-section\">\r\n                <h6>Order Summary</h6>\r\n                <table class=\"table table-responsive table-borderless\">\r\n                  <tr>\r\n                    <td>Sub Total</td>\r\n                    <td class=\"text-end\">${{ subtotal }}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>VAT</td>\r\n                    <td class=\"text-end\">{{ VAT }}%</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td class=\"danger\">Discount</td>\r\n                    <td class=\"danger text-end\">${{ discount }}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Total</td>\r\n                    <td class=\"text-end\">${{ total }}</td>\r\n                  </tr>\r\n                  <tr v-if=\"change\">\r\n                    <td>Change</td>\r\n                    <td class=\"text-end\">${{change}}</td>\r\n                  </tr>\r\n                </table>\r\n              </div>\r\n            </aside>\r\n            <div class=\"btn-row d-sm-flex align-items-center justify-content-between\">\r\n              <a href=\"javascript:void(0);\" class=\"btn btn-success btn-icon flex-fill position-relative p-4 fs-6\"\r\n                data-bs-toggle=\"modal\" data-bs-target=\"#payment-completed\">\r\n                <span class=\"keyboard-key\">F1</span>\r\n                <span class=\"me-1 d-flex align-items-center\">\r\n                  <i data-feather=\"credit-card\" class=\"feather-16\"></i>\r\n                </span>Pay\r\n              </a>\r\n              <a href=\"javascript:void(0);\" class=\"btn btn-danger btn-icon flex-fill position-relative p-4 fs-6\">\r\n                <span class=\"keyboard-key\">F2</span>\r\n                <span class=\"me-1 d-flex align-items-center\">\r\n                  <i data-feather=\"trash-2\" class=\"feather-16\"></i>\r\n                </span>Void\r\n              </a>\r\n\r\n              <a href=\"javascript:void(0);\" class=\"btn btn-info btn-icon flex-fill position-relative p-4 fs-6\"\r\n                data-bs-toggle=\"modal\" data-bs-target=\"#hold-order\">\r\n                <span class=\"keyboard-key\">F3</span>\r\n                <span class=\"me-1 d-flex align-items-center\">\r\n                  <i data-feather=\"corner-up-right\" class=\"feather-16\"></i>\r\n                </span>Return\r\n              </a>\r\n            </div>\r\n\r\n          </div>\r\n          <!-- Action Buttons -->\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n <!-- Modal for Updating Quantity -->\r\n<div class=\"modal fade\" id=\"update-quantity-modal\" tabindex=\"-1\" aria-labelledby=\"update-quantity-modalLabel\"\r\n  aria-hidden=\"true\">\r\n  <div class=\"modal-dialog\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\" id=\"update-quantity-modalLabel\">Update Quantity</h5>\r\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div class=\"form-group\">\r\n          <label for=\"new-quantity\">Quantity</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"new-quantity\"\r\n            class=\"form-control\"\r\n            v-model=\"newQuantity\"\r\n            min=\"1\"\r\n            @keydown=\"handleModalKeydown\"\r\n          />\r\n        </div>\r\n        <p v-if=\"quantityError\" class=\"text-danger\">{{ quantityError }}</p>\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n        <button type=\"button\" class=\"btn btn-primary\" @click=\"updateProductQuantity\">Update</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- Modal for Payment -->\r\n<div class=\"modal fade\" id=\"payment-modal\" tabindex=\"-1\" aria-labelledby=\"payment-modalLabel\" aria-hidden=\"true\">\r\n  <div class=\"modal-dialog\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\" id=\"payment-modalLabel\">Payment</h5>\r\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div class=\"form-group\">\r\n          <label for=\"payment\">Amount to Pay: ${{ total }}</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"payment\"\r\n            class=\"form-control\"\r\n            v-model=\"clientPayment\"\r\n            min=\"1\"\r\n            @keydown=\"handlePaymentKeydown\"\r\n            placeholder=\"Enter payment amount\"\r\n          />\r\n        </div>\r\n        <p v-if=\"paymentError.message\" class=\"text-danger\">{{ paymentError.message }}</p>\r\n      </div>\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n        <button type=\"button\" class=\"btn btn-primary\" @click=\"processPayment\">Process Payment</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n</template>\r\n<script>\r\nimport { ref, computed, onMounted, onBeforeUnmount } from 'vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  setup() {\r\n    // Reactive Variables\r\n    const apiURL = process.env.VUE_APP_URL;\r\n    const selectedCategory = ref('all');\r\n    const barcode = ref('');\r\n    const barcodeInput = ref(null);\r\n    const cart = ref([]);\r\n    const categories = ref([]);\r\n    const subtotal = ref(0);\r\n    const VAT = ref(12); // Example tax rate\r\n    const discount = ref(0);\r\n    const barcodeError = ref({ message: null });\r\n    const paymentError = ref({ message: null });\r\n    const lastAddedProduct = ref(null);\r\n    const stockQuantity = ref(null); // Store the stock quantity of the last fetched product\r\n    const newQuantity = ref(1); // New quantity input for the modal\r\n    const quantityError = ref(null);\r\n    const change = ref(null);\r\n    const clientPayment = ref(null);\r\n\r\n    // Computed Variables\r\n    const total = computed(() =>\r\n      subtotal.value + (subtotal.value * tax.value) / 100 - discount.value\r\n    );\r\n\r\n    // Methods\r\n    const getCategories = async () => {\r\n      try {\r\n        const response = await axios.get(`${apiURL}/get_category_list`);\r\n        categories.value = response.data.categories;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    const addProduct = async () => {\r\n      try {\r\n        // Ensure barcode input is not empty\r\n              // Clear the cart and reset inputs\r\n      cart.value = [];\r\n      subtotal.value = 0;\r\n      discount.value = 0;\r\n        change.value = null\r\n\r\n        if (!barcode.value.trim()) {\r\n          barcodeError.value.message = \"Please enter a valid barcode.\";\r\n          return;\r\n        }\r\n\r\n        // Fetch product by barcode using API\r\n        const response = await axios.get(`${apiURL}/get_product_info/${barcode.value.trim()}`);\r\n        if (response.data.success) {\r\n          const product = response.data.product;\r\n          barcodeError.value.message = null;\r\n\r\n          // Store the last added product and its stock quantity\r\n          lastAddedProduct.value = product;\r\n          stockQuantity.value = product.quantity;\r\n\r\n          // Check if the product is already in the cart\r\n          const existingItem = cart.value.find((item) => item._id === product._id);\r\n\r\n          if (existingItem) {\r\n            // If product already in the cart, increment the quantity (or update via modal)\r\n            const newTotalQuantity = existingItem.quantity + 1;\r\n            if (newTotalQuantity <= stockQuantity.value) {\r\n              existingItem.quantity = newTotalQuantity; // Update quantity\r\n            } else {\r\n              barcodeError.value.message = `Maximum stock reached for ${product.name}.`;\r\n            }\r\n          } else {\r\n            // Add product to cart with quantity 1 if not found\r\n            if (stockQuantity.value > 0) {\r\n              cart.value.push({ ...product, quantity: 1 });\r\n            } else {\r\n              barcodeError.value.message = `No stock available for ${product.name}.`;\r\n            }\r\n          }\r\n\r\n          updateSubtotal(); // Update subtotal after adding the product\r\n        } else {\r\n          barcodeError.value.message = response.data.message || \"Product not found.\";\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error adding product:\", error);\r\n        barcodeError.value.message = \"An error occurred while fetching the product.\";\r\n      } finally {\r\n        barcode.value = \"\"; // Clear barcode input\r\n      }\r\n    };\r\n\r\n    const updateSubtotal = () => {\r\n      subtotal.value = cart.value.reduce((sum, item) => sum + item.quantity * item.price, 0);\r\n    };\r\n\r\n    const handleKeydown = (event) => {\r\n      switch (event.key) {\r\n        case 'F1':\r\n          event.preventDefault();\r\n          openPaymentModal(); // Open payment modal\r\n          break;\r\n        case 'q':\r\n          event.preventDefault();\r\n          openUpdateQuantityModal(); // Open quantity modal\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    const openPaymentModal = () => {\r\n      const modalElement = document.getElementById('payment-modal');\r\n      const modal = new bootstrap.Modal(modalElement);\r\n\r\n      if (modal) {\r\n        modal.show();\r\n\r\n        // Focus on the payment input field when the modal opens\r\n        modalElement.addEventListener('shown.bs.modal', () => {\r\n          const inputField = modalElement.querySelector('input');\r\n          if (inputField) {\r\n            inputField.focus();\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    const handleModalKeydown = (event) => {\r\n      const modalElement = document.getElementById('update-quantity-modal');\r\n\r\n      if (modalElement) {\r\n        // Check for Enter key\r\n        if (event.key === 'Enter') {\r\n          event.preventDefault(); // Prevent default form submission\r\n          updateProductQuantity(); // Trigger the update function\r\n        }\r\n\r\n        // Check for Escape key\r\n        if (event.key === 'Escape') {\r\n          event.preventDefault(); // Prevent default behavior\r\n          const modal = bootstrap.Modal.getInstance(modalElement);\r\n          if (modal) {\r\n            modal.hide(); // Close the modal\r\n          }\r\n\r\n          // Refocus barcode input after closing the modal\r\n          const barcodeInput = document.getElementById('barcode-input');\r\n          if (barcodeInput) {\r\n            barcodeInput.focus();\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    const handlePaymentKeydown = (event) => {\r\n      if (event.key === 'Enter') {\r\n        event.preventDefault(); // Prevent default form submission\r\n        processPayment(); // Trigger payment processing\r\n      }\r\n    };\r\n\r\n    const openUpdateQuantityModal = () => {\r\n      if (lastAddedProduct.value) {\r\n        // Open modal to update quantity\r\n        const modalElement = document.getElementById('update-quantity-modal');\r\n        const modal = new bootstrap.Modal(modalElement);\r\n\r\n        if (modal) {\r\n          modal.show();\r\n\r\n          // Focus on the input field when modal is shown\r\n          modalElement.addEventListener('shown.bs.modal', () => {\r\n            const inputField = modalElement.querySelector('input');\r\n            if (inputField) {\r\n              inputField.focus();\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        barcodeError.value.message = \"No product in cart yet.\";\r\n      }\r\n    };\r\n    const processPayment = async () => {\r\n  // Validate payment\r\n  if (clientPayment.value === null || clientPayment.value < total.value) {\r\n    paymentError.value.message = `Payment must be at least $${total.value}.`;\r\n    return;\r\n  }\r\n\r\n  try {\r\n    // Prepare transaction data\r\n    const transactionData = {\r\n      cart: cart.value.map((item) => ({\r\n        _id: item._id, // Product ID\r\n        quantity: item.quantity,\r\n      })),\r\n      paymentMethod: \"cash\", // You can dynamically set this\r\n      discounts: discount.value,\r\n      netAmount: subtotal.value,\r\n      VAT: (subtotal.value * VAT.value) / 100,\r\n      totalAmount: total.value,\r\n      status: \"completed\", // Transaction status\r\n      employee: \"JohnDoe\", // Example employee, replace with actual\r\n    };\r\n\r\n    // Send transaction data to the backend\r\n    const response = await axios.post(`${apiURL}/commit_tan`, transactionData);\r\n\r\n    if (response.data.success) {\r\n      // Backend transaction was successful\r\n      console.log(\"Transaction saved:\", response.data.transaction);\r\n\r\n      // Calculate change\r\n      change.value = (clientPayment.value - total.value).toFixed(2);\r\n\r\n\r\n      clientPayment.value = null;\r\n      paymentError.value.message = null;\r\n\r\n      // Notify the user of successful payment (optional)\r\n      alert(\"Payment processed successfully!\");\r\n\r\n      // Close the payment modal\r\n      const modalElement = document.getElementById(\"payment-modal\");\r\n      const modal = bootstrap.Modal.getInstance(modalElement);\r\n      if (modal) {\r\n        modal.hide();\r\n      }\r\n    } else {\r\n      // Backend returned an error\r\n      paymentError.value.message = response.data.message || \"Failed to process transaction.\";\r\n      console.error(\"Transaction failed:\", response.data.message);\r\n    }\r\n  } catch (error) {\r\n    // Handle network or server errors\r\n    console.error(\"Error processing payment:\", error);\r\n    paymentError.value.message = \"An error occurred while processing the payment. Please try again.\";\r\n  }\r\n};\r\n\r\n\r\n    \r\n\r\n    const updateProductQuantity = () => {\r\n      if (lastAddedProduct.value) {\r\n        if (newQuantity.value > stockQuantity.value) {\r\n          quantityError.value = `Stock quantity is only ${stockQuantity.value}. Please enter a valid quantity.`;\r\n          return;\r\n        }\r\n\r\n        // Update quantity in cart\r\n        const cartItem = cart.value.find((item) => item._id === lastAddedProduct.value._id);\r\n        if (cartItem) {\r\n          cartItem.quantity = newQuantity.value;\r\n        }\r\n\r\n        updateSubtotal();\r\n\r\n        // Close the modal\r\n        const modalElement = document.getElementById('update-quantity-modal');\r\n        const modal = bootstrap.Modal.getInstance(modalElement);\r\n        if (modal) {\r\n          modal.hide();\r\n        }\r\n\r\n        // Reset modal input\r\n        newQuantity.value = 1;\r\n        quantityError.value = null;\r\n\r\n        // Focus back on the barcode input\r\n        if (barcodeInput.value) {\r\n          barcodeInput.value.focus();\r\n        }\r\n      }\r\n    };\r\n\r\n    // Lifecycle Hooks\r\n    onMounted(() => {\r\n      getCategories();\r\n      window.addEventListener('keydown', handleKeydown); // Listen to keydown events\r\n    });\r\n\r\n    onBeforeUnmount(() => {\r\n      window.removeEventListener('keydown', handleKeydown);\r\n    });\r\n\r\n    // Return Variables and Methods\r\n    return {\r\n      categories,\r\n      selectedCategory,\r\n      barcode,\r\n      barcodeInput,\r\n      cart,\r\n      subtotal,\r\n      tax,\r\n      discount,\r\n      total,\r\n      barcodeError,\r\n      lastAddedProduct,\r\n      stockQuantity,\r\n      newQuantity,\r\n      quantityError,\r\n      addProduct,\r\n      updateProductQuantity,\r\n      handleModalKeydown,\r\n      handlePaymentKeydown,\r\n      change,\r\n      clientPayment,\r\n      paymentError\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n/* Container for the product display */\r\n.tabs_container {\r\n  min-height: 620px;\r\n  max-height: 620px;\r\n  overflow-y: auto;\r\n  background: #fff;\r\n  padding: 20px;\r\n\r\n}\r\n\r\n/* Flex container for product display */\r\n.tab_content {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n  /* Space between items */\r\n  justify-content: space-between;\r\n}\r\n\r\n/* Ensure product-info fits within columns properly */\r\n.product-info {\r\n  position: relative;\r\n  padding: 15px;\r\n  background: #f9f9f9;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  transition: transform 0.2s ease-in-out;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  /* Optional shadow */\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  /* Flex to ensure each card takes equal width */\r\n  flex: 1 1 calc(33.33% - 1rem);\r\n  /* Default to 3 items per row */\r\n  height: 100%;\r\n\r\n}\r\n\r\n.product-info img {\r\n  width: 100%;\r\n  height: 150px;\r\n  /* Fixed height for images */\r\n  object-fit: cover;\r\n  /* Ensure images cover the area proportionally */\r\n}\r\n\r\n.product-info:hover {\r\n  transform: scale(1.05);\r\n  /* Slight zoom effect on hover */\r\n}\r\n\r\n/* Mobile and tablet adjustments for card layout */\r\n@media (max-width: 1200px) {\r\n  .product-info {\r\n    flex: 1 1 calc(25% - 1rem);\r\n    /* 4 items per row for large screens */\r\n    height: 300px;\r\n    /* Set height for large screens */\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .product-info {\r\n    flex: 1 1 calc(33.33% - 1rem);\r\n    /* 3 items per row for medium screens */\r\n    height: 250px;\r\n    /* Adjust height for medium screens */\r\n  }\r\n}\r\n\r\n@media (max-width: 576px) {\r\n  .product-info {\r\n    flex: 1 1 calc(50% - 1rem);\r\n    /* 2 items per row for small screens */\r\n    height: 200px;\r\n    /* Adjust height for small screens */\r\n  }\r\n}\r\n\r\n/* Category List Styling */\r\n.category-list {\r\n  padding: 15px;\r\n  background-color: #f9f9f9;\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n.category-list ul {\r\n  list-style-type: none;\r\n  padding-left: 0;\r\n}\r\n\r\n.category-list li {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.category-list a {\r\n  text-decoration: none;\r\n  color: #333;\r\n  font-size: 16px;\r\n  padding: 8px 10px;\r\n  border-radius: 4px;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.category-list a:active {\r\n  color: #fff;\r\n}\r\n\r\n.category-list a:hover {\r\n  color: #fff;\r\n\r\n}\r\n\r\n.list-group-item.active {\r\n  background-color: #22A95E;\r\n  /* Green background for active list item */\r\n  border-color: #22A95E;\r\n  /* Optional: Match border with the active color */\r\n}\r\n\r\n.list-group-item.active a {\r\n  color: #fff;\r\n  /* Make the text white inside the active list item */\r\n}\r\n\r\n/* Keyboard Key Styling for the UI */\r\n.keyboard-key {\r\n  position: absolute;\r\n  top: 5px;\r\n  left: 5px;\r\n  font-size: 12px;\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n  color: white;\r\n  padding: 5px 8px;\r\n  border-radius: 4px;\r\n  font-family: 'Courier New', monospace;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.product-wrap {\r\n  max-height: 100%;\r\n  /* Prevents fixed height causing auto-scroll */\r\n  overflow: hidden;\r\n  /* Prevents unnecessary scrollbars */\r\n}\r\n\r\n.table {\r\n  width: 100%;\r\n  /* Ensures the table fits within its container */\r\n  table-layout: auto;\r\n  /* Allows cells to resize based on content */\r\n  word-wrap: break-word;\r\n  /* Enables word wrapping for text */\r\n}\r\n\r\n.table th,\r\n.table td {\r\n  white-space: normal;\r\n  /* Allows text to wrap to the next line */\r\n  word-break: break-word;\r\n  /* Forces breaking of long words if needed */\r\n  text-align: left;\r\n  /* Aligns text for readability */\r\n}\r\n\r\n.product-name-cell {\r\n  max-width: 200px;\r\n  /* Adjust as needed for column width */\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  /* Optional: adds \"...\" for long text */\r\n  white-space: normal;\r\n}\r\n\r\n.quantity-input {\r\n  width: 50px;\r\n  /* Ensures quantity input field doesn't take too much space */\r\n  text-align: center;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}