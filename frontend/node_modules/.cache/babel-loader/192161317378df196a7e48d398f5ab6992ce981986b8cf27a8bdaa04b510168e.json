{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\n// Format date function for filenames\nfunction formatDate(date) {\n  const options = {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  };\n  return new Intl.DateTimeFormat('en-US', options).format(date).replace(/[/, :]/g, '-'); // Safe filename format\n}\n\n// Function to export data to PDF\nexport function exportToPDF(header, products, filenamePrefix = 'PosExpress') {\n  if (!products || products.length === 0) {\n    console.error('No products to export');\n    return;\n  }\n\n  // Create jsPDF instance with landscape orientation\n  const doc = new jsPDF('landscape'); // 'landscape' orientation\n\n  // Set the font size to be smaller\n  doc.setFontSize(8); // Set font size to 8, you can adjust this as needed\n\n  // Set up PDF headers\n  const headers = Object.keys(products[0]).map(key => ({\n    title: key.toUpperCase(),\n    dataKey: key\n  }));\n\n  // Generate a formatted date string for the filename\n  const timestamp = formatDate(new Date());\n  const filename = `${filenamePrefix}-${timestamp}.pdf`; // Filename with prefix and timestamp\n\n  // Add header text\n  doc.text(header, 14, 10); // Title at position (14, 10)\n\n  // Add the table with the data\n  doc.autoTable({\n    head: [headers.map(header => header.title)],\n    // Column headers\n    body: products.map(product => headers.map(header => product[header.dataKey])),\n    // Rows based on dataKey\n    startY: 20,\n    // Table starts 20 units below the title\n    theme: 'grid',\n    // Table theme\n    styles: {\n      fontSize: 8,\n      // Ensure font size is set for table data\n      cellWidth: 'auto',\n      // Cells adjust to content size\n      overflow: 'linebreak' // Enable line wrapping\n    }\n  });\n\n  // Save the PDF with the generated filename\n  doc.save(filename);\n}","map":{"version":3,"names":["jsPDF","formatDate","date","options","year","month","day","hour","minute","second","Intl","DateTimeFormat","format","replace","exportToPDF","header","products","filenamePrefix","length","console","error","doc","setFontSize","headers","Object","keys","map","key","title","toUpperCase","dataKey","timestamp","Date","filename","text","autoTable","head","body","product","startY","theme","styles","fontSize","cellWidth","overflow","save"],"sources":["C:/Users/Administrator/OneDrive/Desktop/POSExpress/frontend/src/utils/exportPDF.js"],"sourcesContent":["import jsPDF from 'jspdf';\r\nimport 'jspdf-autotable';\r\n\r\n// Format date function for filenames\r\nfunction formatDate(date) {\r\n  const options = { \r\n    year: 'numeric', \r\n    month: '2-digit', \r\n    day: '2-digit', \r\n    hour: '2-digit', \r\n    minute: '2-digit', \r\n    second: '2-digit' \r\n  };\r\n  return new Intl.DateTimeFormat('en-US', options).format(date).replace(/[/, :]/g, '-'); // Safe filename format\r\n}\r\n\r\n// Function to export data to PDF\r\nexport function exportToPDF(header, products, filenamePrefix = 'PosExpress') {\r\n  if (!products || products.length === 0) {\r\n    console.error('No products to export');\r\n    return;\r\n  }\r\n\r\n  // Create jsPDF instance with landscape orientation\r\n  const doc = new jsPDF('landscape'); // 'landscape' orientation\r\n\r\n  // Set the font size to be smaller\r\n  doc.setFontSize(8); // Set font size to 8, you can adjust this as needed\r\n\r\n  // Set up PDF headers\r\n  const headers = Object.keys(products[0]).map((key) => ({\r\n    title: key.toUpperCase(),\r\n    dataKey: key,\r\n  }));\r\n\r\n  // Generate a formatted date string for the filename\r\n  const timestamp = formatDate(new Date());\r\n  const filename = `${filenamePrefix}-${timestamp}.pdf`; // Filename with prefix and timestamp\r\n\r\n  // Add header text\r\n  doc.text(header, 14, 10); // Title at position (14, 10)\r\n\r\n  // Add the table with the data\r\n  doc.autoTable({\r\n    head: [headers.map(header => header.title)], // Column headers\r\n    body: products.map(product => headers.map(header => product[header.dataKey])), // Rows based on dataKey\r\n    startY: 20, // Table starts 20 units below the title\r\n    theme: 'grid', // Table theme\r\n    styles: {\r\n      fontSize: 8, // Ensure font size is set for table data\r\n      cellWidth: 'auto', // Cells adjust to content size\r\n      overflow: 'linebreak', // Enable line wrapping\r\n    }\r\n  });\r\n\r\n  // Save the PDF with the generated filename\r\n  doc.save(filename);\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,iBAAiB;;AAExB;AACA,SAASC,UAAUA,CAACC,IAAI,EAAE;EACxB,MAAMC,OAAO,GAAG;IACdC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,SAAS;IAChBC,GAAG,EAAE,SAAS;IACdC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE,SAAS;IACjBC,MAAM,EAAE;EACV,CAAC;EACD,OAAO,IAAIC,IAAI,CAACC,cAAc,CAAC,OAAO,EAAER,OAAO,CAAC,CAACS,MAAM,CAACV,IAAI,CAAC,CAACW,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;AACzF;;AAEA;AACA,OAAO,SAASC,WAAWA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,cAAc,GAAG,YAAY,EAAE;EAC3E,IAAI,CAACD,QAAQ,IAAIA,QAAQ,CAACE,MAAM,KAAK,CAAC,EAAE;IACtCC,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;IACtC;EACF;;EAEA;EACA,MAAMC,GAAG,GAAG,IAAIrB,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;;EAEpC;EACAqB,GAAG,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEpB;EACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACT,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACU,GAAG,CAAEC,GAAG,KAAM;IACrDC,KAAK,EAAED,GAAG,CAACE,WAAW,CAAC,CAAC;IACxBC,OAAO,EAAEH;EACX,CAAC,CAAC,CAAC;;EAEH;EACA,MAAMI,SAAS,GAAG9B,UAAU,CAAC,IAAI+B,IAAI,CAAC,CAAC,CAAC;EACxC,MAAMC,QAAQ,GAAG,GAAGhB,cAAc,IAAIc,SAAS,MAAM,CAAC,CAAC;;EAEvD;EACAV,GAAG,CAACa,IAAI,CAACnB,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;;EAE1B;EACAM,GAAG,CAACc,SAAS,CAAC;IACZC,IAAI,EAAE,CAACb,OAAO,CAACG,GAAG,CAACX,MAAM,IAAIA,MAAM,CAACa,KAAK,CAAC,CAAC;IAAE;IAC7CS,IAAI,EAAErB,QAAQ,CAACU,GAAG,CAACY,OAAO,IAAIf,OAAO,CAACG,GAAG,CAACX,MAAM,IAAIuB,OAAO,CAACvB,MAAM,CAACe,OAAO,CAAC,CAAC,CAAC;IAAE;IAC/ES,MAAM,EAAE,EAAE;IAAE;IACZC,KAAK,EAAE,MAAM;IAAE;IACfC,MAAM,EAAE;MACNC,QAAQ,EAAE,CAAC;MAAE;MACbC,SAAS,EAAE,MAAM;MAAE;MACnBC,QAAQ,EAAE,WAAW,CAAE;IACzB;EACF,CAAC,CAAC;;EAEF;EACAvB,GAAG,CAACwB,IAAI,CAACZ,QAAQ,CAAC;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}