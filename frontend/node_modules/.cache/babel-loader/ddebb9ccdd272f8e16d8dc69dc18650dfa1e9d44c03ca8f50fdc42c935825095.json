{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { ref, computed, onMounted, onBeforeUnmount } from 'vue';\nimport { modalController } from '@/utils/modalController';\nimport axios from 'axios';\nimport 'sweetalert2';\nexport default {\n  setup() {\n    // Reactive Variables\n    const apiURL = process.env.VUE_APP_URL;\n    const imgURL = process.env.VUE_APP_IMAGE_URL;\n    const selectedCategory = ref('all');\n    const barcode = ref('');\n    const barcodeInput = ref(null);\n    const cart = ref([]);\n    const categories = ref([]);\n    const subtotal = ref(0);\n    const VAT = ref(12); // Example tax rate\n    const discount = ref(0);\n    const barcodeError = ref({\n      message: null\n    });\n    const paymentError = ref({\n      message: null\n    });\n    const lastAddedProduct = ref(null);\n    const stockQuantity = ref(null); // Store the stock quantity of the last fetched product\n    const newQuantity = ref(1); // New quantity input for the modal\n    const quantityError = ref(null);\n    const change = ref(null);\n    const clientPayment = ref(null);\n    const products = ref([]);\n    const transactionId = ref('');\n    const transactionError = ref(null);\n    const returnItems = ref([]);\n    const focusedIndex = ref(0);\n    // Computed Variables\n    const total = computed(() => subtotal.value + subtotal.value * VAT.value / 100 - discount.value);\n\n    // Methods\n    const getCategories = async () => {\n      try {\n        const response = await axios.get(`${apiURL}/get_category_list`);\n        categories.value = response.data.categories;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const getProductsByCategory = async categoryName => {\n      try {\n        const response = await axios.get(`${apiURL}/get_products_by_category/${categoryName}`);\n        products.value = response.data.products;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const selectCategory = categoryName => {\n      selectedCategory.value = categoryName; // Update selected category\n      getProductsByCategory(categoryName); // Fetch products for the selected category\n    };\n    const filteredCategories = computed(() => {\n      // Filter products based on the selected category\n      if (selectedCategory.value === 'all') {\n        return categories.value;\n      }\n      return categories.value.filter(category => category.name === selectedCategory.value);\n    });\n    const addProduct = async (product = null) => {\n      try {\n        change.value = null;\n        if (!product) {\n          if (!barcode.value.trim()) {\n            return;\n          }\n          const response = await axios.get(`${apiURL}/get_product_info/${barcode.value.trim()}`);\n          if (response.data.success) {\n            product = response.data.product; // Assign the fetched product\n            barcodeError.value.message = null;\n          } else {\n            barcodeError.value.message = response.data.message || \"Product not found.\";\n            return;\n          }\n        }\n\n        // Store the last added product and its stock quantity\n        lastAddedProduct.value = product;\n        stockQuantity.value = product.quantity;\n\n        // Check if the product is already in the cart\n        const existingItem = cart.value.find(item => item._id === product._id);\n        if (existingItem) {\n          // Increment quantity if product is already in the cart\n          const newTotalQuantity = existingItem.quantity + 1;\n          if (newTotalQuantity <= stockQuantity.value) {\n            existingItem.quantity = newTotalQuantity;\n          } else {\n            barcodeError.value.message = `Maximum stock reached for ${product.name}.`;\n          }\n        } else {\n          // Add product to cart if not already present\n          if (stockQuantity.value > 0) {\n            cart.value.push({\n              ...product,\n              quantity: 1\n            });\n          } else {\n            barcodeError.value.message = `No stock available for ${product.name}.`;\n          }\n        }\n        updateSubtotal(); // Update the subtotal after adding the product\n      } catch (error) {\n        console.error(\"Error adding product:\", error);\n        barcodeError.value.message = \"An error occurred while fetching the product.\";\n      } finally {\n        barcode.value = \"\"; // Clear the barcode input\n      }\n    };\n    const updateSubtotal = () => {\n      subtotal.value = cart.value.reduce((sum, item) => sum + item.quantity * item.price, 0);\n    };\n    const handleKeydown = event => {\n      switch (event.key) {\n        case 'F1':\n          event.preventDefault();\n          openPaymentModal();\n          break;\n        case 'F2':\n          event.preventDefault();\n          openVoidModal(); // open return modal\n          break;\n        case 'F3':\n          event.preventDefault();\n          openReturnModal(); // open return modal\n          break;\n        case 'q':\n          event.preventDefault();\n          openUpdateQuantityModal(); // Open quantity modal\n          break;\n        case 'Escape':\n          // Refocus on the barcode input\n          if (barcodeInput.value) {\n            barcodeInput.value.focus();\n            transactionId.value = ''; // Clear transaction ID\n            returnItems.value = []; // Clear previously selected items\n            transactionError.value = null; // Clear any previous errors\n          }\n          break;\n        default:\n          break;\n      }\n    };\n    const resetTransactions = () => {\n      transactionId.value = '';\n      returnItems.value = [];\n      transactionError.value = null;\n    };\n    const openPaymentModal = () => {\n      if (total.value > 0) {\n        resetTransactions();\n        modalController.show('payment-modal');\n        modalController.focus('payment-modal');\n      }\n    };\n    const openReturnModal = () => {\n      resetTransactions();\n      modalController.show('return-modal');\n      modalController.focus('return-modal');\n      addNavigationListener();\n    };\n    const addNavigationListener = () => {\n      window.addEventListener(\"keydown\", handleKeyNavigation);\n    };\n    const removeNavigationListener = () => {\n      window.removeEventListener(\"keydown\", handleKeyNavigation);\n    };\n    const openVoidModal = () => {\n      resetTransactions();\n      modalController.show('void-transaction-modal');\n      modalController.focus('void-transaction-modal');\n    };\n    const handleModalKeydown = event => {\n      // Check for Enter key\n      if (event.key === 'Enter') {\n        event.preventDefault(); // Prevent default form submission\n        updateProductQuantity(); // Trigger the update function\n      }\n\n      // Check for Escape key\n      if (event.key === 'Escape') {\n        event.preventDefault(); // Prevent default behavior\n        modalController.hide('update-quantity-modal');\n      }\n    };\n    const openUpdateQuantityModal = () => {\n      if (lastAddedProduct.value) {\n        // Open modal to update quantity\n        modalController.show('update-quantity-modal');\n        modalController.focus('update-quantity-modal');\n      } else {\n        barcodeError.value.message = \"No product in cart yet.\";\n      }\n    };\n    const processPayment = async () => {\n      // Validate payment\n      if (clientPayment.value === null || clientPayment.value < total.value) {\n        paymentError.value.message = `Payment must be at least $${total.value}.`;\n        return;\n      }\n      try {\n        // Prepare transaction data\n        const transactionData = {\n          cart: cart.value.map(item => ({\n            _id: item._id,\n            // Product ID\n            sku: item.sku,\n            name: item.name,\n            price: item.price,\n            total: item.total,\n            quantity: item.quantity\n          })),\n          paymentMethod: \"Cash\",\n          // You can dynamically set this\n          discounts: discount.value,\n          netAmount: subtotal.value,\n          VAT: subtotal.value * VAT.value / 100,\n          totalAmount: total.value,\n          cash: clientPayment.value,\n          change: change.value,\n          status: \"Completed\",\n          // Transaction status\n          employee: \"JohnDoe\" // Example employee, replace with actual\n        };\n\n        // Send transaction data to the backend\n        const response = await axios.post(`${apiURL}/commit_transaction`, transactionData);\n        if (response.data.success) {\n          // Backend transaction was successful\n          console.log(\"Transaction saved:\", response.data.transaction);\n\n          // Calculate change\n          change.value = (clientPayment.value - total.value).toFixed(2);\n          clientPayment.value = null;\n          paymentError.value.message = null;\n\n          // Notify the user of successful payment (optional)\n          Swal.fire({\n            title: 'Success!',\n            text: 'Transaction successful.',\n            icon: 'success',\n            timer: 1500,\n            // \n            showConfirmButton: false // Optional: Hide the confirm button\n          });\n\n          // Close the payment modal\n          modalController.hide('payment-modal');\n          cart.value = [];\n          subtotal.value = 0;\n          discount.value = 0;\n        } else {\n          // Backend returned an error\n          paymentError.value.message = response.data.message || \"Failed to process transaction.\";\n          console.error(\"Transaction failed:\", response.data.message);\n        }\n      } catch (error) {\n        // Handle network or server errors\n        console.error(\"Error processing payment:\", error);\n        paymentError.value.message = \"An error occurred while processing the payment. Please try again.\";\n      }\n    };\n    const processVoid = async () => {\n      try {\n        const response = await axios.post(`${apiURL}/void_transaction`, {\n          transactionId: transactionId.value,\n          employee: 'JohnDoe' // Replace with actual employee information\n        });\n        if (response.data.success) {\n          // Display success message\n          Swal.fire({\n            title: 'Voided!',\n            text: 'Transaction has been successfully voided.',\n            icon: 'success',\n            timer: 1500,\n            showConfirmButton: false\n          });\n\n          // Clear transaction ID and close the modal\n          resetTransactions();\n          modalController.hide('void-transaction-modal');\n        } else {\n          // Handle server error messages\n          Swal.fire({\n            title: 'Error',\n            text: response.data.message || 'Failed to void the transaction.',\n            icon: 'error',\n            timer: 2000,\n            showConfirmButton: false\n          });\n        }\n      } catch (error) {\n        // Handle unexpected errors\n        Swal.fire({\n          title: 'Error',\n          text: `An error occurred: ${error.message}`,\n          icon: 'error',\n          timer: 2000,\n          showConfirmButton: false\n        });\n      }\n    };\n    const updateProductQuantity = () => {\n      if (lastAddedProduct.value) {\n        if (newQuantity.value > stockQuantity.value) {\n          quantityError.value = `Stock quantity is only ${stockQuantity.value}. Please enter a valid quantity.`;\n          return;\n        }\n\n        // Update quantity in cart\n        const cartItem = cart.value.find(item => item._id === lastAddedProduct.value._id);\n        if (cartItem) {\n          cartItem.quantity = newQuantity.value;\n        }\n        updateSubtotal();\n        modalController.hide('update-quantity-modal');\n        newQuantity.value = 1;\n        quantityError.value = null;\n\n        // Focus back on the barcode input\n        if (barcodeInput.value) {\n          barcodeInput.value.focus();\n        }\n      }\n    };\n    const fetchTransactionItems = async () => {\n      try {\n        modalController.hide('return-modal');\n        removeNavigationListener();\n\n        // Fetch transaction items from the API\n        const response = await axios.get(`${apiURL}/get_transaction_items/${transactionId.value}`);\n        const {\n          success,\n          cart,\n          totalAmount\n        } = response.data;\n        if (success && cart && Array.isArray(cart)) {\n          // Process the cart items\n          console.log('Transaction cart items:', cart);\n\n          // Populate the returnItems array with the fetched items\n          returnItems.value = cart.map(item => ({\n            _id: item._id,\n            name: item.name,\n            price: item.price,\n            quantity: item.quantity,\n            selected: false,\n            // Add a 'selected' property to track if the item is selected for return\n            returnQuantity: 0 // Initialize return quantity to 0\n          }));\n          modalController.show('select-return-items-modal');\n        } else {\n          console.error('Cart is empty or response structure is incorrect');\n        }\n      } catch (error) {\n        console.error('Error fetching transaction items:', error);\n      }\n    };\n    const processReturn = async () => {\n      try {\n        const itemsToReturn = returnItems.value.filter(item => item.selected && item.returnQuantity > 0);\n        if (itemsToReturn.length === 0) {\n          transactionError.value = 'Please select at least one item to return.';\n          return;\n        }\n\n        // Await the axios call to get the response properly\n        const response = await axios.post(`${apiURL}/return_transaction/${transactionId.value}`, {\n          returnedItems: itemsToReturn,\n          employee: 'JhonDoe'\n        });\n        console.log(response.data); // This will now log the actual response data\n\n        if (response.data.success) {\n          // Update stock and cart\n          itemsToReturn.forEach(item => {\n            const cartItem = cart.value.find(cartItem => cartItem._id === item._id);\n            if (cartItem) {\n              cartItem.quantity -= item.returnQuantity;\n              if (cartItem.quantity <= 0) {\n                const index = cart.value.indexOf(cartItem);\n                cart.value.splice(index, 1); // Remove the item if quantity becomes 0\n              }\n            }\n          });\n\n          // Notify the user of successful payment (optional)\n          Swal.fire({\n            title: 'Returned!',\n            text: 'Transaction successful.',\n            icon: 'success',\n            timer: 1500,\n            // \n            showConfirmButton: false // Optional: Hide the confirm button\n          });\n          modalController.hide('select-return-items-modal');\n          // Clear transaction ID input\n        } else {\n          Swal.fire({\n            title: 'Error',\n            text: response.data.message || 'Failed to process the return.',\n            icon: 'error',\n            timer: 2000,\n            showConfirmButton: false\n          });\n        }\n      } catch (error) {\n        console.error('Error processing return:', error);\n        Swal.fire({\n          title: 'Error',\n          text: 'An error occurred while processing the return. Please try again.',\n          icon: 'error',\n          timer: 2000,\n          showConfirmButton: false\n        });\n      }\n    };\n    const validateReturnQuantity = item => {\n      if (item.returnQuantity > item.quantity) {\n        item.returnQuantity = item.quantity; // Reset to maximum allowed\n      }\n    };\n    const handleKeyNavigation = event => {\n      const items = returnItems.value; // Access the return items\n      if (!items || items.length === 0) return; // Exit if no items are present\n\n      if (event.key === \"ArrowDown\" && focusedIndex.value < items.length - 1) {\n        event.preventDefault(); // Prevent scrolling\n        focusedIndex.value = (focusedIndex.value + 1) % items.length; // Move focus down\n      } else if (event.key === 'ArrowUp' && focusedIndex.value > 0) {\n        event.preventDefault(); // Prevent scrolling\n        focusedIndex.value = (focusedIndex.value - 1 + items.length) % items.length; // Move focus up\n      } else if (event.key === \" \") {\n        event.preventDefault(); // Prevent scrolling\n        const currentItem = items[focusedIndex.value];\n        if (currentItem && currentItem.returnQuantity > 0) {\n          // Only allow selection if returnQuantity > 0\n          currentItem.selected = !currentItem.selected;\n        }\n      } else if (event.key === \"Enter\") {\n        event.preventDefault(); // Prevent default behavior\n        // Process return only if at least one item is selected\n        if (items.some(item => item.selected)) {\n          processReturn();\n        } else {\n          transactionError.value = \"Please select at least one item to return.\";\n        }\n      }\n\n      // Trigger autofocus on the input when moving focus\n      const focusedInput = document.querySelector(`#select-return-items-modal .focused input[type=\"number\"]`);\n      if (focusedInput) {\n        focusedInput.focus();\n      }\n    };\n\n    // Assuming `processReturn` and `transactionError` are defined somewhere in your code.\n\n    // Lifecycle Hooks\n    onMounted(() => {\n      getCategories();\n      if (barcodeInput.value) {\n        barcodeInput.value.focus();\n      }\n      window.addEventListener('keydown', handleKeydown); // Listen to keydown events\n    });\n    onBeforeUnmount(() => {\n      window.removeEventListener('keydown', handleKeydown);\n    });\n\n    // Return Variables and Methods\n    return {\n      categories,\n      selectedCategory,\n      barcode,\n      barcodeInput,\n      cart,\n      subtotal,\n      VAT,\n      discount,\n      total,\n      barcodeError,\n      lastAddedProduct,\n      stockQuantity,\n      newQuantity,\n      quantityError,\n      addProduct,\n      updateProductQuantity,\n      handleModalKeydown,\n      focusedIndex,\n      handleKeyNavigation,\n      validateReturnQuantity,\n      change,\n      clientPayment,\n      paymentError,\n      selectCategory,\n      products,\n      imgURL,\n      transactionId,\n      transactionError,\n      returnItems,\n      fetchTransactionItems,\n      processReturn,\n      processVoid,\n      openPaymentModal,\n      openVoidModal,\n      openReturnModal,\n      processPayment\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","onBeforeUnmount","modalController","axios","setup","apiURL","process","env","VUE_APP_URL","imgURL","VUE_APP_IMAGE_URL","selectedCategory","barcode","barcodeInput","cart","categories","subtotal","VAT","discount","barcodeError","message","paymentError","lastAddedProduct","stockQuantity","newQuantity","quantityError","change","clientPayment","products","transactionId","transactionError","returnItems","focusedIndex","total","value","getCategories","response","get","data","error","console","getProductsByCategory","categoryName","selectCategory","filteredCategories","filter","category","name","addProduct","product","trim","success","quantity","existingItem","find","item","_id","newTotalQuantity","push","updateSubtotal","reduce","sum","price","handleKeydown","event","key","preventDefault","openPaymentModal","openVoidModal","openReturnModal","openUpdateQuantityModal","focus","resetTransactions","show","addNavigationListener","window","addEventListener","handleKeyNavigation","removeNavigationListener","removeEventListener","handleModalKeydown","updateProductQuantity","hide","processPayment","transactionData","map","sku","paymentMethod","discounts","netAmount","totalAmount","cash","status","employee","post","log","transaction","toFixed","Swal","fire","title","text","icon","timer","showConfirmButton","processVoid","cartItem","fetchTransactionItems","Array","isArray","selected","returnQuantity","processReturn","itemsToReturn","length","returnedItems","forEach","index","indexOf","splice","validateReturnQuantity","items","currentItem","some","focusedInput","document","querySelector"],"sources":["C:\\Users\\Administrator\\OneDrive\\Desktop\\POSExpress\\frontend\\src\\components\\Apps\\POS.vue"],"sourcesContent":["<template>\r\n  <div class=\"main-wrapper\">\r\n    <div class=\"header\">\r\n      <h1>POSExpress</h1>\r\n    </div>\r\n\r\n    <div class=\"page-wrapper pos-pg-wrapper ms-0\">\r\n      <div class=\"content pos-design p-0\">\r\n        <div class=\"row align-items-start pos-wrapper\">\r\n          <div class=\"col-md-3 col-lg-2 \">\r\n            <div class=\"category-list\">\r\n              <h5>Categories</h5>\r\n              <ul class=\"list-group text-center overflow-auto\"\r\n                style=\"max-height:80vh; overflow-y: auto; scrollbar-width: thin;\">\r\n                <li v-for=\"category in categories\" :key=\"category.name\" class=\"list-group-item\"\r\n                  :class=\"{ 'active': selectedCategory === category.name }\" @click=\"selectCategory(category.name)\">\r\n                  <a href=\"javascript:void(0);\">{{ category.name }}</a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n\r\n\r\n\r\n          <!-- Product Display -->\r\n          <div class=\"col-md-12 col-lg-6\">\r\n            <div class=\"row bg-white px-4 pb-5 mx-3 mt-2\">\r\n              <h4>Enter Barcode:</h4>\r\n              <input v-model=\"barcode\" ref=\"barcodeInput\"\r\n                class=\"form-control bg-light border border-dark fs-1 mb-2 mt-3\" type=\"text\" @keyup.enter=\"addProduct()\"\r\n                placeholder=\"Scan Barcode\" />\r\n              <p v-if=\"barcodeError.message\" class=\"text-danger\">ERROR: {{ barcodeError.message }}</p>\r\n\r\n            </div>\r\n            <div class=\"pos-wrapper\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12 col-lg-12\">\r\n                  <div class=\"pos-products\">\r\n                    <div class=\"tabs_container\">\r\n                      <!-- Display products based on selected category -->\r\n                      <div v-if=\"products.length\" class=\"tab_content active\">\r\n                        <div class=\"row\">\r\n                          <div v-for=\"product in products\" :key=\"product.id\"\r\n                            class=\"col-sm-3 col-md-3 col-lg-3 col-xl-3 col-3 product-item\">\r\n                            <div class=\"product-info default-cover card\" @click=\"addProduct(product)\">\r\n                              <a href=\"javascript:void(0);\" class=\"img-bg\">\r\n                                <img v-if=\"product.image\" :src=\"`${imgURL}${product.image}`\" alt=\"Product\" />\r\n                                <img v-else :src=\"`/img/icons/no-image-icon.png`\" />\r\n                                <span><i data-feather=\"check\"></i></span>\r\n                              </a>\r\n                              <h6 class=\"product-name\">\r\n                                <a href=\"javascript:void(0);\">{{ product.name }}</a>\r\n                              </h6>\r\n                              <div class=\"d-flex align-items-center justify-content-between price\">\r\n                                <span>Stock: {{ product.quantity }}</span>\r\n                                <p>${{ product.price }}</p>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n\r\n                        </div>\r\n                      </div>\r\n\r\n                      <!-- If no products, show a message -->\r\n                      <div v-else class=\"no-products-message\">\r\n                        <p>No products available in this category.</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Order List and Summary -->\r\n          <div class=\"col-md-12 col-lg-4 ps-0\">\r\n  <aside class=\"custom-product-order-list\">\r\n    <h6>Order List</h6>\r\n    <div class=\"custom-product-added\">\r\n      <div class=\"custom-product-wrap\">\r\n        <table class=\"custom-table custom-table-responsive\">\r\n          <thead>\r\n            <tr>\r\n              <th>Product</th>\r\n              <th>Price</th>\r\n              <th>Quantity</th>\r\n              <th>Total</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"item in cart\" :key=\"item.id\">\r\n              <td>{{ item.name }}</td>\r\n              <td>{{ item.price }}</td>\r\n              <td>{{ item.quantity }}</td>\r\n              <td>{{ item.quantity * item.price }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    <div class=\"order-summary\">\r\n      <h6>Order Summary</h6>\r\n      <table class=\"table\">\r\n        <tr>\r\n          <td>Sub Total</td>\r\n          <td class=\"text-end\">${{ subtotal }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>VAT</td>\r\n          <td class=\"text-end\">{{ VAT }}%</td>\r\n        </tr>\r\n        <tr>\r\n          <td class=\"danger\">Discount</td>\r\n          <td class=\"danger text-end\">${{ discount }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td class=\"fs-5 fw-bolder\">Total</td>\r\n          <td class=\"text-end fs-5 fw-bolder\">{{ total.toFixed(2) }}</td>\r\n        </tr>\r\n        <tr v-if=\"change\">\r\n          <td class=\"fs-5 fw-bolder text-danger\">Change</td>\r\n          <td class=\"text-end fs-5 fw-bolder text-danger\">{{ change }}</td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n\r\n  </aside>\r\n  <div class=\"btn-row d-sm-flex align-items-center justify-content-between mb-3\">\r\n      <a href=\"javascript:void(0);\" class=\"btn btn-success btn-icon flex-fill position-relative p-3 fs-6\" @click=\"openPaymentModal\">\r\n        <span class=\"keyboard-key\">F1</span>\r\n        <span class=\"me-1 d-flex align-items-center\">\r\n          <i data-feather=\"credit-card\" class=\"feather-16\"></i>\r\n        </span>Pay\r\n      </a>\r\n      <a href=\"javascript:void(0);\" class=\"btn btn-danger btn-icon flex-fill position-relative p-3 fs-6\" @click=\"openVoidModal\">\r\n        <span class=\"keyboard-key\">F2</span>\r\n        <span class=\"me-1 d-flex align-items-center\">\r\n          <i data-feather=\"trash-2\" class=\"feather-16\"></i>\r\n        </span>Void\r\n      </a>\r\n      <a href=\"javascript:void(0);\" class=\"btn btn-info btn-icon flex-fill position-relative p-3 fs-6\" @click=\"openReturnModal\">\r\n        <span class=\"keyboard-key\">F3</span>\r\n        <span class=\"me-1 d-flex align-items-center\">\r\n          <i data-feather=\"corner-up-right\" class=\"feather-16\"></i>\r\n        </span>Return\r\n      </a>\r\n    </div>\r\n</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!-- Modal for Updating Quantity -->\r\n  <div class=\"modal fade\" id=\"update-quantity-modal\" tabindex=\"-1\" aria-labelledby=\"update-quantity-modalLabel\"\r\n    aria-hidden=\"true\">\r\n    <div class=\"modal-dialog modal-dialog-centered\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\" id=\"update-quantity-modalLabel\">Update Quantity</h5>\r\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div class=\"form-group\">\r\n            <label for=\"new-quantity\">Quantity</label>\r\n            <input type=\"number\" id=\"new-quantity\" class=\"form-control\" v-model=\"newQuantity\" min=\"1\"\r\n              @keydown=\"handleModalKeydown\" />\r\n          </div>\r\n          <p v-if=\"quantityError\" class=\"text-danger\">{{ quantityError }}</p>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n          <button type=\"button\" class=\"btn btn-primary\" @click=\"updateProductQuantity\">Update</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Modal for Payment -->\r\n  <div class=\"modal fade\" id=\"payment-modal\" tabindex=\"-1\" aria-labelledby=\"payment-modalLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog modal-dialog-centered\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\" id=\"payment-modalLabel\">Payment</h5>\r\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div class=\"form-group\">\r\n            <label for=\"payment\">Amount to Pay: ${{ total }}</label>\r\n            <input type=\"number\" id=\"payment\" class=\"form-control\" v-model=\"clientPayment\" min=\"1\"\r\n              @keydown.enter=\"processPayment\" placeholder=\"Enter payment amount\" />\r\n          </div>\r\n          <p v-if=\"paymentError.message\" class=\"text-danger\">{{ paymentError.message }}</p>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n          <button type=\"button\" class=\"btn btn-primary\" @click=\"processPayment\">Process Payment</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"modal fade\" id=\"return-modal\" tabindex=\"-1\" aria-labelledby=\"return-modalLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog modal-dialog-centered\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\" id=\"return-modalLabel\">Enter Transaction ID for Return</h5>\r\n          <button type=\"button\" class=\"btn-close\" id=\"return-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <input v-model=\"transactionId\" class=\"form-control\" type=\"text\" placeholder=\"Transaction ID\"\r\n            @keydown.enter=\"fetchTransactionItems\" />\r\n          <p v-if=\"transactionError\" class=\"text-danger\">{{ transactionError }}</p>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n          <button type=\"button\" class=\"btn btn-primary\" @click=\"fetchTransactionItems\">Fetch Items</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Modal for Return Item Selection -->\r\n  <div class=\"modal fade\" id=\"select-return-items-modal\" tabindex=\"-1\" aria-labelledby=\"select-return-items-modalLabel\"\r\n    aria-hidden=\"true\">\r\n    <div class=\"modal-dialog modal-dialog-centered\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\" id=\"select-return-items-modalLabel\">Select Items for Return</h5>\r\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <table class=\"table\" tabindex=\"0\" @keydown=\"handleKeyNavigation\">\r\n            <thead>\r\n              <tr>\r\n                <th>Select</th>\r\n                <th>Product</th>\r\n                <th>Quantity</th>\r\n                <th>Return Quantity</th>\r\n                <th>Price</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(item, index) in returnItems\" :key=\"item._id\" :class=\"{ focused: index === focusedIndex }\">\r\n                <td>\r\n                  <input type=\"checkbox\" v-model=\"item.selected\" />\r\n                </td>\r\n                <td>{{ item.name }}</td>\r\n                <td>{{ item.quantity }}</td>\r\n                <td>\r\n                  <input type=\"number\" v-model=\"item.returnQuantity\" :max=\"item.quantity\" min=\"1\"\r\n                    :autofocus=\"index === focusedIndex\" @input=\"validateReturnQuantity(item)\" />\r\n                </td>\r\n                <td>${{ item.price }}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n          <button type=\"button\" class=\"btn btn-primary\" @click=\"processReturn\">Process Return</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Void Transaction Modal -->\r\n  <div class=\"modal fade\" id=\"void-transaction-modal\" tabindex=\"-1\" aria-labelledby=\"voidTransactionModalLabel\"\r\n    aria-hidden=\"true\">\r\n    <div class=\"modal-dialog modal-dialog-centered\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\" id=\"voidTransactionModalLabel\">Void Transaction</h5>\r\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <form @submit.prevent=\"processVoid\">\r\n            <div class=\"mb-3\">\r\n              <label for=\"transaction-id\" class=\"form-label\">Transaction ID</label>\r\n              <input type=\"text\" id=\"transaction-id\" class=\"form-control\" v-model=\"transactionId\"\r\n                placeholder=\"Enter Transaction ID\" required>\r\n            </div>\r\n            <p v-if=\"transactionError\" class=\"text-danger\">{{ transactionError }}</p>\r\n          </form>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n          <button type=\"button\" class=\"btn btn-danger\" @click=\"processVoid\">Void Transaction</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n</template>\r\n<script>\r\nimport { ref, computed, onMounted, onBeforeUnmount } from 'vue';\r\nimport { modalController } from '@/utils/modalController';\r\nimport axios from 'axios';\r\nimport 'sweetalert2'\r\n\r\nexport default {\r\n  setup() {\r\n    // Reactive Variables\r\n    const apiURL = process.env.VUE_APP_URL;\r\n    const imgURL = process.env.VUE_APP_IMAGE_URL;\r\n    const selectedCategory = ref('all');\r\n    const barcode = ref('');\r\n    const barcodeInput = ref(null);\r\n    const cart = ref([]);\r\n    const categories = ref([]);\r\n    const subtotal = ref(0);\r\n    const VAT = ref(12); // Example tax rate\r\n    const discount = ref(0);\r\n    const barcodeError = ref({ message: null });\r\n    const paymentError = ref({ message: null });\r\n    const lastAddedProduct = ref(null);\r\n    const stockQuantity = ref(null); // Store the stock quantity of the last fetched product\r\n    const newQuantity = ref(1); // New quantity input for the modal\r\n    const quantityError = ref(null);\r\n    const change = ref(null);\r\n    const clientPayment = ref(null);\r\n    const products = ref([]);\r\n    const transactionId = ref('');\r\n    const transactionError = ref(null);\r\n    const returnItems = ref([]);\r\n    const focusedIndex= ref(0);\r\n    // Computed Variables\r\n    const total = computed(() =>\r\n      subtotal.value + (subtotal.value * VAT.value) / 100 - discount.value\r\n    );\r\n\r\n    // Methods\r\n    const getCategories = async () => {\r\n      try {\r\n        const response = await axios.get(`${apiURL}/get_category_list`);\r\n        categories.value = response.data.categories;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    const getProductsByCategory = async (categoryName) => {\r\n      try {\r\n        const response = await axios.get(`${apiURL}/get_products_by_category/${categoryName}`);\r\n        products.value = response.data.products;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    const selectCategory = (categoryName) => {\r\n      selectedCategory.value = categoryName; // Update selected category\r\n      getProductsByCategory(categoryName); // Fetch products for the selected category\r\n    };\r\n\r\n\r\n    const filteredCategories = computed(() => {\r\n      // Filter products based on the selected category\r\n      if (selectedCategory.value === 'all') {\r\n        return categories.value;\r\n      }\r\n      return categories.value.filter(category => category.name === selectedCategory.value);\r\n    });\r\n\r\n\r\n    const addProduct = async (product = null) => {\r\n      try {\r\n        change.value = null;\r\n\r\n\r\n        if (!product) {\r\n          if (!barcode.value.trim()) {\r\n            return;\r\n          }\r\n\r\n          const response = await axios.get(`${apiURL}/get_product_info/${barcode.value.trim()}`);\r\n          if (response.data.success) {\r\n            product = response.data.product; // Assign the fetched product\r\n            barcodeError.value.message = null;\r\n          } else {\r\n            barcodeError.value.message = response.data.message || \"Product not found.\";\r\n            return;\r\n          }\r\n        }\r\n\r\n        // Store the last added product and its stock quantity\r\n        lastAddedProduct.value = product;\r\n        stockQuantity.value = product.quantity;\r\n\r\n        // Check if the product is already in the cart\r\n        const existingItem = cart.value.find((item) => item._id === product._id);\r\n\r\n        if (existingItem) {\r\n          // Increment quantity if product is already in the cart\r\n          const newTotalQuantity = existingItem.quantity + 1;\r\n          if (newTotalQuantity <= stockQuantity.value) {\r\n            existingItem.quantity = newTotalQuantity;\r\n          } else {\r\n            barcodeError.value.message = `Maximum stock reached for ${product.name}.`;\r\n          }\r\n        } else {\r\n          // Add product to cart if not already present\r\n          if (stockQuantity.value > 0) {\r\n            cart.value.push({ ...product, quantity: 1 });\r\n          } else {\r\n            barcodeError.value.message = `No stock available for ${product.name}.`;\r\n          }\r\n        }\r\n\r\n        updateSubtotal(); // Update the subtotal after adding the product\r\n      } catch (error) {\r\n        console.error(\"Error adding product:\", error);\r\n        barcodeError.value.message = \"An error occurred while fetching the product.\";\r\n      } finally {\r\n        barcode.value = \"\"; // Clear the barcode input\r\n      }\r\n    };\r\n\r\n\r\n    const updateSubtotal = () => {\r\n      subtotal.value = cart.value.reduce((sum, item) => sum + item.quantity * item.price, 0);\r\n    };\r\n\r\n    const handleKeydown = (event) => {\r\n      switch (event.key) {\r\n        case 'F1':\r\n          event.preventDefault();\r\n          openPaymentModal();\r\n          break;\r\n        case 'F2':\r\n          event.preventDefault();\r\n          openVoidModal(); // open return modal\r\n          break;\r\n        case 'F3':\r\n          event.preventDefault();\r\n          openReturnModal(); // open return modal\r\n          break;\r\n        case 'q':\r\n          event.preventDefault();\r\n          openUpdateQuantityModal(); // Open quantity modal\r\n          break;\r\n        case 'Escape':\r\n          // Refocus on the barcode input\r\n          if (barcodeInput.value) {\r\n            barcodeInput.value.focus();\r\n            transactionId.value = ''; // Clear transaction ID\r\n            returnItems.value = []; // Clear previously selected items\r\n            transactionError.value = null; // Clear any previous errors\r\n          }\r\n\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n    const resetTransactions = () => {\r\n      transactionId.value = '';\r\n      returnItems.value = [];\r\n      transactionError.value = null;\r\n    }\r\n\r\n    const openPaymentModal = () => {\r\n      if (total.value > 0) {\r\n        resetTransactions();\r\n        modalController.show('payment-modal');\r\n        modalController.focus('payment-modal');\r\n      }\r\n\r\n    };\r\n\r\n    const openReturnModal = () => {\r\n      resetTransactions();\r\n      modalController.show('return-modal');\r\n      modalController.focus('return-modal');\r\n      addNavigationListener();\r\n    };\r\n    const addNavigationListener = () => {\r\n  window.addEventListener(\"keydown\", handleKeyNavigation);\r\n};\r\n\r\nconst removeNavigationListener = () => {\r\n  window.removeEventListener(\"keydown\", handleKeyNavigation);\r\n};\r\n\r\n    const openVoidModal = () => {\r\n      resetTransactions();\r\n      modalController.show('void-transaction-modal');\r\n      modalController.focus('void-transaction-modal');\r\n    };\r\n\r\n\r\n\r\n    const handleModalKeydown = (event) => {\r\n      // Check for Enter key\r\n      if (event.key === 'Enter') {\r\n        event.preventDefault(); // Prevent default form submission\r\n        updateProductQuantity(); // Trigger the update function\r\n      }\r\n\r\n      // Check for Escape key\r\n      if (event.key === 'Escape') {\r\n        event.preventDefault(); // Prevent default behavior\r\n        modalController.hide('update-quantity-modal')\r\n      }\r\n\r\n    };\r\n\r\n    const openUpdateQuantityModal = () => {\r\n      if (lastAddedProduct.value) {\r\n        // Open modal to update quantity\r\n        modalController.show('update-quantity-modal');\r\n        modalController.focus('update-quantity-modal');\r\n      } else {\r\n        barcodeError.value.message = \"No product in cart yet.\";\r\n      }\r\n    };\r\n    const processPayment = async () => {\r\n      // Validate payment\r\n      if (clientPayment.value === null || clientPayment.value < total.value) {\r\n        paymentError.value.message = `Payment must be at least $${total.value}.`;\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // Prepare transaction data\r\n        const transactionData = {\r\n          cart: cart.value.map((item) => ({\r\n            _id: item._id, // Product ID\r\n            sku: item.sku,\r\n            name: item.name,\r\n            price: item.price,\r\n            total: item.total,\r\n            quantity: item.quantity,\r\n          })),\r\n          paymentMethod: \"Cash\", // You can dynamically set this\r\n          discounts: discount.value,\r\n          netAmount: subtotal.value,\r\n          VAT: (subtotal.value * VAT.value) / 100,\r\n          totalAmount: total.value,\r\n          cash: clientPayment.value,\r\n          change: change.value,\r\n          status: \"Completed\", // Transaction status\r\n          employee: \"JohnDoe\", // Example employee, replace with actual\r\n        };\r\n\r\n        // Send transaction data to the backend\r\n        const response = await axios.post(`${apiURL}/commit_transaction`, transactionData);\r\n\r\n        if (response.data.success) {\r\n          // Backend transaction was successful\r\n          console.log(\"Transaction saved:\", response.data.transaction);\r\n\r\n          // Calculate change\r\n          change.value = (clientPayment.value - total.value).toFixed(2);\r\n\r\n\r\n          clientPayment.value = null;\r\n          paymentError.value.message = null;\r\n\r\n          // Notify the user of successful payment (optional)\r\n          Swal.fire({\r\n            title: 'Success!',\r\n            text: 'Transaction successful.',\r\n            icon: 'success',\r\n            timer: 1500, // \r\n            showConfirmButton: false // Optional: Hide the confirm button\r\n          });\r\n\r\n          // Close the payment modal\r\n          modalController.hide('payment-modal')\r\n          cart.value = [];\r\n          subtotal.value = 0;\r\n          discount.value = 0;\r\n\r\n        } else {\r\n          // Backend returned an error\r\n          paymentError.value.message = response.data.message || \"Failed to process transaction.\";\r\n          console.error(\"Transaction failed:\", response.data.message);\r\n        }\r\n      } catch (error) {\r\n        // Handle network or server errors\r\n        console.error(\"Error processing payment:\", error);\r\n        paymentError.value.message = \"An error occurred while processing the payment. Please try again.\";\r\n      }\r\n    };\r\n\r\n\r\n    const processVoid = async () => {\r\n      try {\r\n        const response = await axios.post(`${apiURL}/void_transaction`, {\r\n          transactionId: transactionId.value,\r\n          employee: 'JohnDoe' // Replace with actual employee information\r\n        });\r\n\r\n        if (response.data.success) {\r\n          // Display success message\r\n          Swal.fire({\r\n            title: 'Voided!',\r\n            text: 'Transaction has been successfully voided.',\r\n            icon: 'success',\r\n            timer: 1500,\r\n            showConfirmButton: false\r\n          });\r\n\r\n          // Clear transaction ID and close the modal\r\n          resetTransactions();\r\n          modalController.hide('void-transaction-modal');\r\n        } else {\r\n          // Handle server error messages\r\n          Swal.fire({\r\n            title: 'Error',\r\n            text: response.data.message || 'Failed to void the transaction.',\r\n            icon: 'error',\r\n            timer: 2000,  \r\n            showConfirmButton: false \r\n\r\n          });\r\n        }\r\n      } catch (error) {\r\n        // Handle unexpected errors\r\n        Swal.fire({\r\n          title: 'Error',\r\n          text: `An error occurred: ${error.message}`,\r\n          icon: 'error',\r\n          timer: 2000,  \r\n          showConfirmButton: false \r\n\r\n        });\r\n      }\r\n    };\r\n\r\n\r\n    const updateProductQuantity = () => {\r\n      if (lastAddedProduct.value) {\r\n        if (newQuantity.value > stockQuantity.value) {\r\n          quantityError.value = `Stock quantity is only ${stockQuantity.value}. Please enter a valid quantity.`;\r\n          return;\r\n        }\r\n\r\n        // Update quantity in cart\r\n        const cartItem = cart.value.find((item) => item._id === lastAddedProduct.value._id);\r\n        if (cartItem) {\r\n          cartItem.quantity = newQuantity.value;\r\n        }\r\n\r\n        updateSubtotal();\r\n\r\n        modalController.hide('update-quantity-modal');\r\n        newQuantity.value = 1;\r\n        quantityError.value = null;\r\n\r\n        // Focus back on the barcode input\r\n        if (barcodeInput.value) {\r\n          barcodeInput.value.focus();\r\n        }\r\n      }\r\n    };\r\n    const fetchTransactionItems = async () => {\r\n      try {\r\n        modalController.hide('return-modal');\r\n        removeNavigationListener(); \r\n\r\n        // Fetch transaction items from the API\r\n        const response = await axios.get(`${apiURL}/get_transaction_items/${transactionId.value}`);\r\n        const { success, cart, totalAmount } = response.data;\r\n\r\n        if (success && cart && Array.isArray(cart)) {\r\n          // Process the cart items\r\n          console.log('Transaction cart items:', cart);\r\n\r\n          // Populate the returnItems array with the fetched items\r\n          returnItems.value = cart.map(item => ({\r\n            _id: item._id,\r\n            name: item.name,\r\n            price: item.price,\r\n            quantity: item.quantity,\r\n            selected: false, // Add a 'selected' property to track if the item is selected for return\r\n            returnQuantity: 0, // Initialize return quantity to 0\r\n          }));\r\n\r\n          modalController.show('select-return-items-modal')\r\n        } else {\r\n          console.error('Cart is empty or response structure is incorrect');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching transaction items:', error);\r\n      }\r\n    };\r\n\r\n    const processReturn = async () => {\r\n      try {\r\n        const itemsToReturn = returnItems.value.filter(item => item.selected && item.returnQuantity > 0);\r\n\r\n        if (itemsToReturn.length === 0) {\r\n          transactionError.value = 'Please select at least one item to return.';\r\n          return;\r\n        }\r\n\r\n        // Await the axios call to get the response properly\r\n        const response = await axios.post(`${apiURL}/return_transaction/${transactionId.value}`, {\r\n          returnedItems: itemsToReturn,\r\n          employee: 'JhonDoe'\r\n        });\r\n\r\n        console.log(response.data); // This will now log the actual response data\r\n\r\n        if (response.data.success) {\r\n          // Update stock and cart\r\n          itemsToReturn.forEach(item => {\r\n            const cartItem = cart.value.find(cartItem => cartItem._id === item._id);\r\n            if (cartItem) {\r\n              cartItem.quantity -= item.returnQuantity;\r\n              if (cartItem.quantity <= 0) {\r\n                const index = cart.value.indexOf(cartItem);\r\n                cart.value.splice(index, 1); // Remove the item if quantity becomes 0\r\n              }\r\n            }\r\n          });\r\n\r\n          // Notify the user of successful payment (optional)\r\n          Swal.fire({\r\n            title: 'Returned!',\r\n            text: 'Transaction successful.',\r\n            icon: 'success',\r\n            timer: 1500, // \r\n            showConfirmButton: false // Optional: Hide the confirm button\r\n          });\r\n\r\n          modalController.hide('select-return-items-modal')\r\n          // Clear transaction ID input\r\n\r\n        } else {\r\n          Swal.fire({\r\n            title: 'Error',\r\n            text: response.data.message || 'Failed to process the return.',\r\n            icon: 'error',\r\n            timer: 2000,  \r\n            showConfirmButton: false \r\n\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error processing return:', error);\r\n        Swal.fire({\r\n          title: 'Error',\r\n          text: 'An error occurred while processing the return. Please try again.',\r\n          icon: 'error',\r\n          timer: 2000,  \r\n          showConfirmButton: false \r\n\r\n        });\r\n      }\r\n    };\r\n\r\n    const validateReturnQuantity = (item) => {\r\n    if (item.returnQuantity > item.quantity) {\r\n      item.returnQuantity = item.quantity; // Reset to maximum allowed\r\n    }\r\n  }\r\n  \r\n\r\n\r\n\r\n  const handleKeyNavigation = (event) => { \r\n  const items = returnItems.value; // Access the return items\r\n  if (!items || items.length === 0) return; // Exit if no items are present\r\n\r\n  if (event.key === \"ArrowDown\" && focusedIndex.value < items.length - 1) {\r\n    event.preventDefault(); // Prevent scrolling\r\n    focusedIndex.value = (focusedIndex.value + 1) % items.length; // Move focus down\r\n  } else if (event.key === 'ArrowUp' && focusedIndex.value > 0) {\r\n    event.preventDefault(); // Prevent scrolling\r\n    focusedIndex.value = (focusedIndex.value - 1 + items.length) % items.length; // Move focus up\r\n  } else if (event.key === \" \") {\r\n    event.preventDefault(); // Prevent scrolling\r\n    const currentItem = items[focusedIndex.value];\r\n    if (currentItem && currentItem.returnQuantity > 0) {\r\n      // Only allow selection if returnQuantity > 0\r\n      currentItem.selected = !currentItem.selected;\r\n    }\r\n  } else if (event.key === \"Enter\") {\r\n    event.preventDefault(); // Prevent default behavior\r\n    // Process return only if at least one item is selected\r\n    if (items.some((item) => item.selected)) {\r\n      processReturn();\r\n    } else {\r\n      transactionError.value = \"Please select at least one item to return.\";\r\n    }\r\n  }\r\n\r\n  // Trigger autofocus on the input when moving focus\r\n  const focusedInput = document.querySelector(`#select-return-items-modal .focused input[type=\"number\"]`);\r\n  if (focusedInput) {\r\n    focusedInput.focus();\r\n  }\r\n};\r\n\r\n// Assuming `processReturn` and `transactionError` are defined somewhere in your code.\r\n\r\n    // Lifecycle Hooks\r\n    onMounted(() => {\r\n      getCategories();\r\n      if (barcodeInput.value) {\r\n        barcodeInput.value.focus();\r\n      }\r\n\r\n      window.addEventListener('keydown', handleKeydown); // Listen to keydown events\r\n    });\r\n\r\n    onBeforeUnmount(() => {\r\n      window.removeEventListener('keydown', handleKeydown);\r\n    });\r\n\r\n    // Return Variables and Methods\r\n    return {\r\n      categories,\r\n      selectedCategory,\r\n      barcode,\r\n      barcodeInput,\r\n      cart,\r\n      subtotal,\r\n      VAT,\r\n      discount,\r\n      total,\r\n      barcodeError,\r\n      lastAddedProduct,\r\n      stockQuantity,\r\n      newQuantity,\r\n      quantityError,\r\n      addProduct,\r\n      updateProductQuantity,\r\n      handleModalKeydown,\r\n      focusedIndex,\r\n      handleKeyNavigation,\r\n      validateReturnQuantity,\r\n      change,\r\n      clientPayment,\r\n      paymentError,\r\n      selectCategory,\r\n      products,\r\n      imgURL,\r\n      transactionId,\r\n      transactionError,\r\n      returnItems,\r\n      fetchTransactionItems,\r\n      processReturn,\r\n      processVoid,\r\n      openPaymentModal,\r\n      openVoidModal,\r\n      openReturnModal,\r\n      processPayment\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n/* Container for the product display */\r\n.tabs_container {\r\n  min-height: 620px;\r\n  max-height: 620px;\r\n  overflow-y: auto;\r\n  background: #fff;\r\n  padding: 20px;\r\n\r\n}\r\n.focused {\r\n\r\n  background-color: #f0f8ff; /* Light blue */\r\n  outline: 2px solid #007bff; /* Optional for extra visibility */\r\n}\r\n\r\n/* Flex container for product display */\r\n.tab_content {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n  /* Space between items */\r\n  justify-content: space-between;\r\n}\r\n\r\n/* Ensure product-info fits within columns properly */\r\n.product-info {\r\n  position: relative;\r\n  padding: 15px;\r\n  background: #f9f9f9;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  transition: transform 0.2s ease-in-out;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  /* Optional shadow */\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  /* Flex to ensure each card takes equal width */\r\n  flex: 1 1 calc(33.33% - 1rem);\r\n  /* Default to 3 items per row */\r\n  height: 100%;\r\n\r\n}\r\n\r\n.product-info img {\r\n  width: 100%;\r\n  height: 150px;\r\n  /* Fixed height for images */\r\n  object-fit: cover;\r\n  /* Ensure images cover the area proportionally */\r\n}\r\n\r\n.product-info:hover {\r\n  transform: scale(1.05);\r\n  /* Slight zoom effect on hover */\r\n}\r\n\r\n/* Mobile and tablet adjustments for card layout */\r\n@media (max-width: 1200px) {\r\n  .product-info {\r\n    flex: 1 1 calc(25% - 1rem);\r\n    /* 4 items per row for large screens */\r\n    height: 300px;\r\n    /* Set height for large screens */\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .product-info {\r\n    flex: 1 1 calc(33.33% - 1rem);\r\n    /* 3 items per row for medium screens */\r\n    height: 250px;\r\n    /* Adjust height for medium screens */\r\n  }\r\n}\r\n\r\n@media (max-width: 576px) {\r\n  .product-info {\r\n    flex: 1 1 calc(50% - 1rem);\r\n    /* 2 items per row for small screens */\r\n    height: 200px;\r\n    /* Adjust height for small screens */\r\n  }\r\n}\r\n\r\n/* Category List Styling */\r\n.category-list {\r\n  padding: 15px;\r\n  background-color: #f9f9f9;\r\n\r\n}\r\n\r\n.category-list ul {\r\n  list-style-type: none;\r\n  padding-left: 0;\r\n}\r\n\r\n.category-list li {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.category-list a {\r\n  text-decoration: none;\r\n  color: #333;\r\n  font-size: 16px;\r\n  padding: 8px 10px;\r\n  border-radius: 4px;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.category-list a:active {\r\n  color: #fff;\r\n}\r\n\r\n.category-list a:hover {\r\n  color: #fff;\r\n\r\n}\r\n\r\n.list-group-item.active {\r\n  background-color: #22A95E;\r\n  /* Green background for active list item */\r\n  border-color: #22A95E;\r\n  /* Optional: Match border with the active color */\r\n}\r\n\r\n.list-group-item.active a {\r\n  color: #fff;\r\n  /* Make the text white inside the active list item */\r\n}\r\n\r\n/* Keyboard Key Styling for the UI */\r\n.keyboard-key {\r\n  position: absolute;\r\n  top: 5px;\r\n  left: 5px;\r\n  font-size: 12px;\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n  color: white;\r\n  padding: 5px 8px;\r\n  border-radius: 4px;\r\n  font-family: 'Courier New', monospace;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.order-summary h6 {\r\n  margin-top: 0; /* Remove extra top margin */\r\n  margin-bottom: 8px; /* Add a small space below the heading */\r\n}\r\n\r\n.order-summary .table {\r\n  margin-top: 0; /* Remove extra top margin */\r\n  margin-bottom: 0; /* Remove extra bottom margin */\r\n}\r\n\r\n.order-summary .table tr {\r\n  margin-top: 0; /* Remove any top margin for rows */\r\n  margin-bottom: 0; /* Remove any bottom margin for rows */\r\n}\r\n\r\n.order-summary .table td {\r\n  padding-top: 4px; /* Adjust top padding for cells */\r\n  padding-bottom: 4px; /* Adjust bottom padding for cells */\r\n}\r\n\r\n\r\n/* Custom Product Order List */\r\n/* Custom Product Order List */\r\n.custom-product-order-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%; /* Ensures the parent container takes up available space */\r\n}\r\n\r\n/* Custom Product Added Section */\r\n.custom-product-order-list .custom-product-added {\r\n  flex: 1;\r\n  margin-bottom: 1rem;\r\n  overflow: hidden; /* Prevents scrolling when content overflows */\r\n}\r\n\r\n/* Custom Table */\r\n.custom-product-order-list .custom-product-wrap {\r\n  height: 300px; /* Set a fixed height for the table */\r\n  overflow-y: hidden; /* No vertical scrolling */\r\n  width: 100%; /* Full width of the container */\r\n}\r\n\r\n.custom-product-order-list .custom-product-wrap table {\r\n  width: 100%; /* Full width of the container */\r\n  table-layout: auto; /* Column width adjusts automatically */\r\n  border-collapse: collapse; /* Ensures no extra space between cells */\r\n}\r\n\r\n.custom-product-order-list .custom-product-wrap th,\r\n.custom-product-order-list .custom-product-wrap td {\r\n  padding: 8px; /* Padding inside the cells */\r\n  text-align: left; /* Left align text */\r\n  font-size: calc(1rem - 0.1vw); /* Shrinks font dynamically based on viewport size */\r\n  word-wrap: break-word; /* Break long words */\r\n  overflow-wrap: anywhere; /* Ensure long words break properly */\r\n}\r\n\r\n/* Responsive adjustments for smaller screens */\r\n@media (max-width: 768px) {\r\n  .custom-product-order-list .custom-product-wrap th,\r\n  .custom-product-order-list .custom-product-wrap td {\r\n    font-size: calc(0.85rem - 0.2vw); /* Shrink text further on smaller screens */\r\n  }\r\n}\r\n\r\n\r\n</style>\r\n"],"mappings":";;;;;;;;AAsSA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,eAAc,QAAS,KAAK;AAC/D,SAASC,eAAc,QAAS,yBAAyB;AACzD,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAO,aAAY;AAEnB,eAAe;EACbC,KAAKA,CAAA,EAAG;IACN;IACA,MAAMC,MAAK,GAAIC,OAAO,CAACC,GAAG,CAACC,WAAW;IACtC,MAAMC,MAAK,GAAIH,OAAO,CAACC,GAAG,CAACG,iBAAiB;IAC5C,MAAMC,gBAAe,GAAIb,GAAG,CAAC,KAAK,CAAC;IACnC,MAAMc,OAAM,GAAId,GAAG,CAAC,EAAE,CAAC;IACvB,MAAMe,YAAW,GAAIf,GAAG,CAAC,IAAI,CAAC;IAC9B,MAAMgB,IAAG,GAAIhB,GAAG,CAAC,EAAE,CAAC;IACpB,MAAMiB,UAAS,GAAIjB,GAAG,CAAC,EAAE,CAAC;IAC1B,MAAMkB,QAAO,GAAIlB,GAAG,CAAC,CAAC,CAAC;IACvB,MAAMmB,GAAE,GAAInB,GAAG,CAAC,EAAE,CAAC,EAAE;IACrB,MAAMoB,QAAO,GAAIpB,GAAG,CAAC,CAAC,CAAC;IACvB,MAAMqB,YAAW,GAAIrB,GAAG,CAAC;MAAEsB,OAAO,EAAE;IAAK,CAAC,CAAC;IAC3C,MAAMC,YAAW,GAAIvB,GAAG,CAAC;MAAEsB,OAAO,EAAE;IAAK,CAAC,CAAC;IAC3C,MAAME,gBAAe,GAAIxB,GAAG,CAAC,IAAI,CAAC;IAClC,MAAMyB,aAAY,GAAIzB,GAAG,CAAC,IAAI,CAAC,EAAE;IACjC,MAAM0B,WAAU,GAAI1B,GAAG,CAAC,CAAC,CAAC,EAAE;IAC5B,MAAM2B,aAAY,GAAI3B,GAAG,CAAC,IAAI,CAAC;IAC/B,MAAM4B,MAAK,GAAI5B,GAAG,CAAC,IAAI,CAAC;IACxB,MAAM6B,aAAY,GAAI7B,GAAG,CAAC,IAAI,CAAC;IAC/B,MAAM8B,QAAO,GAAI9B,GAAG,CAAC,EAAE,CAAC;IACxB,MAAM+B,aAAY,GAAI/B,GAAG,CAAC,EAAE,CAAC;IAC7B,MAAMgC,gBAAe,GAAIhC,GAAG,CAAC,IAAI,CAAC;IAClC,MAAMiC,WAAU,GAAIjC,GAAG,CAAC,EAAE,CAAC;IAC3B,MAAMkC,YAAY,GAAElC,GAAG,CAAC,CAAC,CAAC;IAC1B;IACA,MAAMmC,KAAI,GAAIlC,QAAQ,CAAC,MACrBiB,QAAQ,CAACkB,KAAI,GAAKlB,QAAQ,CAACkB,KAAI,GAAIjB,GAAG,CAACiB,KAAK,GAAI,GAAE,GAAIhB,QAAQ,CAACgB,KACjE,CAAC;;IAED;IACA,MAAMC,aAAY,GAAI,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMjC,KAAK,CAACkC,GAAG,CAAC,GAAGhC,MAAM,oBAAoB,CAAC;QAC/DU,UAAU,CAACmB,KAAI,GAAIE,QAAQ,CAACE,IAAI,CAACvB,UAAU;MAC7C,EAAE,OAAOwB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAED,MAAME,qBAAoB,GAAI,MAAOC,YAAY,IAAK;MACpD,IAAI;QACF,MAAMN,QAAO,GAAI,MAAMjC,KAAK,CAACkC,GAAG,CAAC,GAAGhC,MAAM,6BAA6BqC,YAAY,EAAE,CAAC;QACtFd,QAAQ,CAACM,KAAI,GAAIE,QAAQ,CAACE,IAAI,CAACV,QAAQ;MACzC,EAAE,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAED,MAAMI,cAAa,GAAKD,YAAY,IAAK;MACvC/B,gBAAgB,CAACuB,KAAI,GAAIQ,YAAY,EAAE;MACvCD,qBAAqB,CAACC,YAAY,CAAC,EAAE;IACvC,CAAC;IAGD,MAAME,kBAAiB,GAAI7C,QAAQ,CAAC,MAAM;MACxC;MACA,IAAIY,gBAAgB,CAACuB,KAAI,KAAM,KAAK,EAAE;QACpC,OAAOnB,UAAU,CAACmB,KAAK;MACzB;MACA,OAAOnB,UAAU,CAACmB,KAAK,CAACW,MAAM,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAG,KAAMpC,gBAAgB,CAACuB,KAAK,CAAC;IACtF,CAAC,CAAC;IAGF,MAAMc,UAAS,GAAI,MAAAA,CAAOC,OAAM,GAAI,IAAI,KAAK;MAC3C,IAAI;QACFvB,MAAM,CAACQ,KAAI,GAAI,IAAI;QAGnB,IAAI,CAACe,OAAO,EAAE;UACZ,IAAI,CAACrC,OAAO,CAACsB,KAAK,CAACgB,IAAI,CAAC,CAAC,EAAE;YACzB;UACF;UAEA,MAAMd,QAAO,GAAI,MAAMjC,KAAK,CAACkC,GAAG,CAAC,GAAGhC,MAAM,qBAAqBO,OAAO,CAACsB,KAAK,CAACgB,IAAI,CAAC,CAAC,EAAE,CAAC;UACtF,IAAId,QAAQ,CAACE,IAAI,CAACa,OAAO,EAAE;YACzBF,OAAM,GAAIb,QAAQ,CAACE,IAAI,CAACW,OAAO,EAAE;YACjC9B,YAAY,CAACe,KAAK,CAACd,OAAM,GAAI,IAAI;UACnC,OAAO;YACLD,YAAY,CAACe,KAAK,CAACd,OAAM,GAAIgB,QAAQ,CAACE,IAAI,CAAClB,OAAM,IAAK,oBAAoB;YAC1E;UACF;QACF;;QAEA;QACAE,gBAAgB,CAACY,KAAI,GAAIe,OAAO;QAChC1B,aAAa,CAACW,KAAI,GAAIe,OAAO,CAACG,QAAQ;;QAEtC;QACA,MAAMC,YAAW,GAAIvC,IAAI,CAACoB,KAAK,CAACoB,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,GAAE,KAAMP,OAAO,CAACO,GAAG,CAAC;QAExE,IAAIH,YAAY,EAAE;UAChB;UACA,MAAMI,gBAAe,GAAIJ,YAAY,CAACD,QAAO,GAAI,CAAC;UAClD,IAAIK,gBAAe,IAAKlC,aAAa,CAACW,KAAK,EAAE;YAC3CmB,YAAY,CAACD,QAAO,GAAIK,gBAAgB;UAC1C,OAAO;YACLtC,YAAY,CAACe,KAAK,CAACd,OAAM,GAAI,6BAA6B6B,OAAO,CAACF,IAAI,GAAG;UAC3E;QACF,OAAO;UACL;UACA,IAAIxB,aAAa,CAACW,KAAI,GAAI,CAAC,EAAE;YAC3BpB,IAAI,CAACoB,KAAK,CAACwB,IAAI,CAAC;cAAE,GAAGT,OAAO;cAAEG,QAAQ,EAAE;YAAE,CAAC,CAAC;UAC9C,OAAO;YACLjC,YAAY,CAACe,KAAK,CAACd,OAAM,GAAI,0BAA0B6B,OAAO,CAACF,IAAI,GAAG;UACxE;QACF;QAEAY,cAAc,CAAC,CAAC,EAAE;MACpB,EAAE,OAAOpB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7CpB,YAAY,CAACe,KAAK,CAACd,OAAM,GAAI,+CAA+C;MAC9E,UAAU;QACRR,OAAO,CAACsB,KAAI,GAAI,EAAE,EAAE;MACtB;IACF,CAAC;IAGD,MAAMyB,cAAa,GAAIA,CAAA,KAAM;MAC3B3C,QAAQ,CAACkB,KAAI,GAAIpB,IAAI,CAACoB,KAAK,CAAC0B,MAAM,CAAC,CAACC,GAAG,EAAEN,IAAI,KAAKM,GAAE,GAAIN,IAAI,CAACH,QAAO,GAAIG,IAAI,CAACO,KAAK,EAAE,CAAC,CAAC;IACxF,CAAC;IAED,MAAMC,aAAY,GAAKC,KAAK,IAAK;MAC/B,QAAQA,KAAK,CAACC,GAAG;QACf,KAAK,IAAI;UACPD,KAAK,CAACE,cAAc,CAAC,CAAC;UACtBC,gBAAgB,CAAC,CAAC;UAClB;QACF,KAAK,IAAI;UACPH,KAAK,CAACE,cAAc,CAAC,CAAC;UACtBE,aAAa,CAAC,CAAC,EAAE;UACjB;QACF,KAAK,IAAI;UACPJ,KAAK,CAACE,cAAc,CAAC,CAAC;UACtBG,eAAe,CAAC,CAAC,EAAE;UACnB;QACF,KAAK,GAAG;UACNL,KAAK,CAACE,cAAc,CAAC,CAAC;UACtBI,uBAAuB,CAAC,CAAC,EAAE;UAC3B;QACF,KAAK,QAAQ;UACX;UACA,IAAIzD,YAAY,CAACqB,KAAK,EAAE;YACtBrB,YAAY,CAACqB,KAAK,CAACqC,KAAK,CAAC,CAAC;YAC1B1C,aAAa,CAACK,KAAI,GAAI,EAAE,EAAE;YAC1BH,WAAW,CAACG,KAAI,GAAI,EAAE,EAAE;YACxBJ,gBAAgB,CAACI,KAAI,GAAI,IAAI,EAAE;UACjC;UAEA;QACF;UACE;MACJ;IACF,CAAC;IACD,MAAMsC,iBAAgB,GAAIA,CAAA,KAAM;MAC9B3C,aAAa,CAACK,KAAI,GAAI,EAAE;MACxBH,WAAW,CAACG,KAAI,GAAI,EAAE;MACtBJ,gBAAgB,CAACI,KAAI,GAAI,IAAI;IAC/B;IAEA,MAAMiC,gBAAe,GAAIA,CAAA,KAAM;MAC7B,IAAIlC,KAAK,CAACC,KAAI,GAAI,CAAC,EAAE;QACnBsC,iBAAiB,CAAC,CAAC;QACnBtE,eAAe,CAACuE,IAAI,CAAC,eAAe,CAAC;QACrCvE,eAAe,CAACqE,KAAK,CAAC,eAAe,CAAC;MACxC;IAEF,CAAC;IAED,MAAMF,eAAc,GAAIA,CAAA,KAAM;MAC5BG,iBAAiB,CAAC,CAAC;MACnBtE,eAAe,CAACuE,IAAI,CAAC,cAAc,CAAC;MACpCvE,eAAe,CAACqE,KAAK,CAAC,cAAc,CAAC;MACrCG,qBAAqB,CAAC,CAAC;IACzB,CAAC;IACD,MAAMA,qBAAoB,GAAIA,CAAA,KAAM;MACtCC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEC,mBAAmB,CAAC;IACzD,CAAC;IAED,MAAMC,wBAAuB,GAAIA,CAAA,KAAM;MACrCH,MAAM,CAACI,mBAAmB,CAAC,SAAS,EAAEF,mBAAmB,CAAC;IAC5D,CAAC;IAEG,MAAMT,aAAY,GAAIA,CAAA,KAAM;MAC1BI,iBAAiB,CAAC,CAAC;MACnBtE,eAAe,CAACuE,IAAI,CAAC,wBAAwB,CAAC;MAC9CvE,eAAe,CAACqE,KAAK,CAAC,wBAAwB,CAAC;IACjD,CAAC;IAID,MAAMS,kBAAiB,GAAKhB,KAAK,IAAK;MACpC;MACA,IAAIA,KAAK,CAACC,GAAE,KAAM,OAAO,EAAE;QACzBD,KAAK,CAACE,cAAc,CAAC,CAAC,EAAE;QACxBe,qBAAqB,CAAC,CAAC,EAAE;MAC3B;;MAEA;MACA,IAAIjB,KAAK,CAACC,GAAE,KAAM,QAAQ,EAAE;QAC1BD,KAAK,CAACE,cAAc,CAAC,CAAC,EAAE;QACxBhE,eAAe,CAACgF,IAAI,CAAC,uBAAuB;MAC9C;IAEF,CAAC;IAED,MAAMZ,uBAAsB,GAAIA,CAAA,KAAM;MACpC,IAAIhD,gBAAgB,CAACY,KAAK,EAAE;QAC1B;QACAhC,eAAe,CAACuE,IAAI,CAAC,uBAAuB,CAAC;QAC7CvE,eAAe,CAACqE,KAAK,CAAC,uBAAuB,CAAC;MAChD,OAAO;QACLpD,YAAY,CAACe,KAAK,CAACd,OAAM,GAAI,yBAAyB;MACxD;IACF,CAAC;IACD,MAAM+D,cAAa,GAAI,MAAAA,CAAA,KAAY;MACjC;MACA,IAAIxD,aAAa,CAACO,KAAI,KAAM,IAAG,IAAKP,aAAa,CAACO,KAAI,GAAID,KAAK,CAACC,KAAK,EAAE;QACrEb,YAAY,CAACa,KAAK,CAACd,OAAM,GAAI,6BAA6Ba,KAAK,CAACC,KAAK,GAAG;QACxE;MACF;MAEA,IAAI;QACF;QACA,MAAMkD,eAAc,GAAI;UACtBtE,IAAI,EAAEA,IAAI,CAACoB,KAAK,CAACmD,GAAG,CAAE9B,IAAI,KAAM;YAC9BC,GAAG,EAAED,IAAI,CAACC,GAAG;YAAE;YACf8B,GAAG,EAAE/B,IAAI,CAAC+B,GAAG;YACbvC,IAAI,EAAEQ,IAAI,CAACR,IAAI;YACfe,KAAK,EAAEP,IAAI,CAACO,KAAK;YACjB7B,KAAK,EAAEsB,IAAI,CAACtB,KAAK;YACjBmB,QAAQ,EAAEG,IAAI,CAACH;UACjB,CAAC,CAAC,CAAC;UACHmC,aAAa,EAAE,MAAM;UAAE;UACvBC,SAAS,EAAEtE,QAAQ,CAACgB,KAAK;UACzBuD,SAAS,EAAEzE,QAAQ,CAACkB,KAAK;UACzBjB,GAAG,EAAGD,QAAQ,CAACkB,KAAI,GAAIjB,GAAG,CAACiB,KAAK,GAAI,GAAG;UACvCwD,WAAW,EAAEzD,KAAK,CAACC,KAAK;UACxByD,IAAI,EAAEhE,aAAa,CAACO,KAAK;UACzBR,MAAM,EAAEA,MAAM,CAACQ,KAAK;UACpB0D,MAAM,EAAE,WAAW;UAAE;UACrBC,QAAQ,EAAE,SAAS,CAAE;QACvB,CAAC;;QAED;QACA,MAAMzD,QAAO,GAAI,MAAMjC,KAAK,CAAC2F,IAAI,CAAC,GAAGzF,MAAM,qBAAqB,EAAE+E,eAAe,CAAC;QAElF,IAAIhD,QAAQ,CAACE,IAAI,CAACa,OAAO,EAAE;UACzB;UACAX,OAAO,CAACuD,GAAG,CAAC,oBAAoB,EAAE3D,QAAQ,CAACE,IAAI,CAAC0D,WAAW,CAAC;;UAE5D;UACAtE,MAAM,CAACQ,KAAI,GAAI,CAACP,aAAa,CAACO,KAAI,GAAID,KAAK,CAACC,KAAK,EAAE+D,OAAO,CAAC,CAAC,CAAC;UAG7DtE,aAAa,CAACO,KAAI,GAAI,IAAI;UAC1Bb,YAAY,CAACa,KAAK,CAACd,OAAM,GAAI,IAAI;;UAEjC;UACA8E,IAAI,CAACC,IAAI,CAAC;YACRC,KAAK,EAAE,UAAU;YACjBC,IAAI,EAAE,yBAAyB;YAC/BC,IAAI,EAAE,SAAS;YACfC,KAAK,EAAE,IAAI;YAAE;YACbC,iBAAiB,EAAE,KAAI,CAAE;UAC3B,CAAC,CAAC;;UAEF;UACAtG,eAAe,CAACgF,IAAI,CAAC,eAAe;UACpCpE,IAAI,CAACoB,KAAI,GAAI,EAAE;UACflB,QAAQ,CAACkB,KAAI,GAAI,CAAC;UAClBhB,QAAQ,CAACgB,KAAI,GAAI,CAAC;QAEpB,OAAO;UACL;UACAb,YAAY,CAACa,KAAK,CAACd,OAAM,GAAIgB,QAAQ,CAACE,IAAI,CAAClB,OAAM,IAAK,gCAAgC;UACtFoB,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEH,QAAQ,CAACE,IAAI,CAAClB,OAAO,CAAC;QAC7D;MACF,EAAE,OAAOmB,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDlB,YAAY,CAACa,KAAK,CAACd,OAAM,GAAI,mEAAmE;MAClG;IACF,CAAC;IAGD,MAAMqF,WAAU,GAAI,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMrE,QAAO,GAAI,MAAMjC,KAAK,CAAC2F,IAAI,CAAC,GAAGzF,MAAM,mBAAmB,EAAE;UAC9DwB,aAAa,EAAEA,aAAa,CAACK,KAAK;UAClC2D,QAAQ,EAAE,SAAQ,CAAE;QACtB,CAAC,CAAC;QAEF,IAAIzD,QAAQ,CAACE,IAAI,CAACa,OAAO,EAAE;UACzB;UACA+C,IAAI,CAACC,IAAI,CAAC;YACRC,KAAK,EAAE,SAAS;YAChBC,IAAI,EAAE,2CAA2C;YACjDC,IAAI,EAAE,SAAS;YACfC,KAAK,EAAE,IAAI;YACXC,iBAAiB,EAAE;UACrB,CAAC,CAAC;;UAEF;UACAhC,iBAAiB,CAAC,CAAC;UACnBtE,eAAe,CAACgF,IAAI,CAAC,wBAAwB,CAAC;QAChD,OAAO;UACL;UACAgB,IAAI,CAACC,IAAI,CAAC;YACRC,KAAK,EAAE,OAAO;YACdC,IAAI,EAAEjE,QAAQ,CAACE,IAAI,CAAClB,OAAM,IAAK,iCAAiC;YAChEkF,IAAI,EAAE,OAAO;YACbC,KAAK,EAAE,IAAI;YACXC,iBAAiB,EAAE;UAErB,CAAC,CAAC;QACJ;MACF,EAAE,OAAOjE,KAAK,EAAE;QACd;QACA2D,IAAI,CAACC,IAAI,CAAC;UACRC,KAAK,EAAE,OAAO;UACdC,IAAI,EAAE,sBAAsB9D,KAAK,CAACnB,OAAO,EAAE;UAC3CkF,IAAI,EAAE,OAAO;UACbC,KAAK,EAAE,IAAI;UACXC,iBAAiB,EAAE;QAErB,CAAC,CAAC;MACJ;IACF,CAAC;IAGD,MAAMvB,qBAAoB,GAAIA,CAAA,KAAM;MAClC,IAAI3D,gBAAgB,CAACY,KAAK,EAAE;QAC1B,IAAIV,WAAW,CAACU,KAAI,GAAIX,aAAa,CAACW,KAAK,EAAE;UAC3CT,aAAa,CAACS,KAAI,GAAI,0BAA0BX,aAAa,CAACW,KAAK,kCAAkC;UACrG;QACF;;QAEA;QACA,MAAMwE,QAAO,GAAI5F,IAAI,CAACoB,KAAK,CAACoB,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,GAAE,KAAMlC,gBAAgB,CAACY,KAAK,CAACsB,GAAG,CAAC;QACnF,IAAIkD,QAAQ,EAAE;UACZA,QAAQ,CAACtD,QAAO,GAAI5B,WAAW,CAACU,KAAK;QACvC;QAEAyB,cAAc,CAAC,CAAC;QAEhBzD,eAAe,CAACgF,IAAI,CAAC,uBAAuB,CAAC;QAC7C1D,WAAW,CAACU,KAAI,GAAI,CAAC;QACrBT,aAAa,CAACS,KAAI,GAAI,IAAI;;QAE1B;QACA,IAAIrB,YAAY,CAACqB,KAAK,EAAE;UACtBrB,YAAY,CAACqB,KAAK,CAACqC,KAAK,CAAC,CAAC;QAC5B;MACF;IACF,CAAC;IACD,MAAMoC,qBAAoB,GAAI,MAAAA,CAAA,KAAY;MACxC,IAAI;QACFzG,eAAe,CAACgF,IAAI,CAAC,cAAc,CAAC;QACpCJ,wBAAwB,CAAC,CAAC;;QAE1B;QACA,MAAM1C,QAAO,GAAI,MAAMjC,KAAK,CAACkC,GAAG,CAAC,GAAGhC,MAAM,0BAA0BwB,aAAa,CAACK,KAAK,EAAE,CAAC;QAC1F,MAAM;UAAEiB,OAAO;UAAErC,IAAI;UAAE4E;QAAY,IAAItD,QAAQ,CAACE,IAAI;QAEpD,IAAIa,OAAM,IAAKrC,IAAG,IAAK8F,KAAK,CAACC,OAAO,CAAC/F,IAAI,CAAC,EAAE;UAC1C;UACA0B,OAAO,CAACuD,GAAG,CAAC,yBAAyB,EAAEjF,IAAI,CAAC;;UAE5C;UACAiB,WAAW,CAACG,KAAI,GAAIpB,IAAI,CAACuE,GAAG,CAAC9B,IAAG,KAAM;YACpCC,GAAG,EAAED,IAAI,CAACC,GAAG;YACbT,IAAI,EAAEQ,IAAI,CAACR,IAAI;YACfe,KAAK,EAAEP,IAAI,CAACO,KAAK;YACjBV,QAAQ,EAAEG,IAAI,CAACH,QAAQ;YACvB0D,QAAQ,EAAE,KAAK;YAAE;YACjBC,cAAc,EAAE,CAAC,CAAE;UACrB,CAAC,CAAC,CAAC;UAEH7G,eAAe,CAACuE,IAAI,CAAC,2BAA2B;QAClD,OAAO;UACLjC,OAAO,CAACD,KAAK,CAAC,kDAAkD,CAAC;QACnE;MACF,EAAE,OAAOA,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D;IACF,CAAC;IAED,MAAMyE,aAAY,GAAI,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,aAAY,GAAIlF,WAAW,CAACG,KAAK,CAACW,MAAM,CAACU,IAAG,IAAKA,IAAI,CAACuD,QAAO,IAAKvD,IAAI,CAACwD,cAAa,GAAI,CAAC,CAAC;QAEhG,IAAIE,aAAa,CAACC,MAAK,KAAM,CAAC,EAAE;UAC9BpF,gBAAgB,CAACI,KAAI,GAAI,4CAA4C;UACrE;QACF;;QAEA;QACA,MAAME,QAAO,GAAI,MAAMjC,KAAK,CAAC2F,IAAI,CAAC,GAAGzF,MAAM,uBAAuBwB,aAAa,CAACK,KAAK,EAAE,EAAE;UACvFiF,aAAa,EAAEF,aAAa;UAC5BpB,QAAQ,EAAE;QACZ,CAAC,CAAC;QAEFrD,OAAO,CAACuD,GAAG,CAAC3D,QAAQ,CAACE,IAAI,CAAC,EAAE;;QAE5B,IAAIF,QAAQ,CAACE,IAAI,CAACa,OAAO,EAAE;UACzB;UACA8D,aAAa,CAACG,OAAO,CAAC7D,IAAG,IAAK;YAC5B,MAAMmD,QAAO,GAAI5F,IAAI,CAACoB,KAAK,CAACoB,IAAI,CAACoD,QAAO,IAAKA,QAAQ,CAAClD,GAAE,KAAMD,IAAI,CAACC,GAAG,CAAC;YACvE,IAAIkD,QAAQ,EAAE;cACZA,QAAQ,CAACtD,QAAO,IAAKG,IAAI,CAACwD,cAAc;cACxC,IAAIL,QAAQ,CAACtD,QAAO,IAAK,CAAC,EAAE;gBAC1B,MAAMiE,KAAI,GAAIvG,IAAI,CAACoB,KAAK,CAACoF,OAAO,CAACZ,QAAQ,CAAC;gBAC1C5F,IAAI,CAACoB,KAAK,CAACqF,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC,EAAE;cAC/B;YACF;UACF,CAAC,CAAC;;UAEF;UACAnB,IAAI,CAACC,IAAI,CAAC;YACRC,KAAK,EAAE,WAAW;YAClBC,IAAI,EAAE,yBAAyB;YAC/BC,IAAI,EAAE,SAAS;YACfC,KAAK,EAAE,IAAI;YAAE;YACbC,iBAAiB,EAAE,KAAI,CAAE;UAC3B,CAAC,CAAC;UAEFtG,eAAe,CAACgF,IAAI,CAAC,2BAA2B;UAChD;QAEF,OAAO;UACLgB,IAAI,CAACC,IAAI,CAAC;YACRC,KAAK,EAAE,OAAO;YACdC,IAAI,EAAEjE,QAAQ,CAACE,IAAI,CAAClB,OAAM,IAAK,+BAA+B;YAC9DkF,IAAI,EAAE,OAAO;YACbC,KAAK,EAAE,IAAI;YACXC,iBAAiB,EAAE;UAErB,CAAC,CAAC;QACJ;MACF,EAAE,OAAOjE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD2D,IAAI,CAACC,IAAI,CAAC;UACRC,KAAK,EAAE,OAAO;UACdC,IAAI,EAAE,kEAAkE;UACxEC,IAAI,EAAE,OAAO;UACbC,KAAK,EAAE,IAAI;UACXC,iBAAiB,EAAE;QAErB,CAAC,CAAC;MACJ;IACF,CAAC;IAED,MAAMgB,sBAAqB,GAAKjE,IAAI,IAAK;MACzC,IAAIA,IAAI,CAACwD,cAAa,GAAIxD,IAAI,CAACH,QAAQ,EAAE;QACvCG,IAAI,CAACwD,cAAa,GAAIxD,IAAI,CAACH,QAAQ,EAAE;MACvC;IACF;IAKA,MAAMyB,mBAAkB,GAAKb,KAAK,IAAK;MACvC,MAAMyD,KAAI,GAAI1F,WAAW,CAACG,KAAK,EAAE;MACjC,IAAI,CAACuF,KAAI,IAAKA,KAAK,CAACP,MAAK,KAAM,CAAC,EAAE,OAAM,CAAE;;MAE1C,IAAIlD,KAAK,CAACC,GAAE,KAAM,WAAU,IAAKjC,YAAY,CAACE,KAAI,GAAIuF,KAAK,CAACP,MAAK,GAAI,CAAC,EAAE;QACtElD,KAAK,CAACE,cAAc,CAAC,CAAC,EAAE;QACxBlC,YAAY,CAACE,KAAI,GAAI,CAACF,YAAY,CAACE,KAAI,GAAI,CAAC,IAAIuF,KAAK,CAACP,MAAM,EAAE;MAChE,OAAO,IAAIlD,KAAK,CAACC,GAAE,KAAM,SAAQ,IAAKjC,YAAY,CAACE,KAAI,GAAI,CAAC,EAAE;QAC5D8B,KAAK,CAACE,cAAc,CAAC,CAAC,EAAE;QACxBlC,YAAY,CAACE,KAAI,GAAI,CAACF,YAAY,CAACE,KAAI,GAAI,IAAIuF,KAAK,CAACP,MAAM,IAAIO,KAAK,CAACP,MAAM,EAAE;MAC/E,OAAO,IAAIlD,KAAK,CAACC,GAAE,KAAM,GAAG,EAAE;QAC5BD,KAAK,CAACE,cAAc,CAAC,CAAC,EAAE;QACxB,MAAMwD,WAAU,GAAID,KAAK,CAACzF,YAAY,CAACE,KAAK,CAAC;QAC7C,IAAIwF,WAAU,IAAKA,WAAW,CAACX,cAAa,GAAI,CAAC,EAAE;UACjD;UACAW,WAAW,CAACZ,QAAO,GAAI,CAACY,WAAW,CAACZ,QAAQ;QAC9C;MACF,OAAO,IAAI9C,KAAK,CAACC,GAAE,KAAM,OAAO,EAAE;QAChCD,KAAK,CAACE,cAAc,CAAC,CAAC,EAAE;QACxB;QACA,IAAIuD,KAAK,CAACE,IAAI,CAAEpE,IAAI,IAAKA,IAAI,CAACuD,QAAQ,CAAC,EAAE;UACvCE,aAAa,CAAC,CAAC;QACjB,OAAO;UACLlF,gBAAgB,CAACI,KAAI,GAAI,4CAA4C;QACvE;MACF;;MAEA;MACA,MAAM0F,YAAW,GAAIC,QAAQ,CAACC,aAAa,CAAC,0DAA0D,CAAC;MACvG,IAAIF,YAAY,EAAE;QAChBA,YAAY,CAACrD,KAAK,CAAC,CAAC;MACtB;IACF,CAAC;;IAED;;IAEI;IACAvE,SAAS,CAAC,MAAM;MACdmC,aAAa,CAAC,CAAC;MACf,IAAItB,YAAY,CAACqB,KAAK,EAAE;QACtBrB,YAAY,CAACqB,KAAK,CAACqC,KAAK,CAAC,CAAC;MAC5B;MAEAI,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEb,aAAa,CAAC,EAAE;IACrD,CAAC,CAAC;IAEF9D,eAAe,CAAC,MAAM;MACpB0E,MAAM,CAACI,mBAAmB,CAAC,SAAS,EAAEhB,aAAa,CAAC;IACtD,CAAC,CAAC;;IAEF;IACA,OAAO;MACLhD,UAAU;MACVJ,gBAAgB;MAChBC,OAAO;MACPC,YAAY;MACZC,IAAI;MACJE,QAAQ;MACRC,GAAG;MACHC,QAAQ;MACRe,KAAK;MACLd,YAAY;MACZG,gBAAgB;MAChBC,aAAa;MACbC,WAAW;MACXC,aAAa;MACbuB,UAAU;MACViC,qBAAqB;MACrBD,kBAAkB;MAClBhD,YAAY;MACZ6C,mBAAmB;MACnB2C,sBAAsB;MACtB9F,MAAM;MACNC,aAAa;MACbN,YAAY;MACZsB,cAAc;MACdf,QAAQ;MACRnB,MAAM;MACNoB,aAAa;MACbC,gBAAgB;MAChBC,WAAW;MACX4E,qBAAqB;MACrBK,aAAa;MACbP,WAAW;MACXtC,gBAAgB;MAChBC,aAAa;MACbC,eAAe;MACfc;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}