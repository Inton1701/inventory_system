{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport JsBarcode from 'jsbarcode';\nimport { ref, onMounted, watch, nextTick } from 'vue';\nexport default {\n  props: {\n    sku: {\n      type: String,\n      required: true\n    },\n    productName: {\n      type: String,\n      default: 'Product Name'\n    }\n  },\n  setup(props) {\n    const svgRef = ref(null);\n    const errorMessage = ref('');\n    const generateBarcode = async sku => {\n      try {\n        if (sku.length !== 13) {\n          throw new Error('SKU must be exactly 13 digits.');\n        }\n\n        // Wait until the SVG is rendered before applying JsBarcode\n        await nextTick();\n        if (svgRef.value) {\n          JsBarcode(svgRef.value, sku, {\n            format: 'EAN13',\n            lineColor: '#000',\n            width: 2,\n            height: 50,\n            displayValue: true\n          });\n        } else {\n          throw new Error('SVG element not found');\n        }\n\n        // Clear error message if barcode generation succeeds\n        errorMessage.value = '';\n      } catch (error) {\n        console.error(error.message);\n        errorMessage.value = error.message;\n      }\n    };\n    const downloadBarcode = async () => {\n      try {\n        const svg = svgRef.value;\n        if (!svg) throw new Error('SVG element not found for download');\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        const svgData = new XMLSerializer().serializeToString(svg);\n        const img = new Image();\n        const svgBlob = new Blob([svgData], {\n          type: 'image/svg+xml;charset=utf-8'\n        });\n        const url = URL.createObjectURL(svgBlob);\n        img.onload = () => {\n          canvas.width = img.width;\n          canvas.height = img.height + 20; // extra space for product name\n          ctx.fillStyle = 'white';\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n          ctx.drawImage(img, 0, 0);\n          ctx.font = '16px Arial';\n          ctx.fillStyle = 'black';\n          ctx.textAlign = 'center';\n          ctx.fillText(props.productName, canvas.width / 2, img.height + 20);\n          const pngUrl = canvas.toDataURL('image/png');\n          const link = document.createElement('a');\n          link.href = pngUrl;\n          link.download = `${props.sku}_barcode.png`;\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n          URL.revokeObjectURL(url);\n        };\n        img.src = url;\n\n        // Clear error message if download succeeds\n        errorMessage.value = '';\n      } catch (error) {\n        console.error(error.message);\n        errorMessage.value = error.message;\n      }\n    };\n    onMounted(() => generateBarcode(props.sku));\n    watch(() => props.sku, newSku => generateBarcode(newSku));\n    return {\n      svgRef,\n      errorMessage,\n      downloadBarcode\n    };\n  }\n};","map":{"version":3,"names":["JsBarcode","ref","onMounted","watch","nextTick","props","sku","type","String","required","productName","default","setup","svgRef","errorMessage","generateBarcode","length","Error","value","format","lineColor","width","height","displayValue","error","console","message","downloadBarcode","svg","canvas","document","createElement","ctx","getContext","svgData","XMLSerializer","serializeToString","img","Image","svgBlob","Blob","url","URL","createObjectURL","onload","fillStyle","fillRect","drawImage","font","textAlign","fillText","pngUrl","toDataURL","link","href","download","body","appendChild","click","removeChild","revokeObjectURL","src","newSku"],"sources":["C:\\Users\\Administrator\\OneDrive\\Desktop\\POSExpress\\frontend\\src\\components\\Admin\\Inventory\\Barcode.vue"],"sourcesContent":["<script>\r\nimport JsBarcode from 'jsbarcode';\r\nimport { ref, onMounted, watch, nextTick } from 'vue';\r\n\r\nexport default {\r\n  props: {\r\n    sku: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    productName: {\r\n      type: String,\r\n      default: 'Product Name'\r\n    }\r\n  },\r\n  setup(props) {\r\n    const svgRef = ref(null);\r\n    const errorMessage = ref('');\r\n\r\n    const generateBarcode = async (sku) => {\r\n      try {\r\n        if (sku.length !== 13) {\r\n          throw new Error('SKU must be exactly 13 digits.');\r\n        }\r\n\r\n        // Wait until the SVG is rendered before applying JsBarcode\r\n        await nextTick();\r\n\r\n        if (svgRef.value) {\r\n          JsBarcode(svgRef.value, sku, {\r\n            format: 'EAN13',\r\n            lineColor: '#000',\r\n            width: 2,\r\n            height: 50,\r\n            displayValue: true\r\n          });\r\n        } else {\r\n          throw new Error('SVG element not found');\r\n        }\r\n\r\n        // Clear error message if barcode generation succeeds\r\n        errorMessage.value = '';\r\n      } catch (error) {\r\n        console.error(error.message);\r\n        errorMessage.value = error.message;\r\n      }\r\n    };\r\n\r\n    const downloadBarcode = async () => {\r\n      try {\r\n        const svg = svgRef.value;\r\n        if (!svg) throw new Error('SVG element not found for download');\r\n\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        const svgData = new XMLSerializer().serializeToString(svg);\r\n        const img = new Image();\r\n        const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\r\n        const url = URL.createObjectURL(svgBlob);\r\n\r\n        img.onload = () => {\r\n          canvas.width = img.width;\r\n          canvas.height = img.height + 20; // extra space for product name\r\n          ctx.fillStyle = 'white';\r\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n          ctx.drawImage(img, 0, 0);\r\n          ctx.font = '16px Arial';\r\n          ctx.fillStyle = 'black';\r\n          ctx.textAlign = 'center';\r\n          ctx.fillText(props.productName, canvas.width / 2, img.height + 20);\r\n\r\n          const pngUrl = canvas.toDataURL('image/png');\r\n          const link = document.createElement('a');\r\n          link.href = pngUrl;\r\n          link.download = `${props.sku}_barcode.png`;\r\n          document.body.appendChild(link);\r\n          link.click();\r\n          document.body.removeChild(link);\r\n          URL.revokeObjectURL(url);\r\n        };\r\n        img.src = url;\r\n\r\n        // Clear error message if download succeeds\r\n        errorMessage.value = '';\r\n      } catch (error) {\r\n        console.error(error.message);\r\n        errorMessage.value = error.message;\r\n      }\r\n    };\r\n\r\n    onMounted(() => generateBarcode(props.sku));\r\n    watch(() => props.sku, (newSku) => generateBarcode(newSku));\r\n\r\n    return {\r\n      svgRef,\r\n      errorMessage,\r\n      downloadBarcode\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div>\r\n\r\n    <svg ref=\"svgRef\"></svg>\r\n    <button @click=\"downloadBarcode\">Download Barcode as PNG</button>\r\n  </div>\r\n</template>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}