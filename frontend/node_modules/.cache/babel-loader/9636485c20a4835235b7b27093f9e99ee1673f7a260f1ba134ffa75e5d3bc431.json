{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { onMounted, ref } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nexport default {\n  setup() {\n    const password = ref(\"\");\n    const router = useRouter();\n    const isPasswordVisible = ref(false);\n    const email = localStorage.getItem(\"emails\");\n    const passwordInput = ref(null);\n    const togglePassword = () => {\n      isPasswordVisible.value = !isPasswordVisible.value;\n    };\n    const login = async () => {\n      try {\n        const response = await axios.post(\"http://localhost:5000/api/login\", {\n          email: email,\n          password: password.value\n        });\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"role\");\n        localStorage.removeItem(\"user\");\n        localStorage.removeItem(\"id\");\n        localStorage.removeItem(\"emails\");\n        const {\n          token,\n          role,\n          user,\n          id,\n          emails\n        } = response.data;\n\n        // Store token and role in local storage\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"role\", role);\n        localStorage.setItem(\"user\", user);\n        localStorage.setItem(\"id\", id);\n        localStorage.setItem(\"emails\", emails);\n\n        // Show success notification\n        Swal.fire({\n          icon: \"success\",\n          title: \"Login Successful\",\n          timer: 1500,\n          // \n          showConfirmButton: false\n        });\n\n        // Redirect based on role\n        if (role === \"Admin\") {\n          router.push(\"/dashboard\");\n        } else if (role === \"Cashier\") {\n          router.push(\"/pos\");\n        }\n      } catch (error) {\n        // Show error notification\n        Swal.fire({\n          icon: \"error\",\n          title: \"Login Failed\",\n          text: error.response?.data?.message || \"An error occurred during login\",\n          timer: 1500,\n          // \n          showConfirmButton: false\n        });\n      }\n    };\n    onMounted(() => {\n      if (passwordInput.value) {\n        passwordInput.value.focus();\n      }\n    });\n    return {\n      email,\n      password,\n      login,\n      togglePassword,\n      isPasswordVisible,\n      passwordInput\n    };\n  }\n};","map":{"version":3,"names":["onMounted","ref","useRouter","axios","Swal","setup","password","router","isPasswordVisible","email","localStorage","getItem","passwordInput","togglePassword","value","login","response","post","removeItem","token","role","user","id","emails","data","setItem","fire","icon","title","timer","showConfirmButton","push","error","text","message","focus"],"sources":["C:\\Users\\Administrator\\OneDrive\\Desktop\\POSExpress\\frontend\\src\\components\\LandingPage\\LockScreen.vue"],"sourcesContent":["<template>\r\n    <div class=\"container mt-5\">\r\n      <div class=\"row justify-content-center\">\r\n        <div class=\"col-md-5\">\r\n          <div class=\"card shadow-lg border-0 rounded\">\r\n            <div class=\"text-center mt-3\">\r\n              <img\r\n                src=\"/img/logo.png\"\r\n                alt=\"Logo\"\r\n                class=\"img-fluid \"\r\n                style=\"width: 400px; height: 100px;\"\r\n              />\r\n            </div>\r\n            <div class=\"card-header text-center  text-white\">\r\n              <h4 class=\"m-0\">Re-Enter The Password</h4>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <form @submit.prevent=\"login\">\r\n                <div class=\"mb-3\">\r\n                  <h5 for=\"email\" class=\"form-label text-center\">{{email}}</h5>\r\n                </div>\r\n                <div class=\"mb-3 pass-group\">\r\n                  <label for=\"password\" class=\"form-label\">Password</label>\r\n                  <input\r\n                     :type=\"isPasswordVisible ? 'text' : 'password'\" \r\n                    class=\"form-control form-control-lg\"\r\n                    id=\"password\"\r\n                    v-model=\"password\"\r\n                    placeholder=\"Enter your password\"\r\n                    ref=\"passwordInput\" \r\n                    required\r\n                  />\r\n                  <font-awesome-icon :icon=\"isPasswordVisible ? 'fa-eye' : 'fa-eye-slash'\" @click=\"togglePassword()\"\r\n                  class=\"toggle-password fa-xs mt-3\" style=\"font-size: 8px;\" />\r\n                </div>\r\n                <div class=\"d-grid gap-2\">\r\n                  <button type=\"submit\" class=\"btn btn-primary btn-lg\">\r\n                    Login\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <div class=\"card-footer text-center text-muted\">\r\n              <small>Powered By POSExpress</small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n\r\n<label>Password</label>\r\n\r\n\r\n  <script>\r\n  import { onMounted, ref } from \"vue\";\r\n  import { useRouter } from \"vue-router\";\r\n  import axios from \"axios\";\r\n  import Swal from \"sweetalert2\";\r\n  \r\n  export default {\r\n    setup() {\r\n    \r\n      const password = ref(\"\");\r\n      const router = useRouter();\r\n      const isPasswordVisible = ref(false);\r\n      const email = localStorage.getItem(\"emails\");\r\n      const passwordInput = ref(null);\r\n      const togglePassword = ()=>{\r\n        isPasswordVisible.value = !isPasswordVisible.value;\r\n    } \r\n      const login = async () => {\r\n        try {\r\n          const response = await axios.post(\"http://localhost:5000/api/login\", {\r\n            email:email,\r\n            password: password.value,\r\n          });\r\n          localStorage.removeItem(\"token\");\r\n          localStorage.removeItem(\"role\");\r\n          localStorage.removeItem(\"user\");\r\n          localStorage.removeItem(\"id\");\r\n          localStorage.removeItem(\"emails\");\r\n  \r\n          const { token, role, user, id, emails } = response.data;\r\n  \r\n          // Store token and role in local storage\r\n          localStorage.setItem(\"token\", token);\r\n          localStorage.setItem(\"role\", role);\r\n          localStorage.setItem(\"user\", user);\r\n          localStorage.setItem(\"id\", id);\r\n          localStorage.setItem(\"emails\", emails);\r\n  \r\n          // Show success notification\r\n          Swal.fire({\r\n            icon: \"success\",\r\n            title: \"Login Successful\",\r\n            timer: 1500, // \r\n            showConfirmButton: false \r\n\r\n          });\r\n  \r\n          // Redirect based on role\r\n          if (role === \"Admin\") {\r\n            router.push(\"/dashboard\");\r\n          } else if (role === \"Cashier\") {\r\n            router.push(\"/pos\");\r\n          }\r\n        } catch (error) {\r\n          // Show error notification\r\n          Swal.fire({\r\n            icon: \"error\",\r\n            title: \"Login Failed\",\r\n            text: error.response?.data?.message || \"An error occurred during login\",\r\n            timer: 1500, // \r\n            showConfirmButton: false \r\n          });\r\n         \r\n\r\n        }\r\n      };\r\n      onMounted(()=>{\r\n        if (passwordInput.value) {\r\n        passwordInput.value.focus();\r\n      }\r\n      })\r\n  \r\n      return {\r\n        email,\r\n        password,\r\n        login,\r\n        togglePassword,\r\n        isPasswordVisible,\r\n        passwordInput\r\n      };\r\n    },\r\n  };\r\n  </script>"],"mappings":";AAuDE,SAASA,SAAS,EAAEC,GAAE,QAAS,KAAK;AACpC,SAASC,SAAQ,QAAS,YAAY;AACtC,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,IAAG,MAAO,aAAa;AAE9B,eAAe;EACbC,KAAKA,CAAA,EAAG;IAEN,MAAMC,QAAO,GAAIL,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMM,MAAK,GAAIL,SAAS,CAAC,CAAC;IAC1B,MAAMM,iBAAgB,GAAIP,GAAG,CAAC,KAAK,CAAC;IACpC,MAAMQ,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC5C,MAAMC,aAAY,GAAIX,GAAG,CAAC,IAAI,CAAC;IAC/B,MAAMY,cAAa,GAAIA,CAAA,KAAI;MACzBL,iBAAiB,CAACM,KAAI,GAAI,CAACN,iBAAiB,CAACM,KAAK;IACtD;IACE,MAAMC,KAAI,GAAI,MAAAA,CAAA,KAAY;MACxB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMb,KAAK,CAACc,IAAI,CAAC,iCAAiC,EAAE;UACnER,KAAK,EAACA,KAAK;UACXH,QAAQ,EAAEA,QAAQ,CAACQ;QACrB,CAAC,CAAC;QACFJ,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;QAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;QAC/BR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;QAC/BR,YAAY,CAACQ,UAAU,CAAC,IAAI,CAAC;QAC7BR,YAAY,CAACQ,UAAU,CAAC,QAAQ,CAAC;QAEjC,MAAM;UAAEC,KAAK;UAAEC,IAAI;UAAEC,IAAI;UAAEC,EAAE;UAAEC;QAAO,IAAIP,QAAQ,CAACQ,IAAI;;QAEvD;QACAd,YAAY,CAACe,OAAO,CAAC,OAAO,EAAEN,KAAK,CAAC;QACpCT,YAAY,CAACe,OAAO,CAAC,MAAM,EAAEL,IAAI,CAAC;QAClCV,YAAY,CAACe,OAAO,CAAC,MAAM,EAAEJ,IAAI,CAAC;QAClCX,YAAY,CAACe,OAAO,CAAC,IAAI,EAAEH,EAAE,CAAC;QAC9BZ,YAAY,CAACe,OAAO,CAAC,QAAQ,EAAEF,MAAM,CAAC;;QAEtC;QACAnB,IAAI,CAACsB,IAAI,CAAC;UACRC,IAAI,EAAE,SAAS;UACfC,KAAK,EAAE,kBAAkB;UACzBC,KAAK,EAAE,IAAI;UAAE;UACbC,iBAAiB,EAAE;QAErB,CAAC,CAAC;;QAEF;QACA,IAAIV,IAAG,KAAM,OAAO,EAAE;UACpBb,MAAM,CAACwB,IAAI,CAAC,YAAY,CAAC;QAC3B,OAAO,IAAIX,IAAG,KAAM,SAAS,EAAE;UAC7Bb,MAAM,CAACwB,IAAI,CAAC,MAAM,CAAC;QACrB;MACF,EAAE,OAAOC,KAAK,EAAE;QACd;QACA5B,IAAI,CAACsB,IAAI,CAAC;UACRC,IAAI,EAAE,OAAO;UACbC,KAAK,EAAE,cAAc;UACrBK,IAAI,EAAED,KAAK,CAAChB,QAAQ,EAAEQ,IAAI,EAAEU,OAAM,IAAK,gCAAgC;UACvEL,KAAK,EAAE,IAAI;UAAE;UACbC,iBAAiB,EAAE;QACrB,CAAC,CAAC;MAGJ;IACF,CAAC;IACD9B,SAAS,CAAC,MAAI;MACZ,IAAIY,aAAa,CAACE,KAAK,EAAE;QACzBF,aAAa,CAACE,KAAK,CAACqB,KAAK,CAAC,CAAC;MAC7B;IACA,CAAC;IAED,OAAO;MACL1B,KAAK;MACLH,QAAQ;MACRS,KAAK;MACLF,cAAc;MACdL,iBAAiB;MACjBI;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}