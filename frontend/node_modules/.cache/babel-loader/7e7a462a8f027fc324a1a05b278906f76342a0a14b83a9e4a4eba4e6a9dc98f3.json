{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"page-wrapper\"\n};\nconst _hoisted_2 = {\n  class: \"content\"\n};\nconst _hoisted_3 = {\n  class: \"row\"\n};\nconst _hoisted_4 = {\n  class: \"card-body\"\n};\nconst _hoisted_5 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Navbar = _resolveComponent(\"Navbar\");\n  const _component_LineChart = _resolveComponent(\"LineChart\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_Navbar), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_ctx.chartData.labels && _ctx.chartData.labels.length ? (_openBlock(), _createBlock(_component_LineChart, {\n    key: 0,\n    \"chart-data\": _ctx.chartData,\n    \"chart-options\": _ctx.chartOptions\n  }, null, 8 /* PROPS */, [\"chart-data\", \"chart-options\"])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_5, \"Loading chart data...\"))])])])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_Fragment","_createVNode","_component_Navbar","_createElementVNode","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_ctx","chartData","labels","length","_createBlock","_component_LineChart","chartOptions","_hoisted_5"],"sources":["C:\\Users\\Administrator\\OneDrive\\Desktop\\POSExpress\\frontend\\src\\components\\Admin\\Main\\Dashboard.vue"],"sourcesContent":["<template>\r\n  <Navbar />\r\n  <div class=\"page-wrapper\">\r\n    <div class=\"content\">\r\n      <div class=\"row\">\r\n        <div class=\"card-body\">\r\n  <LineChart v-if=\"chartData.labels && chartData.labels.length\" \r\n             :chart-data=\"chartData\" \r\n             :chart-options=\"chartOptions\" />\r\n  <p v-else>Loading chart data...</p>\r\n</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, onBeforeUnmount, computed, defineComponent } from \"vue\";\r\nimport { Line } from \"vue-chartjs\";\r\nimport { Chart as ChartJS, Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale } from \"chart.js\";\r\nimport \"select2\";\r\nimport feather from \"feather-icons\";\r\nimport \"datatables.net-bs5\";\r\nimport \"datatables.net-bs5/css/dataTables.bootstrap5.min.css\";\r\nimport Navbar from \"/src/components/Admin/Navbar.vue\";\r\nimport axios from \"axios\";\r\n\r\n// Register chart.js components\r\nChartJS.register(Title, Tooltip, Legend, LineElement, CategoryScale, LinearScale);\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    Navbar,\r\n    LineChart: Line,\r\n  },\r\n  setup() {\r\n    const select = ref(\".select\");\r\n    const salesData = ref([]);\r\n\r\n    const chartData = computed(() => {\r\n  if (!salesData.value || salesData.value.length === 0) {\r\n    return { labels: [], datasets: [] }; // Return an empty structure\r\n  }\r\n\r\n  const labels = salesData.value.map((data) => data._id);\r\n  const totalSales = salesData.value.map((data) => data.totalSales);\r\n  const totalProfit = salesData.value.map((data) => data.totalProfit);\r\n\r\n  return {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: \"Total Sales\",\r\n        data: totalSales,\r\n        borderColor: \"rgb(75, 192, 192)\",\r\n        backgroundColor: \"rgba(75, 192, 192, 0.2)\",\r\n        fill: true,\r\n        tension: 0.4,\r\n      },\r\n      {\r\n        label: \"Total Profit\",\r\n        data: totalProfit,\r\n        borderColor: \"rgb(255, 99, 132)\",\r\n        backgroundColor: \"rgba(255, 99, 132, 0.2)\",\r\n        fill: true,\r\n        tension: 0.4,\r\n      },\r\n    ],\r\n  };\r\n});\r\n\r\n\r\n    // Chart options for customization\r\n    const chartOptions = computed(() => ({\r\n  responsive: true,\r\n  plugins: {\r\n    legend: {\r\n      position: \"top\",\r\n    },\r\n    tooltip: {\r\n      enabled: true,\r\n    },\r\n  },\r\n  scales: {\r\n    x: {\r\n      title: {\r\n        display: true,\r\n        text: \"Dates\",\r\n      },\r\n    },\r\n    y: {\r\n      title: {\r\n        display: true,\r\n        text: \"Values\",\r\n      },\r\n      beginAtZero: true,\r\n    },\r\n  },\r\n}));\r\n\r\n\r\n    // Fetch the sales data\r\n    onMounted(async () => {\r\n      try {\r\n        await $(select.value).select2();\r\n        await feather.replace();\r\n        await $(\".table\").DataTable();\r\n\r\n        const response = await axios.get(\"http://localhost:5000/api/get_sales\"); // Ensure the API URL is correct\r\n        if (response.data.success) {\r\n          salesData.value = response.data.salesDatas;\r\n        } else {\r\n          console.error(\"Failed to fetch sales data\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching sales data:\", error);\r\n      }\r\n    });\r\n\r\n    onBeforeUnmount(() => {\r\n      $(select.value).select2(\"destroy\");\r\n    });\r\n\r\n    return {\r\n      select,\r\n      salesData,\r\n      chartData, // Chart data\r\n      chartOptions, // Chart options\r\n    };\r\n  },\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n/* Optional styling for your page or components */\r\n#salesChart {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  height: 400px;\r\n}\r\n</style>\r\n"],"mappings":";;EAEOA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAS;;EACbA,KAAK,EAAC;AAAK;;EACTA,KAAK,EAAC;AAAW;;EAL9BC,GAAA;AAAA;;;;uBAAAC,mBAAA,CAAAC,SAAA,SACEC,YAAA,CAAUC,iBAAA,GACVC,mBAAA,CAWM,OAXNC,UAWM,GAVJD,mBAAA,CASM,OATNE,UASM,GARJF,mBAAA,CAOM,OAPNG,UAOM,GANJH,mBAAA,CAKF,OALEI,UAKF,GAJaC,IAAA,CAAAC,SAAS,CAACC,MAAM,IAAIF,IAAA,CAAAC,SAAS,CAACC,MAAM,CAACC,MAAM,I,cAA5DC,YAAA,CAE2CC,oBAAA;IAR7Cf,GAAA;IAOc,YAAU,EAAEU,IAAA,CAAAC,SAAS;IACrB,eAAa,EAAED,IAAA,CAAAM;6EAC3Bf,mBAAA,CAAmC,KATrCgB,UAAA,EASY,uBAAqB,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}