{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport JsBarcode from 'jsbarcode';\nimport { onMounted, watch, ref, nextTick } from 'vue';\nexport default {\n  props: {\n    sku: {\n      type: String,\n      default: ''\n    },\n    productName: {\n      type: String,\n      default: 'Product Name'\n    }\n  },\n  setup(props) {\n    const svgRef = ref(null);\n    const errorMessage = ref('');\n    const fallbackSku = '0000000000000';\n    const calculateEAN13Checksum = sku => {\n      const digits = sku.split('').map(Number);\n      let sum = 0;\n      for (let i = 0; i < 12; i++) {\n        sum += i % 2 === 0 ? digits[i] : digits[i] * 3;\n      }\n      return (10 - sum % 10) % 10;\n    };\n    const generateBarcode = async sku => {\n      try {\n        // Use fallback SKU if no valid SKU is provided\n        if (!sku || typeof sku !== 'string' || sku.length === 0) {\n          sku = fallbackSku; // Use fallback SKU when sku is empty or invalid\n        }\n        if (sku.length < 13) {\n          sku = sku.padStart(13, '0');\n        } else if (sku.length > 13) {\n          sku = sku.slice(0, 13);\n        }\n        if (sku.length !== 13 || !/^\\d{13}$/.test(sku)) {\n          throw new Error('Invalid SKU format: must be numeric and 13 digits.');\n        }\n        const checksum = calculateEAN13Checksum(sku);\n        sku = sku.slice(0, 12) + checksum;\n        errorMessage.value = '';\n        await nextTick();\n        JsBarcode(svgRef.value, sku, {\n          format: 'EAN13',\n          lineColor: '#000',\n          width: 2,\n          height: 50,\n          displayValue: true\n        });\n      } catch (error) {\n        console.error(error.message);\n        errorMessage.value = error.message;\n        JsBarcode(svgRef.value, fallbackSku, {\n          format: 'CODE128',\n          lineColor: '#000',\n          width: 2,\n          height: 50,\n          displayValue: true\n        });\n      }\n    };\n    const downloadBarcode = () => {\n      const svg = svgRef.value;\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const svgData = new XMLSerializer().serializeToString(svg);\n      const img = new Image();\n      const svgBlob = new Blob([svgData], {\n        type: 'image/svg+xml;charset=utf-8'\n      });\n      const url = URL.createObjectURL(svgBlob);\n\n      // Set up text wrapping logic\n      const fontSize = 16; // Font size for the text\n      const lineHeight = 20; // Height between lines of text\n      ctx.font = `${fontSize}px Arial`; // Set font for the context\n\n      img.onload = () => {\n        const barcodeWidth = img.width; // Barcode width is used for text wrapping\n        const maxLineWidth = barcodeWidth - 20; // Allow for a bit of padding on the sides\n\n        // Split the product name into multiple lines based on maxLineWidth\n        const words = props.productName.split(' ');\n        const lines = [];\n        let currentLine = '';\n\n        // Loop through each word and measure if it fits in the current line\n        words.forEach(word => {\n          const testLine = currentLine + (currentLine ? ' ' : '') + word;\n          const testWidth = ctx.measureText(testLine).width;\n          if (testWidth > maxLineWidth) {\n            // If the line is too long, push the current line to lines array\n            lines.push(currentLine);\n            currentLine = word; // Start a new line with the current word\n          } else {\n            // Otherwise, continue adding to the current line\n            currentLine = testLine;\n          }\n        });\n        lines.push(currentLine); // Add the last line\n\n        // Calculate the canvas size\n        const barcodeHeight = img.height;\n        const textHeight = lines.length * lineHeight; // Height for all text lines\n        canvas.width = barcodeWidth; // Set canvas width to barcode width\n        canvas.height = barcodeHeight + textHeight + 20; // Adjust height for text and padding\n\n        // Draw background (white)\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        // Draw barcode image onto the canvas\n        ctx.drawImage(img, 0, 0);\n\n        // Draw text lines, centered horizontally\n        ctx.fillStyle = 'black';\n        ctx.textAlign = 'center';\n\n        // Loop through the lines and draw each line of text\n        lines.forEach((line, index) => {\n          const yPosition = barcodeHeight + (index + 1) * lineHeight;\n          ctx.fillText(line, canvas.width / 2, yPosition);\n        });\n\n        // Download the image as PNG\n        const pngUrl = canvas.toDataURL('image/png');\n        const link = document.createElement('a');\n        link.href = pngUrl;\n        link.download = `${props.sku}_barcode.png`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      };\n      img.src = url;\n    };\n    onMounted(() => generateBarcode(props.sku));\n    watch(() => props.sku, newSku => {\n      generateBarcode(newSku);\n    });\n    return {\n      svgRef,\n      errorMessage,\n      downloadBarcode\n    };\n  }\n};","map":{"version":3,"names":["JsBarcode","onMounted","watch","ref","nextTick","props","sku","type","String","default","productName","setup","svgRef","errorMessage","fallbackSku","calculateEAN13Checksum","digits","split","map","Number","sum","i","generateBarcode","length","padStart","slice","test","Error","checksum","value","format","lineColor","width","height","displayValue","error","console","message","downloadBarcode","svg","canvas","document","createElement","ctx","getContext","svgData","XMLSerializer","serializeToString","img","Image","svgBlob","Blob","url","URL","createObjectURL","fontSize","lineHeight","font","onload","barcodeWidth","maxLineWidth","words","lines","currentLine","forEach","word","testLine","testWidth","measureText","push","barcodeHeight","textHeight","fillStyle","fillRect","drawImage","textAlign","line","index","yPosition","fillText","pngUrl","toDataURL","link","href","download","body","appendChild","click","removeChild","revokeObjectURL","src","newSku"],"sources":["C:\\Users\\Administrator\\OneDrive\\Desktop\\POSExpress\\frontend\\src\\components\\Admin\\Inventory\\Barcode.vue"],"sourcesContent":["<script>\r\nimport JsBarcode from 'jsbarcode';\r\nimport { onMounted, watch, ref, nextTick } from 'vue';\r\n\r\nexport default {\r\n  props: {\r\n    sku: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    productName: {\r\n      type: String,\r\n      default: 'Product Name' \r\n    }\r\n  },\r\n  setup(props) {\r\n    const svgRef = ref(null);\r\n    const errorMessage = ref('');\r\n    const fallbackSku = '0000000000000';\r\n\r\n    const calculateEAN13Checksum = (sku) => {\r\n      const digits = sku.split('').map(Number);\r\n      let sum = 0;\r\n      for (let i = 0; i < 12; i++) {\r\n        sum += (i % 2 === 0 ? digits[i] : digits[i] * 3);\r\n      }\r\n      return (10 - (sum % 10)) % 10;\r\n    };\r\n\r\n    const generateBarcode = async (sku) => {\r\n  try {\r\n    // Use fallback SKU if no valid SKU is provided\r\n    if (!sku || typeof sku !== 'string' || sku.length === 0) {\r\n      sku = fallbackSku; // Use fallback SKU when sku is empty or invalid\r\n    }\r\n\r\n    if (sku.length < 13) {\r\n      sku = sku.padStart(13, '0');\r\n    } else if (sku.length > 13) {\r\n      sku = sku.slice(0, 13);\r\n    }\r\n\r\n    if (sku.length !== 13 || !/^\\d{13}$/.test(sku)) {\r\n      throw new Error('Invalid SKU format: must be numeric and 13 digits.');\r\n    }\r\n\r\n    const checksum = calculateEAN13Checksum(sku);\r\n    sku = sku.slice(0, 12) + checksum;\r\n    errorMessage.value = '';\r\n    await nextTick();\r\n\r\n    JsBarcode(svgRef.value, sku, {\r\n      format: 'EAN13',\r\n      lineColor: '#000',\r\n      width: 2,\r\n      height: 50,\r\n      displayValue: true\r\n    });\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    errorMessage.value = error.message;\r\n    JsBarcode(svgRef.value, fallbackSku, {\r\n      format: 'CODE128',\r\n      lineColor: '#000',\r\n      width: 2,\r\n      height: 50,\r\n      displayValue: true\r\n    });\r\n  }\r\n};\r\nconst downloadBarcode = () => {\r\n  const svg = svgRef.value;\r\n  const canvas = document.createElement('canvas');\r\n  const ctx = canvas.getContext('2d');\r\n  const svgData = new XMLSerializer().serializeToString(svg);\r\n  const img = new Image();\r\n  const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\r\n  const url = URL.createObjectURL(svgBlob);\r\n\r\n  // Set up text wrapping logic\r\n  const fontSize = 16;      // Font size for the text\r\n  const lineHeight = 20;    // Height between lines of text\r\n  ctx.font = `${fontSize}px Arial`;  // Set font for the context\r\n\r\n  img.onload = () => {\r\n    const barcodeWidth = img.width; // Barcode width is used for text wrapping\r\n    const maxLineWidth = barcodeWidth - 20; // Allow for a bit of padding on the sides\r\n\r\n    // Split the product name into multiple lines based on maxLineWidth\r\n    const words = props.productName.split(' ');\r\n    const lines = [];\r\n    let currentLine = '';\r\n\r\n    // Loop through each word and measure if it fits in the current line\r\n    words.forEach((word) => {\r\n      const testLine = currentLine + (currentLine ? ' ' : '') + word;\r\n      const testWidth = ctx.measureText(testLine).width;\r\n      if (testWidth > maxLineWidth) {\r\n        // If the line is too long, push the current line to lines array\r\n        lines.push(currentLine);\r\n        currentLine = word;  // Start a new line with the current word\r\n      } else {\r\n        // Otherwise, continue adding to the current line\r\n        currentLine = testLine;\r\n      }\r\n    });\r\n    lines.push(currentLine);  // Add the last line\r\n\r\n    // Calculate the canvas size\r\n    const barcodeHeight = img.height;\r\n    const textHeight = lines.length * lineHeight; // Height for all text lines\r\n    canvas.width = barcodeWidth; // Set canvas width to barcode width\r\n    canvas.height = barcodeHeight + textHeight + 20; // Adjust height for text and padding\r\n\r\n    // Draw background (white)\r\n    ctx.fillStyle = 'white';\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Draw barcode image onto the canvas\r\n    ctx.drawImage(img, 0, 0);\r\n\r\n    // Draw text lines, centered horizontally\r\n    ctx.fillStyle = 'black';\r\n    ctx.textAlign = 'center';\r\n\r\n    // Loop through the lines and draw each line of text\r\n    lines.forEach((line, index) => {\r\n      const yPosition = barcodeHeight + (index + 1) * lineHeight;\r\n      ctx.fillText(line, canvas.width / 2, yPosition);\r\n    });\r\n\r\n    // Download the image as PNG\r\n    const pngUrl = canvas.toDataURL('image/png');\r\n    const link = document.createElement('a');\r\n    link.href = pngUrl;\r\n    link.download = `${props.sku}_barcode.png`;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  img.src = url;\r\n};\r\n\r\n\r\n\r\n    onMounted(() => generateBarcode(props.sku));\r\n    watch(() => props.sku, (newSku) => {\r\n      generateBarcode(newSku);\r\n    });\r\n\r\n    return {\r\n      svgRef,\r\n      errorMessage,\r\n      downloadBarcode\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"row px-5\">\r\n    <div class=\"row\">\r\n      <div v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div>\r\n      <svg ref=\"svgRef\"></svg>\r\n      <div class=\"product-name text-center\">{{ productName }}</div>\r\n    </div>\r\n    <div class=\"row ps-4 pe-3\">\r\n      <button class=\"btn btn-primary fs-6\" @click=\"downloadBarcode\"><span>Download </span><font-awesome-icon icon=\"download\" style=\"color: #ffffff;\" /></button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.error-message {\r\n  color: red;\r\n  font-weight: bold;\r\n  margin-top: 10px;\r\n}\r\n\r\n.product-name {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  margin-top: 5px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  color: black;\r\n  font-weight: bold;\r\n  word-break: break-word;\r\n  max-width: 80%;\r\n}\r\n\r\n\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}