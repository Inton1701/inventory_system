{"ast":null,"code":"import JsBarcode from 'jsbarcode';\nimport { onMounted, watch, ref } from 'vue';\nexport default {\n  props: {\n    sku: {\n      type: String,\n      default: '' // Ensure a default value to avoid undefined\n    }\n  },\n  setup(props) {\n    const svgRef = ref(null);\n    const errorMessage = ref(''); // Ref to store error message\n    const fallbackSku = '0000000000000'; // Default SKU for fallback barcode\n\n    const generateBarcode = sku => {\n      // Check if SKU exists and is a string with a length property\n      if (!sku || typeof sku !== 'string') {\n        console.error('Invalid SKU:', sku);\n        errorMessage.value = 'Invalid SKU';\n        // Generate a fallback barcode if SKU is invalid\n        JsBarcode(svgRef.value, fallbackSku, {\n          format: 'CODE128',\n          // Alternative barcode format\n          lineColor: '#000',\n          width: 2,\n          height: 50,\n          displayValue: true\n        });\n        return;\n      }\n\n      // Pad or truncate SKU to ensure it’s exactly 13 characters for EAN-13 format\n      if (sku.length < 13) {\n        sku = sku.padStart(13, '0'); // Pad with leading zeros\n      } else if (sku.length > 13) {\n        sku = sku.slice(0, 13); // Truncate if longer than 13\n      }\n\n      // Ensure the SKU is numeric and exactly 13 digits long\n      if (sku.length !== 13 || !/^\\d{13}$/.test(sku)) {\n        console.error('Invalid SKU format:', sku);\n        errorMessage.value = 'Invalid SKU format: must be numeric and 13 digits.';\n        // Generate a fallback barcode in this case as well\n        JsBarcode(svgRef.value, fallbackSku, {\n          format: 'CODE128',\n          // Alternative barcode format\n          lineColor: '#000',\n          width: 2,\n          height: 50,\n          displayValue: true\n        });\n        return;\n      }\n\n      // Clear error message if valid SKU is detected\n      errorMessage.value = '';\n\n      // Generate the barcode using JsBarcode\n      JsBarcode(svgRef.value, sku, {\n        format: 'EAN13',\n        lineColor: '#000',\n        width: 2,\n        height: 50,\n        displayValue: true\n      });\n    };\n\n    // Generate barcode on component mount\n    onMounted(() => generateBarcode(props.sku));\n\n    // Watch for SKU changes\n    watch(() => props.sku, newSku => {\n      generateBarcode(newSku);\n    });\n    return {\n      svgRef,\n      errorMessage\n    };\n  }\n};","map":{"version":3,"names":["JsBarcode","onMounted","watch","ref","props","sku","type","String","default","setup","svgRef","errorMessage","fallbackSku","generateBarcode","console","error","value","format","lineColor","width","height","displayValue","length","padStart","slice","test","newSku"],"sources":["C:\\Users\\Administrator\\OneDrive\\Desktop\\POSExpress\\frontend\\src\\components\\Admin\\Inventory\\Barcode.vue"],"sourcesContent":["<script>\r\nimport JsBarcode from 'jsbarcode';\r\nimport { onMounted, watch, ref } from 'vue';\r\n\r\nexport default {\r\n  props: {\r\n    sku: {\r\n      type: String,\r\n      default: '' // Ensure a default value to avoid undefined\r\n    }\r\n  },\r\n  setup(props) {\r\n    const svgRef = ref(null);\r\n    const errorMessage = ref(''); // Ref to store error message\r\n    const fallbackSku = '0000000000000'; // Default SKU for fallback barcode\r\n\r\n    const generateBarcode = (sku) => {\r\n      // Check if SKU exists and is a string with a length property\r\n      if (!sku || typeof sku !== 'string') {\r\n        console.error('Invalid SKU:', sku);\r\n        errorMessage.value = 'Invalid SKU';\r\n        // Generate a fallback barcode if SKU is invalid\r\n        JsBarcode(svgRef.value, fallbackSku, {\r\n          format: 'CODE128', // Alternative barcode format\r\n          lineColor: '#000',\r\n          width: 2,\r\n          height: 50,\r\n          displayValue: true\r\n        });\r\n        return;\r\n      }\r\n      \r\n      // Pad or truncate SKU to ensure it’s exactly 13 characters for EAN-13 format\r\n      if (sku.length < 13) {\r\n        sku = sku.padStart(13, '0'); // Pad with leading zeros\r\n      } else if (sku.length > 13) {\r\n        sku = sku.slice(0, 13); // Truncate if longer than 13\r\n      }\r\n\r\n      // Ensure the SKU is numeric and exactly 13 digits long\r\n      if (sku.length !== 13 || !/^\\d{13}$/.test(sku)) {\r\n        console.error('Invalid SKU format:', sku);\r\n        errorMessage.value = 'Invalid SKU format: must be numeric and 13 digits.';\r\n        // Generate a fallback barcode in this case as well\r\n        JsBarcode(svgRef.value, fallbackSku, {\r\n          format: 'CODE128', // Alternative barcode format\r\n          lineColor: '#000',\r\n          width: 2,\r\n          height: 50,\r\n          displayValue: true\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Clear error message if valid SKU is detected\r\n      errorMessage.value = '';\r\n\r\n      // Generate the barcode using JsBarcode\r\n      JsBarcode(svgRef.value, sku, {\r\n        format: 'EAN13',\r\n        lineColor: '#000',\r\n        width: 2,\r\n        height: 50,\r\n        displayValue: true\r\n      });\r\n    };\r\n\r\n    // Generate barcode on component mount\r\n    onMounted(() => generateBarcode(props.sku));\r\n\r\n    // Watch for SKU changes\r\n    watch(() => props.sku, (newSku) => {\r\n      generateBarcode(newSku);\r\n    });\r\n\r\n    return {\r\n      svgRef,\r\n      errorMessage\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div>\r\n    <svg ref=\"svgRef\"></svg>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.error-message {\r\n  color: red;\r\n  font-weight: bold;\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":"AACA,OAAOA,SAAQ,MAAO,WAAW;AACjC,SAASC,SAAS,EAAEC,KAAK,EAAEC,GAAE,QAAS,KAAK;AAE3C,eAAe;EACbC,KAAK,EAAE;IACLC,GAAG,EAAE;MACHC,IAAI,EAAEC,MAAM;MACZC,OAAO,EAAE,EAAC,CAAE;IACd;EACF,CAAC;EACDC,KAAKA,CAACL,KAAK,EAAE;IACX,MAAMM,MAAK,GAAIP,GAAG,CAAC,IAAI,CAAC;IACxB,MAAMQ,YAAW,GAAIR,GAAG,CAAC,EAAE,CAAC,EAAE;IAC9B,MAAMS,WAAU,GAAI,eAAe,EAAE;;IAErC,MAAMC,eAAc,GAAKR,GAAG,IAAK;MAC/B;MACA,IAAI,CAACA,GAAE,IAAK,OAAOA,GAAE,KAAM,QAAQ,EAAE;QACnCS,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEV,GAAG,CAAC;QAClCM,YAAY,CAACK,KAAI,GAAI,aAAa;QAClC;QACAhB,SAAS,CAACU,MAAM,CAACM,KAAK,EAAEJ,WAAW,EAAE;UACnCK,MAAM,EAAE,SAAS;UAAE;UACnBC,SAAS,EAAE,MAAM;UACjBC,KAAK,EAAE,CAAC;UACRC,MAAM,EAAE,EAAE;UACVC,YAAY,EAAE;QAChB,CAAC,CAAC;QACF;MACF;;MAEA;MACA,IAAIhB,GAAG,CAACiB,MAAK,GAAI,EAAE,EAAE;QACnBjB,GAAE,GAAIA,GAAG,CAACkB,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE;MAC/B,OAAO,IAAIlB,GAAG,CAACiB,MAAK,GAAI,EAAE,EAAE;QAC1BjB,GAAE,GAAIA,GAAG,CAACmB,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;MAC1B;;MAEA;MACA,IAAInB,GAAG,CAACiB,MAAK,KAAM,EAAC,IAAK,CAAC,UAAU,CAACG,IAAI,CAACpB,GAAG,CAAC,EAAE;QAC9CS,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEV,GAAG,CAAC;QACzCM,YAAY,CAACK,KAAI,GAAI,oDAAoD;QACzE;QACAhB,SAAS,CAACU,MAAM,CAACM,KAAK,EAAEJ,WAAW,EAAE;UACnCK,MAAM,EAAE,SAAS;UAAE;UACnBC,SAAS,EAAE,MAAM;UACjBC,KAAK,EAAE,CAAC;UACRC,MAAM,EAAE,EAAE;UACVC,YAAY,EAAE;QAChB,CAAC,CAAC;QACF;MACF;;MAEA;MACAV,YAAY,CAACK,KAAI,GAAI,EAAE;;MAEvB;MACAhB,SAAS,CAACU,MAAM,CAACM,KAAK,EAAEX,GAAG,EAAE;QAC3BY,MAAM,EAAE,OAAO;QACfC,SAAS,EAAE,MAAM;QACjBC,KAAK,EAAE,CAAC;QACRC,MAAM,EAAE,EAAE;QACVC,YAAY,EAAE;MAChB,CAAC,CAAC;IACJ,CAAC;;IAED;IACApB,SAAS,CAAC,MAAMY,eAAe,CAACT,KAAK,CAACC,GAAG,CAAC,CAAC;;IAE3C;IACAH,KAAK,CAAC,MAAME,KAAK,CAACC,GAAG,EAAGqB,MAAM,IAAK;MACjCb,eAAe,CAACa,MAAM,CAAC;IACzB,CAAC,CAAC;IAEF,OAAO;MACLhB,MAAM;MACNC;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}