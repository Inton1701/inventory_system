{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"page-wrapper\"\n};\nconst _hoisted_2 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Navbar = _resolveComponent(\"Navbar\");\n  const _component_v_chart = _resolveComponent(\"v-chart\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_Navbar), _createElementVNode(\"div\", _hoisted_1, [_createCommentVNode(\" Ensure chartOptions is defined and contains series before rendering the chart \"), _ctx.chartOptions && _ctx.chartOptions.series && _ctx.chartOptions.series.length > 0 ? (_openBlock(), _createBlock(_component_v_chart, {\n    key: 0,\n    options: _ctx.chartOptions,\n    style: {\n      \"height\": \"400px\",\n      \"width\": \"100%\"\n    }\n  }, null, 8 /* PROPS */, [\"options\"])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"Loading chart data...\"))])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_Fragment","_createVNode","_component_Navbar","_createElementVNode","_hoisted_1","_createCommentVNode","_ctx","chartOptions","series","length","_createBlock","_component_v_chart","options","style","_hoisted_2"],"sources":["C:\\Users\\Administrator\\OneDrive\\Desktop\\POSExpress\\frontend\\src\\components\\Admin\\Main\\Dashboard.vue"],"sourcesContent":["<template>\r\n  <Navbar />\r\n  <div class=\"page-wrapper\">\r\n\r\n          <!-- Ensure chartOptions is defined and contains series before rendering the chart -->\r\n          <v-chart\r\n            v-if=\"chartOptions && chartOptions.series && chartOptions.series.length > 0\"\r\n            :options=\"chartOptions\"\r\n            style=\"height: 400px; width: 100%;\"\r\n          />\r\n          <p v-else>Loading chart data...</p>\r\n        </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed, defineComponent } from \"vue\";\r\nimport { VChart } from \"vue-echarts\"; // Import VueECharts\r\nimport axios from \"axios\";\r\nimport Navbar from \"/src/components/Admin/Navbar.vue\";\r\n\r\n// Import ECharts core modules and specific chart types\r\nimport * as echarts from \"echarts\";\r\nimport \"echarts/lib/chart/line\";\r\nimport \"echarts/lib/component/tooltip\";\r\nimport \"echarts/lib/component/title\";\r\nimport \"echarts/lib/component/legend\";\r\n\r\n// Registering the chart types globally (optional)\r\necharts.registerTheme('my-theme', {\r\n  color: ['#0f4b5e', '#ff7f00', '#ff00ff'],\r\n});\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    Navbar,\r\n    VChart,\r\n  },\r\n  setup() {\r\n    const select = ref(\".select\");\r\n    const salesData = ref([]);\r\n\r\n    // Chart options computed based on salesData\r\n    const chartOptions = computed(() => {\r\n      if (salesData.value.length === 0) {\r\n        return {}; // Return empty object to prevent rendering before data is fetched\r\n      }\r\n\r\n      const labels = salesData.value.map((data) => data._id); // Assuming '_id' as labels\r\n      const totalSales = salesData.value.map((data) => data.totalSales);\r\n      const totalProfit = salesData.value.map((data) => data.totalProfit);\r\n\r\n      return {\r\n        title: {\r\n          text: 'Sales and Profit Over Time',\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n        },\r\n        legend: {\r\n          data: ['Total Sales', 'Total Profit'],\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          data: labels,\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n        },\r\n        series: [\r\n          {\r\n            name: 'Total Sales',\r\n            type: 'line',\r\n            data: totalSales,\r\n            smooth: true,\r\n            lineStyle: {\r\n              color: \"#4bc0c0\", // Custom color for Total Sales\r\n            },\r\n            areaStyle: {\r\n              color: \"rgba(75, 192, 192, 0.2)\",\r\n            },\r\n          },\r\n          {\r\n            name: 'Total Profit',\r\n            type: 'line',\r\n            data: totalProfit,\r\n            smooth: true,\r\n            lineStyle: {\r\n              color: \"#ff6384\", // Custom color for Total Profit\r\n            },\r\n            areaStyle: {\r\n              color: \"rgba(255, 99, 132, 0.2)\",\r\n            },\r\n          },\r\n        ],\r\n      };\r\n    });\r\n\r\n    // Fetch the sales data\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/get_sales\");\r\n        if (response.data.success) {\r\n          salesData.value = response.data.salesDatas;\r\n          console.log(\"Sales data fetched:\", salesData.value);\r\n        } else {\r\n          console.error(\"Failed to fetch sales data\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching sales data:\", error);\r\n      }\r\n    });\r\n\r\n    return {\r\n      select,\r\n      salesData,\r\n      chartOptions, // Chart options (computed property)\r\n    };\r\n  },\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n/* Optional styling for your page or components */\r\n#salesChart {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  height: 400px;\r\n}\r\n</style>\r\n"],"mappings":";;EAEOA,KAAK,EAAC;AAAc;;EAF3BC,GAAA;AAAA;;;;uBAAAC,mBAAA,CAAAC,SAAA,SACEC,YAAA,CAAUC,iBAAA,GACVC,mBAAA,CASY,OATZC,UASY,GAPJC,mBAAA,mFAAsF,EAE9EC,IAAA,CAAAC,YAAY,IAAID,IAAA,CAAAC,YAAY,CAACC,MAAM,IAAIF,IAAA,CAAAC,YAAY,CAACC,MAAM,CAACC,MAAM,Q,cADzEC,YAAA,CAIEC,kBAAA;IATZb,GAAA;IAOac,OAAO,EAAEN,IAAA,CAAAC,YAAY;IACtBM,KAAmC,EAAnC;MAAA;MAAA;IAAA;yDAEFd,mBAAA,CAAmC,KAV7Ce,UAAA,EAUoB,uBAAqB,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}