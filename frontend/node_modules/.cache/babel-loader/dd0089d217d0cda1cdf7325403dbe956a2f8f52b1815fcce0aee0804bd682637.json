{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport { ref, onMounted, computed, defineComponent } from \"vue\";\nimport ApexCharts from \"vue3-apexcharts\"; // Import the vue3-apexcharts component\nimport axios from \"axios\";\nimport Navbar from \"/src/components/Admin/Navbar.vue\";\nexport default defineComponent({\n  components: {\n    Navbar,\n    apexchart: ApexCharts // Register ApexCharts component\n  },\n  setup() {\n    const salesData = ref([]);\n\n    // Chart options computed based on salesData\n    const chartOptions = computed(() => {\n      if (salesData.value.length === 0) {\n        return {}; // Return empty object to prevent rendering before data is fetched\n      }\n      const labels = salesData.value.map(data => data._id); // Assuming '_id' as labels\n      const totalSales = salesData.value.map(data => data.totalSales);\n      const totalProfit = salesData.value.map(data => data.totalProfit);\n      return {\n        chart: {\n          id: \"sales-chart\",\n          toolbar: {\n            show: true // Optionally enable/disable toolbar (zoom, download, etc.)\n          }\n        },\n        title: {\n          text: \"Sales and Profit Over Time\",\n          align: \"center\"\n        },\n        xaxis: {\n          categories: labels // Set x-axis categories to the dates\n        },\n        yaxis: {\n          title: {\n            text: \"Values\"\n          }\n        },\n        series: [{\n          name: \"Total Sales\",\n          data: totalSales // Data for the 'Total Sales' line\n        }, {\n          name: \"Total Profit\",\n          data: totalProfit // Data for the 'Total Profit' line\n        }],\n        stroke: {\n          curve: \"smooth\" // Smooth the lines\n        },\n        fill: {\n          opacity: 0.3 // Set the opacity of the area under the curve\n        },\n        tooltip: {\n          shared: true,\n          intersect: false\n        }\n      };\n    });\n\n    // Fetch the sales data\n    onMounted(async () => {\n      try {\n        const response = await axios.get(\"http://localhost:5000/api/get_sales\");\n        if (response.data.success) {\n          salesData.value = response.data.salesDatas;\n          console.log(\"Sales data fetched:\", salesData.value);\n        } else {\n          console.error(\"Failed to fetch sales data\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching sales data:\", error);\n      }\n    });\n    return {\n      salesData,\n      chartOptions // Chart options (computed property)\n    };\n  }\n});","map":{"version":3,"names":["ref","onMounted","computed","defineComponent","ApexCharts","axios","Navbar","components","apexchart","setup","salesData","chartOptions","value","length","labels","map","data","_id","totalSales","totalProfit","chart","id","toolbar","show","title","text","align","xaxis","categories","yaxis","series","name","stroke","curve","fill","opacity","tooltip","shared","intersect","response","get","success","salesDatas","console","log","error"],"sources":["C:\\Users\\Administrator\\OneDrive\\Desktop\\POSExpress\\frontend\\src\\components\\Admin\\Main\\Dashboard.vue"],"sourcesContent":["<template>\r\n  <Navbar />\r\n  <div class=\"page-wrapper\">\r\n    <div class=\"content\">\r\n      <div class=\"row\">\r\n        <div class=\"card-body\">\r\n          <!-- Ensure data is available before rendering the chart -->\r\n          <apexchart\r\n            v-if=\"chartOptions && chartOptions.series.length > 0\"\r\n            type=\"line\"\r\n            :options=\"chartOptions\"\r\n            :series=\"chartOptions.series\"\r\n            height=\"400\"\r\n          />\r\n          <p v-else>Loading chart data...</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed, defineComponent } from \"vue\";\r\nimport ApexCharts from \"vue3-apexcharts\"; // Import the vue3-apexcharts component\r\nimport axios from \"axios\";\r\nimport Navbar from \"/src/components/Admin/Navbar.vue\";\r\n\r\nexport default defineComponent({\r\n  components: {\r\n    Navbar,\r\n    apexchart: ApexCharts, // Register ApexCharts component\r\n  },\r\n  setup() {\r\n    const salesData = ref([]);\r\n\r\n    // Chart options computed based on salesData\r\n    const chartOptions = computed(() => {\r\n      if (salesData.value.length === 0) {\r\n        return {}; // Return empty object to prevent rendering before data is fetched\r\n      }\r\n\r\n      const labels = salesData.value.map((data) => data._id); // Assuming '_id' as labels\r\n      const totalSales = salesData.value.map((data) => data.totalSales);\r\n      const totalProfit = salesData.value.map((data) => data.totalProfit);\r\n\r\n      return {\r\n        chart: {\r\n          id: \"sales-chart\",\r\n          toolbar: {\r\n            show: true, // Optionally enable/disable toolbar (zoom, download, etc.)\r\n          },\r\n        },\r\n        title: {\r\n          text: \"Sales and Profit Over Time\",\r\n          align: \"center\",\r\n        },\r\n        xaxis: {\r\n          categories: labels, // Set x-axis categories to the dates\r\n        },\r\n        yaxis: {\r\n          title: {\r\n            text: \"Values\",\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            name: \"Total Sales\",\r\n            data: totalSales, // Data for the 'Total Sales' line\r\n          },\r\n          {\r\n            name: \"Total Profit\",\r\n            data: totalProfit, // Data for the 'Total Profit' line\r\n          },\r\n        ],\r\n        stroke: {\r\n          curve: \"smooth\", // Smooth the lines\r\n        },\r\n        fill: {\r\n          opacity: 0.3, // Set the opacity of the area under the curve\r\n        },\r\n        tooltip: {\r\n          shared: true,\r\n          intersect: false,\r\n        },\r\n      };\r\n    });\r\n\r\n    // Fetch the sales data\r\n    onMounted(async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/get_sales\");\r\n        if (response.data.success) {\r\n          salesData.value = response.data.salesDatas;\r\n          console.log(\"Sales data fetched:\", salesData.value);\r\n        } else {\r\n          console.error(\"Failed to fetch sales data\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching sales data:\", error);\r\n      }\r\n    });\r\n\r\n    return {\r\n      salesData,\r\n      chartOptions, // Chart options (computed property)\r\n    };\r\n  },\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n/* Optional styling for your page or components */\r\n#salesChart {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  height: 400px;\r\n}\r\n</style>\r\n"],"mappings":";AAsBA,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,eAAc,QAAS,KAAK;AAC/D,OAAOC,UAAS,MAAO,iBAAiB,EAAE;AAC1C,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,MAAK,MAAO,kCAAkC;AAErD,eAAeH,eAAe,CAAC;EAC7BI,UAAU,EAAE;IACVD,MAAM;IACNE,SAAS,EAAEJ,UAAU,CAAE;EACzB,CAAC;EACDK,KAAKA,CAAA,EAAG;IACN,MAAMC,SAAQ,GAAIV,GAAG,CAAC,EAAE,CAAC;;IAEzB;IACA,MAAMW,YAAW,GAAIT,QAAQ,CAAC,MAAM;MAClC,IAAIQ,SAAS,CAACE,KAAK,CAACC,MAAK,KAAM,CAAC,EAAE;QAChC,OAAO,CAAC,CAAC,EAAE;MACb;MAEA,MAAMC,MAAK,GAAIJ,SAAS,CAACE,KAAK,CAACG,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,GAAG,CAAC,EAAE;MACxD,MAAMC,UAAS,GAAIR,SAAS,CAACE,KAAK,CAACG,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACE,UAAU,CAAC;MACjE,MAAMC,WAAU,GAAIT,SAAS,CAACE,KAAK,CAACG,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACG,WAAW,CAAC;MAEnE,OAAO;QACLC,KAAK,EAAE;UACLC,EAAE,EAAE,aAAa;UACjBC,OAAO,EAAE;YACPC,IAAI,EAAE,IAAI,CAAE;UACd;QACF,CAAC;QACDC,KAAK,EAAE;UACLC,IAAI,EAAE,4BAA4B;UAClCC,KAAK,EAAE;QACT,CAAC;QACDC,KAAK,EAAE;UACLC,UAAU,EAAEd,MAAM,CAAE;QACtB,CAAC;QACDe,KAAK,EAAE;UACLL,KAAK,EAAE;YACLC,IAAI,EAAE;UACR;QACF,CAAC;QACDK,MAAM,EAAE,CACN;UACEC,IAAI,EAAE,aAAa;UACnBf,IAAI,EAAEE,UAAU,CAAE;QACpB,CAAC,EACD;UACEa,IAAI,EAAE,cAAc;UACpBf,IAAI,EAAEG,WAAW,CAAE;QACrB,CAAC,CACF;QACDa,MAAM,EAAE;UACNC,KAAK,EAAE,QAAQ,CAAE;QACnB,CAAC;QACDC,IAAI,EAAE;UACJC,OAAO,EAAE,GAAG,CAAE;QAChB,CAAC;QACDC,OAAO,EAAE;UACPC,MAAM,EAAE,IAAI;UACZC,SAAS,EAAE;QACb;MACF,CAAC;IACH,CAAC,CAAC;;IAEF;IACArC,SAAS,CAAC,YAAY;MACpB,IAAI;QACF,MAAMsC,QAAO,GAAI,MAAMlC,KAAK,CAACmC,GAAG,CAAC,qCAAqC,CAAC;QACvE,IAAID,QAAQ,CAACvB,IAAI,CAACyB,OAAO,EAAE;UACzB/B,SAAS,CAACE,KAAI,GAAI2B,QAAQ,CAACvB,IAAI,CAAC0B,UAAU;UAC1CC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAElC,SAAS,CAACE,KAAK,CAAC;QACrD,OAAO;UACL+B,OAAO,CAACE,KAAK,CAAC,4BAA4B,CAAC;QAC7C;MACF,EAAE,OAAOA,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC,CAAC;IAEF,OAAO;MACLnC,SAAS;MACTC,YAAY,CAAE;IAChB,CAAC;EACH;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}