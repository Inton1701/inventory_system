{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"svgRef\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [(_openBlock(), _createElementBlock(\"svg\", _hoisted_1, null, 512 /* NEED_PATCH */)), _createCommentVNode(\" SVG element to display the barcode \")], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["ref","_createElementBlock","_Fragment","_hoisted_1","_createCommentVNode"],"sources":["C:\\Users\\Administrator\\OneDrive\\Desktop\\POSExpress\\frontend\\src\\components\\Admin\\Inventory\\Barcode.vue"],"sourcesContent":["<template>\r\n  <svg ref=\"svgRef\"></svg> <!-- SVG element to display the barcode -->\r\n</template>\r\n\r\n<script>\r\nimport JsBarcode from 'jsbarcode';\r\nimport { onMounted, watch, ref } from 'vue';\r\n\r\nexport default {\r\n  props: {\r\n    sku: {\r\n      type: String,\r\n      default: '' // Ensure a default value to avoid undefined\r\n    }\r\n  },\r\n  setup(props) {\r\n    const svgRef = ref(null);\r\n\r\n    const generateBarcode = (sku) => {\r\n      // Check if SKU exists and is a string with a length property\r\n      if (!sku || typeof sku !== 'string') {\r\n        console.error('Invalid SKU:', sku);\r\n        return;\r\n      }\r\n      \r\n      // Pad or truncate SKU to ensure itâ€™s exactly 13 characters for EAN-13 format\r\n      if (sku.length < 13) {\r\n        sku = sku.padStart(13, '0'); // Pad with leading zeros\r\n      } else if (sku.length > 13) {\r\n        sku = sku.slice(0, 13); // Truncate if longer than 13\r\n      }\r\n\r\n      JsBarcode(svgRef.value, sku, {\r\n        format: 'EAN13',\r\n        lineColor: '#000',\r\n        width: 2,\r\n        height: 50,\r\n        displayValue: true\r\n      });\r\n    };\r\n\r\n    // Generate barcode on component mount\r\n    onMounted(() => generateBarcode(props.sku));\r\n\r\n    // Watch for changes to the SKU prop and regenerate the barcode if it changes\r\n    watch(() => props.sku, (newSku) => {\r\n      generateBarcode(newSku);\r\n    });\r\n\r\n    return {\r\n      svgRef\r\n    };\r\n  }\r\n};\r\n</script>\r\n"],"mappings":";;EACOA,GAAG,EAAC;AAAQ;;uBADnBC,mBAAA,CAAAC,SAAA,U,cACED,mBAAA,CAAwB,OAAxBE,UAAwB,gCAACC,mBAAA,wCAA2C,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}