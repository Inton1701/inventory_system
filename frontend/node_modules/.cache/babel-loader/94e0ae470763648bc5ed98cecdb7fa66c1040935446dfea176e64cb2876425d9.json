{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport { ref, computed, onMounted, onBeforeUnmount } from \"vue\";\nimport axios from \"axios\";\nexport default {\n  setup() {\n    const apiURL = process.env.VUE_APP_URL;\n    const selectedCategory = ref(\"all\");\n    const barcode = ref(\"\");\n    const barcodeInput = ref(null);\n    const cart = ref([]);\n    const categories = ref([]);\n    const subtotal = ref(0);\n    const tax = ref(12); // Example tax rate\n    const discount = ref(0);\n    const total = computed(() => subtotal.value + subtotal.value * tax.value / 100 - discount.value);\n    const barcodeError = ref({\n      message: null\n    });\n    const lastAddedProduct = ref(null);\n    const stockQuantity = ref(null); // Store the stock quantity of the last fetched product\n    const newQuantity = ref(1); // New quantity input for the modal\n    const quantityError = ref(null);\n    const getCategories = async () => {\n      try {\n        const response = await axios.get(`${apiURL}/get_category_list`);\n        categories.value = response.data.categories;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const addProduct = async () => {\n      try {\n        // Ensure barcode input is not empty\n        if (!barcode.value.trim()) {\n          barcodeError.value.message = \"Please enter a valid barcode.\";\n          return;\n        }\n\n        // Fetch product by barcode using API\n        const response = await axios.get(`${apiURL}/get_product_info/${barcode.value.trim()}`);\n        if (response.data.success) {\n          const product = response.data.product;\n          barcodeError.value.message = null;\n\n          // Store the last added product and its stock quantity\n          lastAddedProduct.value = product;\n\n          // Use `_id` as the unique key to identify the product in the cart\n          const existingItem = cart.value.find(item => item._id === product._id);\n          if (existingItem) {\n            // If product already exists, check if the new quantity exceeds stock limit\n            if (existingItem.quantity < product.stock_quantity) {\n              existingItem.quantity += 1; // Increment quantity if product exists and stock allows\n            } else {\n              barcodeError.value.message = `Maximum stock reached for ${product.name}.`; // Stock limit reached\n            }\n          } else {\n            // Add product to cart with quantity 1 if not found\n            cart.value.push({\n              ...product,\n              quantity: 1\n            });\n          }\n          updateSubtotal(); // Update subtotal after adding the product\n        } else {\n          barcodeError.value.message = response.data.message || \"Product not found.\";\n        }\n      } catch (error) {\n        console.error(\"Error adding product:\", error);\n        barcodeError.value.message = \"An error occurred while fetching the product.\";\n      } finally {\n        barcode.value = \"\"; // Clear barcode input\n      }\n    };\n    const updateSubtotal = () => {\n      subtotal.value = cart.value.reduce((sum, item) => sum + item.quantity * item.price, 0);\n    };\n    const selectCategory = category => {\n      selectedCategory.value = category;\n    };\n    const handleKeydown = event => {\n      if (event.key.toLowerCase() === \"q\") {\n        event.preventDefault(); // Prevent 'q' from being input in the barcode\n        openQuantityModal();\n      }\n    };\n    const openQuantityModal = () => {\n      if (lastAddedProduct.value) {\n        const modalElement = document.getElementById(\"update-quantity-modal\");\n        const modal = new bootstrap.Modal(modalElement);\n        if (modal) {\n          modal.show();\n\n          // Focus on the input field when modal is shown\n          modalElement.addEventListener(\"shown.bs.modal\", () => {\n            const inputField = modalElement.querySelector(\"input\");\n            if (inputField) {\n              inputField.focus();\n            }\n          });\n        }\n      } else {\n        barcodeError.value.message = \"No product in cart yet.\";\n      }\n    };\n    const updateProductQuantity = () => {\n      const updatedProduct = lastAddedProduct.value;\n      if (updatedProduct) {\n        // Validate quantity\n        if (newQuantity.value > updatedProduct.stock_quantity) {\n          quantityError.value = `Only ${updatedProduct.stock_quantity} in stock.`;\n          return;\n        }\n\n        // Update quantity in cart\n        const cartItem = cart.value.find(item => item._id === updatedProduct._id);\n        if (cartItem) {\n          cartItem.quantity = newQuantity.value;\n        }\n\n        // Recalculate subtotal\n        updateSubtotal();\n\n        // Hide modal\n        const modalElement = document.getElementById(\"update-quantity-modal\");\n        const modal = bootstrap.Modal.getInstance(modalElement);\n        if (modal) {\n          modal.hide();\n        }\n\n        // Reset state\n        newQuantity.value = 1;\n        quantityError.value = null;\n\n        // Focus back to barcode input\n        barcodeInput.value.focus();\n      }\n    };\n    onMounted(() => {\n      getCategories();\n      barcodeInput.value.focus();\n      window.addEventListener(\"keydown\", handleKeydown);\n    });\n    onBeforeUnmount(() => {\n      window.removeEventListener(\"keydown\", handleKeydown);\n    });\n    return {\n      categories,\n      selectedCategory,\n      barcode,\n      cart,\n      subtotal,\n      tax,\n      discount,\n      total,\n      selectCategory,\n      addProduct,\n      lastAddedProduct,\n      stockQuantity,\n      newQuantity,\n      updateProductQuantity,\n      barcodeError,\n      quantityError,\n      barcodeInput\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","onBeforeUnmount","axios","setup","apiURL","process","env","VUE_APP_URL","selectedCategory","barcode","barcodeInput","cart","categories","subtotal","tax","discount","total","value","barcodeError","message","lastAddedProduct","stockQuantity","newQuantity","quantityError","getCategories","response","get","data","error","console","addProduct","trim","success","product","existingItem","find","item","_id","quantity","stock_quantity","name","push","updateSubtotal","reduce","sum","price","selectCategory","category","handleKeydown","event","key","toLowerCase","preventDefault","openQuantityModal","modalElement","document","getElementById","modal","bootstrap","Modal","show","addEventListener","inputField","querySelector","focus","updateProductQuantity","updatedProduct","cartItem","getInstance","hide","window","removeEventListener"],"sources":["C:\\Users\\Administrator\\OneDrive\\Desktop\\POSExpress\\frontend\\src\\components\\Apps\\POS.vue"],"sourcesContent":["<template>\r\n  <div class=\"main-wrapper\">\r\n    <div class=\"header\">\r\n      <!-- Header Content -->\r\n    </div>\r\n\r\n    <div class=\"page-wrapper pos-pg-wrapper ms-0\">\r\n      <div class=\"content pos-design p-0\">\r\n        <div class=\"row align-items-start pos-wrapper\">\r\n          <!-- Category Sidebar -->\r\n          <div class=\"col-md-3 col-lg-2 ps-0\">\r\n            <div class=\"category-list\">\r\n              <h5>Categories</h5>\r\n              <ul class=\"list-group text-center\">\r\n                <li v-for=\"category in categories\" :key=\"category.name\" class=\"list-group-item\"\r\n                  :class=\"{ 'active': selectedCategory === category.name }\" @click=\"selectCategory(category.name)\">\r\n                  <a href=\"javascript:void(0);\">{{ category.name }}</a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Product Display -->\r\n          <div class=\"col-md-12 col-lg-6\">\r\n            <div class=\"row bg-white px-4 pb-5 mx-3 mt-2\">\r\n              <h4>Enter Barcode:</h4>\r\n              <input v-model=\"barcode\" ref=\"barcodeInput\"\r\n                class=\"form-control bg-light border border-dark fs-1 mb-2 mt-3\" type=\"text\" @keyup.enter=\"addProduct\"\r\n                placeholder=\"Scan Barcode\" />\r\n              <p v-if=\"barcodeError.message\" class=\"text-danger\">ERROR: {{ barcodeError.message }}</p>\r\n\r\n            </div>\r\n\r\n            <div class=\"pos-wrapper\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12 col-lg-12\">\r\n                  <div class=\"pos-products\">\r\n                    <div class=\"tabs_container\">\r\n                      <div class=\"tab_content active\" v-for=\"category in filteredCategories\" :key=\"category.name\">\r\n                        <div class=\"row\">\r\n                          <div class=\"col-sm-4 col-md-4 col-lg-5 col-xl-3 product-item\"\r\n                            v-for=\"product in category.products\" :key=\"product.id\">\r\n                            <div class=\"product-info default-cover card\">\r\n                              <a href=\"javascript:void(0);\" class=\"img-bg\">\r\n                                <img :src=\"product.image\" alt=\"Product\" />\r\n                                <span><i data-feather=\"check\"></i></span>\r\n                              </a>\r\n                              <h6 class=\"product-name\">\r\n                                <a href=\"javascript:void(0);\">{{ product.name }}</a>\r\n                              </h6>\r\n                              <div class=\"d-flex align-items-center justify-content-between price\">\r\n                                <span>{{ product.stock }} Pcs</span>\r\n                                <p>${{ product.price }}</p>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Order List and Summary -->\r\n          <div class=\"col-md-12 col-lg-4 ps-0\">\r\n            <aside class=\"product-order-list\">\r\n              <div class=\"head d-flex align-items-center justify-content-between w-100\">\r\n                <h5>Order List</h5>\r\n                <a class=\"confirm-text\" href=\"javascript:void(0);\"><i data-feather=\"trash-2\"\r\n                    class=\"feather-16 text-danger\"></i></a>\r\n              </div>\r\n\r\n              <div class=\"product-added block-section\">\r\n                <div class=\"product-wrap\">\r\n                  <table class=\"table table-responsive\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Product</th>\r\n                        <th>Price</th>\r\n                        <th>Quantity</th>\r\n                        <th>Total</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr v-for=\"item in cart\" :key=\"item.id\">\r\n                        <td>{{ item.name }}</td>\r\n                        <td>{{ item.price }}</td>\r\n                        <td>{{ item.quantity }}</td>\r\n                        <td>{{ item.quantity * item.price }}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"block-section\">\r\n                <h6>Order Summary</h6>\r\n                <table class=\"table table-responsive table-borderless\">\r\n                  <tr>\r\n                    <td>Sub Total</td>\r\n                    <td class=\"text-end\">${{ subtotal }}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Tax</td>\r\n                    <td class=\"text-end\">{{ tax }}%</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td class=\"danger\">Discount</td>\r\n                    <td class=\"danger text-end\">${{ discount }}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>Total</td>\r\n                    <td class=\"text-end\">${{ total }}</td>\r\n                  </tr>\r\n                </table>\r\n              </div>\r\n            </aside>\r\n            <div class=\"btn-row d-sm-flex align-items-center justify-content-between\">\r\n              <a href=\"javascript:void(0);\" class=\"btn btn-info btn-icon flex-fill position-relative p-4 fs-6\"\r\n                data-bs-toggle=\"modal\" data-bs-target=\"#hold-order\">\r\n                <span class=\"keyboard-key\">F1</span>\r\n                <span class=\"me-1 d-flex align-items-center\">\r\n                  <i data-feather=\"corner-up-right\" class=\"feather-16\"></i>\r\n                </span>Return\r\n              </a>\r\n              <a href=\"javascript:void(0);\" class=\"btn btn-danger btn-icon flex-fill position-relative p-4 fs-6\">\r\n                <span class=\"keyboard-key\">F2</span>\r\n                <span class=\"me-1 d-flex align-items-center\">\r\n                  <i data-feather=\"trash-2\" class=\"feather-16\"></i>\r\n                </span>Void\r\n              </a>\r\n              <a href=\"javascript:void(0);\" class=\"btn btn-success btn-icon flex-fill position-relative p-4 fs-6\"\r\n                data-bs-toggle=\"modal\" data-bs-target=\"#payment-completed\">\r\n                <span class=\"keyboard-key\">F3</span>\r\n                <span class=\"me-1 d-flex align-items-center\">\r\n                  <i data-feather=\"credit-card\" class=\"feather-16\"></i>\r\n                </span>Pay\r\n              </a>\r\n            </div>\r\n\r\n          </div>\r\n          <!-- Action Buttons -->\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!-- Modal for Updating Quantity -->\r\n  <div class=\"modal fade\" id=\"update-quantity-modal\" tabindex=\"-1\" aria-labelledby=\"update-quantity-modalLabel\"\r\n    aria-hidden=\"true\">\r\n    <div class=\"modal-dialog\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\" id=\"update-quantity-modalLabel\">Update Quantity</h5>\r\n          <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div class=\"form-group\">\r\n            <label for=\"new-quantity\">Quantity</label>\r\n            <input type=\"number\" id=\"new-quantity\" class=\"form-control\" v-model=\"newQuantity\" min=\"1\" />\r\n          </div>\r\n          <p v-if=\"quantityError\" class=\"text-danger\">{{ quantityError }}</p>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n          <button type=\"button\" class=\"btn btn-primary\" @click=\"updateProductQuantity\">Update</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n</template>\r\n\r\n<<script>\r\nimport { ref, computed, onMounted, onBeforeUnmount } from \"vue\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  setup() {\r\n    const apiURL = process.env.VUE_APP_URL;\r\n    const selectedCategory = ref(\"all\");\r\n    const barcode = ref(\"\");\r\n    const barcodeInput = ref(null);\r\n    const cart = ref([]);\r\n    const categories = ref([]);\r\n    const subtotal = ref(0);\r\n    const tax = ref(12); // Example tax rate\r\n    const discount = ref(0);\r\n    const total = computed(\r\n      () => subtotal.value + (subtotal.value * tax.value) / 100 - discount.value\r\n    );\r\n    const barcodeError = ref({ message: null });\r\n    const lastAddedProduct = ref(null);\r\n    const stockQuantity = ref(null); // Store the stock quantity of the last fetched product\r\n    const newQuantity = ref(1); // New quantity input for the modal\r\n    const quantityError = ref(null);\r\n\r\n    const getCategories = async () => {\r\n      try {\r\n        const response = await axios.get(`${apiURL}/get_category_list`);\r\n        categories.value = response.data.categories;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    const addProduct = async () => {\r\n      try {\r\n        // Ensure barcode input is not empty\r\n        if (!barcode.value.trim()) {\r\n          barcodeError.value.message = \"Please enter a valid barcode.\";\r\n          return;\r\n        }\r\n\r\n        // Fetch product by barcode using API\r\n        const response = await axios.get(\r\n          `${apiURL}/get_product_info/${barcode.value.trim()}`\r\n        );\r\n        if (response.data.success) {\r\n          const product = response.data.product;\r\n          barcodeError.value.message = null;\r\n\r\n          // Store the last added product and its stock quantity\r\n          lastAddedProduct.value = product;\r\n\r\n          // Use `_id` as the unique key to identify the product in the cart\r\n          const existingItem = cart.value.find((item) => item._id === product._id);\r\n          if (existingItem) {\r\n            // If product already exists, check if the new quantity exceeds stock limit\r\n            if (existingItem.quantity < product.stock_quantity) {\r\n              existingItem.quantity += 1; // Increment quantity if product exists and stock allows\r\n            } else {\r\n              barcodeError.value.message = `Maximum stock reached for ${product.name}.`; // Stock limit reached\r\n            }\r\n          } else {\r\n            // Add product to cart with quantity 1 if not found\r\n            cart.value.push({ ...product, quantity: 1 });\r\n          }\r\n\r\n          updateSubtotal(); // Update subtotal after adding the product\r\n        } else {\r\n          barcodeError.value.message = response.data.message || \"Product not found.\";\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error adding product:\", error);\r\n        barcodeError.value.message = \"An error occurred while fetching the product.\";\r\n      } finally {\r\n        barcode.value = \"\"; // Clear barcode input\r\n      }\r\n    };\r\n\r\n    const updateSubtotal = () => {\r\n      subtotal.value = cart.value.reduce(\r\n        (sum, item) => sum + item.quantity * item.price,\r\n        0\r\n      );\r\n    };\r\n\r\n    const selectCategory = (category) => {\r\n      selectedCategory.value = category;\r\n    };\r\n\r\n    const handleKeydown = (event) => {\r\n      if (event.key.toLowerCase() === \"q\") {\r\n        event.preventDefault(); // Prevent 'q' from being input in the barcode\r\n        openQuantityModal();\r\n      }\r\n    };\r\n\r\n    const openQuantityModal = () => {\r\n      if (lastAddedProduct.value) {\r\n        const modalElement = document.getElementById(\"update-quantity-modal\");\r\n        const modal = new bootstrap.Modal(modalElement);\r\n\r\n        if (modal) {\r\n          modal.show();\r\n\r\n          // Focus on the input field when modal is shown\r\n          modalElement.addEventListener(\"shown.bs.modal\", () => {\r\n            const inputField = modalElement.querySelector(\"input\");\r\n            if (inputField) {\r\n              inputField.focus();\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        barcodeError.value.message = \"No product in cart yet.\";\r\n      }\r\n    };\r\n\r\n    const updateProductQuantity = () => {\r\n      const updatedProduct = lastAddedProduct.value;\r\n\r\n      if (updatedProduct) {\r\n        // Validate quantity\r\n        if (newQuantity.value > updatedProduct.stock_quantity) {\r\n          quantityError.value = `Only ${updatedProduct.stock_quantity} in stock.`;\r\n          return;\r\n        }\r\n\r\n        // Update quantity in cart\r\n        const cartItem = cart.value.find((item) => item._id === updatedProduct._id);\r\n        if (cartItem) {\r\n          cartItem.quantity = newQuantity.value;\r\n        }\r\n\r\n        // Recalculate subtotal\r\n        updateSubtotal();\r\n\r\n        // Hide modal\r\n        const modalElement = document.getElementById(\"update-quantity-modal\");\r\n        const modal = bootstrap.Modal.getInstance(modalElement);\r\n        if (modal) {\r\n          modal.hide();\r\n        }\r\n\r\n        // Reset state\r\n        newQuantity.value = 1;\r\n        quantityError.value = null;\r\n\r\n        // Focus back to barcode input\r\n        barcodeInput.value.focus();\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      getCategories();\r\n      barcodeInput.value.focus();\r\n      window.addEventListener(\"keydown\", handleKeydown);\r\n    });\r\n\r\n    onBeforeUnmount(() => {\r\n      window.removeEventListener(\"keydown\", handleKeydown);\r\n    });\r\n\r\n    return {\r\n      categories,\r\n      selectedCategory,\r\n      barcode,\r\n      cart,\r\n      subtotal,\r\n      tax,\r\n      discount,\r\n      total,\r\n      selectCategory,\r\n      addProduct,\r\n      lastAddedProduct,\r\n      stockQuantity,\r\n      newQuantity,\r\n      updateProductQuantity,\r\n      barcodeError,\r\n      quantityError,\r\n      barcodeInput,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n/* Container for the product display */\r\n.tabs_container {\r\n  min-height: 620px;\r\n  max-height: 620px;\r\n  overflow-y: auto;\r\n  background: #fff;\r\n  padding: 20px;\r\n\r\n}\r\n\r\n/* Flex container for product display */\r\n.tab_content {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n  /* Space between items */\r\n  justify-content: space-between;\r\n}\r\n\r\n/* Ensure product-info fits within columns properly */\r\n.product-info {\r\n  position: relative;\r\n  padding: 15px;\r\n  background: #f9f9f9;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  transition: transform 0.2s ease-in-out;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  /* Optional shadow */\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  /* Flex to ensure each card takes equal width */\r\n  flex: 1 1 calc(33.33% - 1rem);\r\n  /* Default to 3 items per row */\r\n  height: 100%;\r\n\r\n}\r\n\r\n.product-info img {\r\n  width: 100%;\r\n  height: 150px;\r\n  /* Fixed height for images */\r\n  object-fit: cover;\r\n  /* Ensure images cover the area proportionally */\r\n}\r\n\r\n.product-info:hover {\r\n  transform: scale(1.05);\r\n  /* Slight zoom effect on hover */\r\n}\r\n\r\n/* Mobile and tablet adjustments for card layout */\r\n@media (max-width: 1200px) {\r\n  .product-info {\r\n    flex: 1 1 calc(25% - 1rem);\r\n    /* 4 items per row for large screens */\r\n    height: 300px;\r\n    /* Set height for large screens */\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .product-info {\r\n    flex: 1 1 calc(33.33% - 1rem);\r\n    /* 3 items per row for medium screens */\r\n    height: 250px;\r\n    /* Adjust height for medium screens */\r\n  }\r\n}\r\n\r\n@media (max-width: 576px) {\r\n  .product-info {\r\n    flex: 1 1 calc(50% - 1rem);\r\n    /* 2 items per row for small screens */\r\n    height: 200px;\r\n    /* Adjust height for small screens */\r\n  }\r\n}\r\n\r\n/* Category List Styling */\r\n.category-list {\r\n  padding: 15px;\r\n  background-color: #f9f9f9;\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n.category-list ul {\r\n  list-style-type: none;\r\n  padding-left: 0;\r\n}\r\n\r\n.category-list li {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.category-list a {\r\n  text-decoration: none;\r\n  color: #333;\r\n  font-size: 16px;\r\n  padding: 8px 10px;\r\n  border-radius: 4px;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.category-list a:active {\r\n  color: #fff;\r\n}\r\n\r\n.category-list a:hover {\r\n  color: #fff;\r\n\r\n}\r\n\r\n.list-group-item.active {\r\n  background-color: #22A95E;\r\n  /* Green background for active list item */\r\n  border-color: #22A95E;\r\n  /* Optional: Match border with the active color */\r\n}\r\n\r\n.list-group-item.active a {\r\n  color: #fff;\r\n  /* Make the text white inside the active list item */\r\n}\r\n\r\n/* Keyboard Key Styling for the UI */\r\n.keyboard-key {\r\n  position: absolute;\r\n  top: 5px;\r\n  left: 5px;\r\n  font-size: 12px;\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n  color: white;\r\n  padding: 5px 8px;\r\n  border-radius: 4px;\r\n  font-family: 'Courier New', monospace;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.product-wrap {\r\n  max-height: 100%;\r\n  /* Prevents fixed height causing auto-scroll */\r\n  overflow: hidden;\r\n  /* Prevents unnecessary scrollbars */\r\n}\r\n\r\n.table {\r\n  width: 100%;\r\n  /* Ensures the table fits within its container */\r\n  table-layout: auto;\r\n  /* Allows cells to resize based on content */\r\n  word-wrap: break-word;\r\n  /* Enables word wrapping for text */\r\n}\r\n\r\n.table th,\r\n.table td {\r\n  white-space: normal;\r\n  /* Allows text to wrap to the next line */\r\n  word-break: break-word;\r\n  /* Forces breaking of long words if needed */\r\n  text-align: left;\r\n  /* Aligns text for readability */\r\n}\r\n\r\n.product-name-cell {\r\n  max-width: 200px;\r\n  /* Adjust as needed for column width */\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  /* Optional: adds \"...\" for long text */\r\n  white-space: normal;\r\n}\r\n\r\n.quantity-input {\r\n  width: 50px;\r\n  /* Ensures quantity input field doesn't take too much space */\r\n  text-align: center;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}