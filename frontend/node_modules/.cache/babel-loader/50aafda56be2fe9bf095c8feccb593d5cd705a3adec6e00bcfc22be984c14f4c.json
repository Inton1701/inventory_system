{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"error-message\"\n};\nconst _hoisted_2 = {\n  ref: \"svgRef\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [$setup.errorMessage ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, _toDisplayString($setup.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), (_openBlock(), _createElementBlock(\"svg\", _hoisted_2, null, 512 /* NEED_PATCH */))]);\n}","map":{"version":3,"names":["key","class","ref","_createElementBlock","$setup","errorMessage","_hoisted_1","_toDisplayString","_createCommentVNode","_hoisted_2"],"sources":["C:\\Users\\Administrator\\OneDrive\\Desktop\\POSExpress\\frontend\\src\\components\\Admin\\Inventory\\Barcode.vue"],"sourcesContent":["<script>\r\nimport JsBarcode from 'jsbarcode';\r\nimport { onMounted, watch, ref } from 'vue';\r\n\r\nexport default {\r\n  props: {\r\n    sku: {\r\n      type: String,\r\n      default: '' // must be no value\r\n    }\r\n  },\r\n  setup(props) {\r\n    const svgRef = ref(null);\r\n    const errorMessage = ref(''); // catch store error dynamic message\r\n    const fallbackSku = '0000000000000'; // defaul SKU for fallback barcode\r\n\r\n\r\n    const calculateEAN13Checksum = (sku) => {\r\n      const digits = sku.split('').map(Number);\r\n      let sum = 0;\r\n\r\n      for (let i = 0; i < 12; i++) {\r\n        sum += (i % 2 === 0 ? digits[i] : digits[i] * 3);\r\n      }\r\n\r\n\r\n      const checksum = (10 - (sum % 10)) % 10;\r\n      return checksum;\r\n    };\r\n\r\n    const generateBarcode = (sku) => {\r\n      // Check if SKU exists and is a string with a length property\r\n      if (!sku || typeof sku !== 'string') {\r\n        console.error('Invalid SKU:', sku);\r\n        errorMessage.value = 'Invalid SKU';\r\n        // Generate a fallback barcode if SKU is invalid\r\n        JsBarcode(svgRef.value, fallbackSku, {\r\n          format: 'CODE128', // Alternative barcode format\r\n          lineColor: '#000',\r\n          width: 2,\r\n          height: 50,\r\n          displayValue: true\r\n        });\r\n        return;\r\n      }\r\n      \r\n      // exactly 13 characters for EAN-13 format\r\n      if (sku.length < 13) {\r\n        sku = sku.padStart(13, '0'); \r\n      } else if (sku.length > 13) {\r\n        sku = sku.slice(0, 13); // delete the addition input if longer than 13\r\n      }\r\n\r\n      // check if 13 digits\r\n      if (sku.length !== 13 || !/^\\d{13}$/.test(sku)) {\r\n        console.error('Invalid SKU format:', sku);\r\n        errorMessage.value = 'Invalid SKU format: must be numeric and 13 digits.';\r\n        // generate a fallback error message\r\n        JsBarcode(svgRef.value, fallbackSku, {\r\n          format: 'CODE128', \r\n          lineColor: '#000',\r\n          width: 2,\r\n          height: 50,\r\n          displayValue: true\r\n        });\r\n        return;\r\n      }\r\n\r\n      // calculate the checksum and append it to the SKU if necessary\r\n      const checksum = calculateEAN13Checksum(sku);\r\n      sku = sku.slice(0, 12) + checksum; // apend checksum to the first 12 digits\r\n\r\n      // clear error message if valid SKU is detected\r\n      errorMessage.value = '';\r\n\r\n      // Generate the barcode using JsBarcode library\r\n      JsBarcode(svgRef.value, sku, {\r\n        format: 'EAN13',\r\n        lineColor: '#000',\r\n        width: 2,\r\n        height: 50,\r\n        displayValue: true\r\n      });\r\n    };\r\n\r\n    // Generate barcode on component mount\r\n    onMounted(() => generateBarcode(props.sku));\r\n\r\n    // watch for SKU changes\r\n    watch(() => props.sku, (newSku) => {\r\n      generateBarcode(newSku);\r\n    });\r\n\r\n    return {\r\n      // barcode in svg format\r\n      svgRef,\r\n      errorMessage\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<template>\r\n  <div>\r\n    <div v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div>\r\n    <svg ref=\"svgRef\"></svg>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.error-message {\r\n  color: red;\r\n  font-weight: bold;\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":";;EAAAA,GAAA;EAyG6BC,KAAK,EAAC;;;EAC1BC,GAAG,EAAC;AAAQ;;uBAFnBC,mBAAA,CAGM,cAFOC,MAAA,CAAAC,YAAY,I,cAAvBF,mBAAA,CAAuE,OAAvEG,UAAuE,EAAAC,gBAAA,CAArBH,MAAA,CAAAC,YAAY,oBAzGlEG,mBAAA,iB,cA0GIL,mBAAA,CAAwB,OAAxBM,UAAwB,+B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}